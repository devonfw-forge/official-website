{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-protocol-buffers","title":"How to: Protocol buffers","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Protocol buffers\n\nProtocol buffers are Google’s language-neutral, platform-neutral, extensible mechanism for serializing structured data. You can see it as a JSON or a XML file, but smaller, faster and with an easier syntax.\n\n\nProtocol buffers are ideal for any situation in which you need to serialize data in a neutral language. Very useful when defining communications such as gRPC protocol.\n\n\nIn this guide you will learn how to create a protocol buffer using proto3 language.\n\n\nThe .proto file starts with a package declaration, which helps to prevent naming conflicts between different projects.\n\n\n\n\n\n\n\nAlso for C#, you can specify the csharp_namespace option. If it wasn’t specified, the generated classes would be placed in a namespace matching the package name.\n\n\nMessages\n\nYou also have message definitions, which is an aggregate containing a set of typed fields:\n\n\n\n\n\n\n\nThe previous example defines a type Person with name, id and email. Each field needs a unique identifier, which is the number shown after the =. The data types are the standard ones including bool, int32, float, double, and string.\n\n\nLet’s say that this Person can have many phone numbers, we could do something like:\n\n\n\n\n\n\n\nAs you can see, if a field is repeated, the field may be repeated any number of times, including 0. You can also define enum types if you want one of your fields to have one of a predefined list of values.\n\n\n\nServices\n\nIf you want to use your message types with an RPC system, you may specify an RPC service interface in a.proto file, and the protocol buffer compiler will create code and stubs in your preferred language.\n\n\nFor example you could define the following contract:\n\n\n\n\n\n\n\nIn this case we will have a SearchService class with a Search method that accepts a SearchRequest and returns a SearchResponse. Both (SearchRequest and SearchResponse) need to be mapped to a message.\n\n\nThe following example shows the complete .proto file used in the devon gRPC templates.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nPlease revise the template documentation and the component documentation to learn more about gRPC\n\n\n\n\n\n\nReferences\n\n\n\nProtocol Buffers - Google Docs\n\n\n\n\n\n\n\n"}