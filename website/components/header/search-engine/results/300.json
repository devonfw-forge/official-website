{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-aws-dynamodb","title":"How to: AWS DynamoDB","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: AWS DynamoDB\n\nIn this guide, you will learn how to configure and use the Amazon DynamoDB database service using devon4net.\n\n\nWhat is Amazon DynamoDB?\n\nAmazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. In DynamoDB, tables, items, and attributes are the core components that you work with. A table is a collection of items, and each item is a collection of attributes. DynamoDB employs primary keys to uniquely identify each item in a table, as well as secondary indexes to provide query flexibility.\nDynamoDB supports two different types of primary keys:\n\n\n\n\nPartition key\n\n\nPartition key and Sort key\n\n\n\n\n\n\n\nWarning\n\n\nSort keys and Secondary indexes are not yet available in devon4net; however, we are working on introducing such features in future updates.\n\n\n\n\n\nIn devon4net you may work with two types of repositories:\n\n\n\n\nTable Repository, which is intended for Complex objects, works with tables and serialization.\n\n\nEntity Repository, which is designed for Model objects with annotations.\n\n\n\n\n\nInstalling the nuget\n\nYou need to install the AWSSDK.DynamoDBV2 nuget, for that you can run the following command in the Package Manager Console:\n\n\n\n\n\n\n\n\nWorking with Table Repository\n\nStep 1 - Create the object\n\nCreate the object you want to use to interact with the database; in this example, we built a user object:\n\n\n\n\n\n\n\n\nStep 2 - Register the DynamoDbTableRepository service\n\nThe code below registers the IDynamoDbTableRepository service with the concrete type DynamoDbTableRepository. The AddTransient method registers the service with a transient lifetime. These services are created each time they’re requested from the service container:\n\n\n\n\n\n\n\n\nStep 3 - Inject the Table Repository\n\n\n\n\n\n\n\nStep 4 - Create a table\n\nIn this scenario, we want to create a table called users. The code below first checks if the table users already exists, and if it doesn’t, then uses the CreateTable method from the DynamoDbTableRepository to create it:\n\n\n\n\n\n\n\n\nStep 5 - Insert values into the table\n\nNow let’s insert data into the table using the repository’s Put method. We must specify the table name, partition key, and object to insert.\n\n\n\n\n\n\n\nAs you can see in the code above, we can obtain the result using DynamoSearchCriteria() We will describe query and scan methods later in this guide.\n\n\n\n\nWorking with Entity Repository\n\nStep 1 - Create the Entity\n\nCreate the entity you want to use to interact with the database; in this example, we built a Users entity:\n\n\n\n\n\n\n\nIn this example, we use some annotations:\n\n\n\n\n[DynamoDBTable(\"tableName\")]: The name of the table that will be created for this entity.\n\n\n[DynamoDBHashKey]: Is used to set a property as Partition Key.\n\n\n[DynamoDBProperty(\"propertyName\")]: The name of the property that will be shown in the database.\n\n\n[DynamoDBIgnore]: For avoiding this property when saving or loading data.\n\n\n\n\n\nStep 2 - Register the DynamoDbEntityRepository service\n\nThe code below registers the IDynamoDbEntityRepository service with the concrete type DynamoDbEntityRepository. The AddTransient method registers the service with a transient lifetime. These services are created each time they’re requested from the service container:\n\n\n\n\n\n\n\n\nStep 3 - Inject the Entity Repository\n\n\n\n\n\n\n\nStep 4 - Create a table\n\nIn this example, we want to create a table called users. The code below first checks if the table users already exists, and if it doesn’t, then uses the CreateTable method from the DynamoDbEntityRepository to create it:\n\n\n\n\n\n\n\n\nStep 5 - Insert values into the table\n\nNow let’s insert data into the table using the repository’s Create method. In this case, we simply need to specify the entity itself as a parameter.\n\n\n\n\n\n\n\nWe also use the the repository’s GetById method to obtain the added user.\n\n\n\n\nSearching methods\n\nDevon4net includes the DynamoSearchCriteria class, which makes it easier to use the DynamoDB SDK searching methods.\n\n\nIn DynamoDB SDK, there are two possible operations:\n\n\n\n\nScan:  Searches the whole table for elements that fit the criteria. Is slower than Query operations.\n\n\nQuery: Performs a direct lookup to a selected partition based on primary or secondary partition/hash key.\n\n\n\n\nIn devon4net you must create a new instance of DynamoSearchCriteria class, for accessing those methods:\n\n\n\n\n\n\n\nThe AddSearchCriteria and AddQueryCriteria methods have fairly similar syntax, as shown in the code above.\n\n\n\n\n\nNote\n\n\nFor more information about query and scan methods please visit the DynamoDB component documentation\n\n\n\n\n\n\n\n"}