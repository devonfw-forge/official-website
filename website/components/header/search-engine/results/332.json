{"type":"doc","filename":"devonfw-guide_devon4net.wiki_templates.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_templates.asciidoc_aws-templates","title":"AWS Templates","breadcrumbs":[".net","Templates","Templates"],"text":"AWS Templates\n\nThe devon4net stack includes a variety of templates aimed at developing applications with Amazon Web Services (AWS). AWS is the most used cloud computing platform and that is why Devon gives you the resources you need to make designing and developing for this cloud technology much more simpler and efficient.\n\n\nAWS Introduction\n\nAmazon Web Services (AWS) is a collection of cloud computing services that Amazon provides an online scalable and cost-effective platform to developers and companies dedicated to software.\n\n\nIt’s mainly directed to online services and its the leading cloud provider in the marketplace providing over 100+ services and a platform to manage them all.\n\n\n\nDevon4Net.Application.Lambda\n\nThis package is a template for constructing Lambda Functions for AWS. It makes use of the Devon4Net.Infrastructure.AWS.Lambda, so please read the documentation about this component before starting to use the template. You also have a 'How to: AWS Lambda' tutorial that shows you how you can develop a lambda function making use of this template.\n\n\n\n\n\nFigure 106. lambda Template File structure\n\n\nIn the previous figure you can see the whole structure of the package. It has one main directory called business where you can find three different examples of Lambda functions that will be explained further on this document.\n\n\nEach of the three management directories is divides as follows:\n\n\n\n\nDto: Here are placed the necessary classes of the custom objects that are used to input and output the data in the lambda functions.\n\n\nFunctions: This folder will contain the function definition for the lambda functions.\n\n\nHandlers: In this directory the classes that implement the FunctionHandler method that will define the lambda function behaviour.\n\n\n\n\nYou will also find in the same level as the business directory some configuration files and a Readme.md file with some extra information.\n\n\nConfiguration\n\nThe configuration files are the following:\n\n\nappsettings.json\n\nThis file contains the configuration for all of the components and the project in general. It can contain subversions following the structure appsettings.{environment}.json and it contains the following:\n\n\n\n\n\n\n\n\n\nUseSecrets: Boolean to indicate if AWS Secrets Manager is being used.\n\n\nUseParameterStore: Boolean to indicate if AWS Parameter Store is being used.\n\n\nCredentials: Credentials for connecting the app with your AWS profile.\n\n\n\n\n\n\n\n\n\n\nRead the AWS components documentation to learn more about the configuration you can do in this type of files.\n\n\n\n\n\n\naws-lambda-tools-defaults.json\n\nThis file provides default values to the AWS CLI for configuring and deploy with Visual Studio.\n\n\nRun this command to learn more:\n\n\n\n\n\n\n\nThis is the file:\n\n\n\n\n\n\n\nThe function-handler option is the function handler location in the form of {DLL_NAME}::{NAMESPACE}::{FUNCTION_HANDLER_NAME}. And the template option will point to a configuration file for the cloud formation.\n\n\n\n\n\n\n\n\nRead the AWS documentation to learn more about this configuration.\n\n\n\n\n\n\nserverless.template\n\nThis configuration provides all the information to the Cloud System so that you don’t have to adjust anything for deploying the function/s.\n\n\n\n\n\n\n\nAs you will notice, the Resources part contains the configuration for each function.\n\n\nThis configuration will look like this:\n\n\n\n\n\n\n\nThe Properties section will have the value of the location as we saw on the aws-lambda-tools-defaults.json file in the form of {DLL_NAME}::{NAMESPACE}::{FUNCTION_HANDLER_NAME}.\n\n\n\n\n\n\n\n\nRead the AWS documentation to learn more about this configuration.\n\n\n\n\n\n\n\nSamples\n\nAs you may know as this point this template includes three samples that show you how to develop lambda functions and also how to interact with other services such as SNS and SQS.\n\n\n\n\n\n\n\n\nPlease go through the code slowly to understand the trace it follows and what it does.\n\n\n\n\n\nSnsManagement\n\nAmazon Simple Notification Service (Amazon SNS) is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication.\n\n\nThis Sample shows you the proper way of handling SNS Events and processing messages in a Lambda Function.\n\n\n\nSqsManagement\n\nAmazon Simple Queue Service (SQS) is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications.\n\n\nThis Sample shows you to handle and process Messages from an AWS Queue service directly in a Lambda Function\n\n\n\nStringManagement\n\nThis is a very simple function that shows how you can perform a lambda to process a string and transform it to uppercase or lowercase.\n\n\n\n\nReferences\n\n\n\nAWS Lambda\n\n\naws-lamda-tools-defaults.json\n\n\nhttps://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/net-dg-advanced-config.html\n\n\n\n\n\n\nDevon4Net.Application.WebAPI.Serverless\n\nThis package contains a template for building a serverless WebAPI.\nIt makes use of the Devon4Net.Infrastructure.WebAPI.Serverless component, therefore please read the documentation about it before using the template.\nYou also have a 'How to: AWS Serverless' guide that demonstrates you how to use this template to create a serverless WebAPI.\n\n\n\n\n\nFigure 107. webAPI serverless Template File structure\n\n\nIn the previous figure you can see the whole structure of the package.\n\n\nConfiguration\n\nThe configuration files are the following:\n\n\nappsettings.json\n\nIt’s the configuration file for the component. It can contain subversions following the structure appsettings.{environment}.json.\n\n\n\n\n\n\n\n\n\nUseSecrets: Boolean to indicate if AWS Secrets Manager is being used.\n\n\nUseParameterStore: Boolean to indicate if AWS Parameter Store is being used.\n\n\nCredentials: Credentials for connecting the app with your AWS profile.\n\n\nCognito: Amazon Cognito identity pools provide temporary AWS credentials for users who are guests (unauthenticated) and for users who have been authenticated and received a token. An identity pool is a store of user identity data specific to your account. In this section you can configure multiple IdentityPools.\n\n\nSqSQueueList: This section is used to configure the Amazon Simple Queue Service (SQS). You must configure some parameters about the queue:\n\n\n\nQueueName: The name of the queue, this field is required.\n\n\nUrl: The queue’s url, this parameter is optional.\n\n\nUseFifo: We have two queue types in Amazon SQS, use false for Standard Queues or set this parameter to true for FIFO Queues.\n\n\nMaximumMessageSize: The maximum message size for this queue.\n\n\nNumberOfThreads: The number of threads of the queue.\n\n\nDelaySeconds: The amount of time that Amazon SQS will delay before delivering a message that is added to the queue.\n\n\nReceiveMessageWaitTimeSeconds: The maximum amount of time that Amazon SQS waits for messages to become available after the queue gets a receive request.\n\n\nMaxNumberOfMessagesToRetrievePerCall: The maximum number of messages to retrieve per call.\n\n\nRedrivePolicy: Defines which source queues can use this queue as the dead-letter queue\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead the AWS SQS documentation to learn more about the configuration of this kind of queues.\n\n\n\n\n\n\n\nReferences\n\n\n\nServerless on AWS\n\n\nUsing identity pools\n\n\nAmazon SQS\n\n\nAmazon SQS features\n\n\nConfiguring queue parameters\n\n\nAmazon SQS delay queues\n\n\nAmazon SQS dead-letter queues\n\n\n\n\n\n\n\n\n"}