{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.aws.lambda","title":"Devon4Net.Infrastructure.AWS.Lambda","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.AWS.Lambda\n\nThis component is part of the AWS Stack in Devon4Net. It provides the necessary classes for creating and deploying Lambda Functions in AWS Cloud. In addition it includes some utilities for managing these functions.\n\n\nConfiguration\n\nThe following configuration is for AWS in general and can be done in appsettings.{environment}.json file as follows:\n\n\n\n\n\n\n\n\n\nUseSecrets: Boolean that indicates if AWS Secrets Manager is being used.\n\n\nUseParameterStore: Boolean to indicate if AWS Parameter Store is being used.\n\n\nCredentials: Credentials for connecting with AWS.\n\n\n\nProfile: A collection of settings is called a profile. This would be the name for the current settings.\n\n\nRegion: AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you.\n\n\nAccessKeyId: Access key ID portion of the keypair configured to access your AWS account.\n\n\nSecretAccessKey: Secret access key portion of the keypair configured to access your AWS account.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. If you don’t have access keys, you can create them from the AWS Management Console.\n\n\n\n\n\nFor the configuration of Lambda functions we also need to fill another file with our values. This file is the aws-lambda-tools-defaults.json. We can specify all the options for the Lambda commands in the .NET Core CLI:\n\n\n\n\n\n\n\n\nSetting up in devon\n\nFor using it in a devon4net project, you could very easily do it by using the template.\n\n\n\n\n\n\n\n\nRead the template documentation to learn more about it.\n\n\n\n\n\nIf you don’t want to use the template, you will need to create a class library with all your files for your functions and add the configuration shown in sections above.\n\n\nIf you don’t have it yet, you will need to install the following tool using CLI like so:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can learn more in the How to: AWS Lambda Function\n\n\n\n\n\n\nSetting up in other projects\n\nFor setting it up in other projects you will need to install first both the component and the Amazon Lambda tool for developing with Visual Studio:\n\n\n\n\nInstall the tool:\n\n\n\n\n\n\n\nInstall the component in your project as a NuGet package, the project were we will install it and develop the functions will be a Class library:\n\n\n\n\n\n\n\n\n\nOnce you have it set up you will need to create your lambda function handlers. If you want to learn how to do it please read the How to: AWS Lambda Function guide.\n\n\nNow you will need to create the following files:\n\n\n\n\nappsettings.{environment}.json that contains the following configuration options:\n\n\n\n\n\n\n\naws-lambda-tools-defaults.json with the default configuration values:\n\n\n\n\n\n\n\n[Optionally] serverless.template with more detailed configuration, very useful if you want to add more than one function:\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\nConfiguration Basics - AWS Docs\n\n\naws-lambda-tools-defaults.json Code Sample - AWS Docs\n\n\n\n\n\n\n"}