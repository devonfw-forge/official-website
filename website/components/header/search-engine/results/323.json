{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.middleware","title":"Devon4Net.Infrastructure.Middleware","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.Middleware\n\nMiddleware is software that’s assembled into an app pipeline to handle requests and responses. Request delegates are used to construct the request pipeline. Each HTTP request is handled by a request delegate.\n\n\nThe diagram below represents the whole request processing pipeline for ASP.NET Core MVC and Razor Pages apps.\nYou can see how existing middlewares are organized in a typical app and where additional middlewares are implemented.\n\n\n\n\n\nFigure 89. Middleware Order\n\n\nThe ASP.NET Core request pipeline is composed of a number of request delegates that are called one after the other. This concept is illustrated in the diagram below. The execution thread is shown by the black arrows.\n\n\n\n\n\nFigure 90. Delegates flow in middleware\n\n\nConfiguration\n\nIn this component there are four custom Middlewares classes, configuration is made on file appsettings.{environment}.json as follows:\n\n\n\n\nClientCertificatesMiddleware.cs: For the management of client certificates.\n\n\n\n\n\n\nThe ClientCertificate Whitelist contains the client’s certificate thumbprint.\n\n\n\nExceptionHandlingMiddleware.cs: Handles a few different types of exceptions.\n\n\nCustomHeadersMiddleware.cs: To add or remove certain response headers.\n\n\n\n\n\n\nOn the sample above, the server application will add to the response headers the AccessControlExposeHeader, XFrameOptionsHeader, XssProtectionHeader and XContentTypeOptionsHeader headers.\nIf the header response attribute does not have a value, it will not be added to the response headers.\n\n\n\n\n\n\n\n\nPlease refer to the How To: Customize Headers documentation for more information.\n\n\n\n\n\n\n\n\nFigure 91. Response Headers\n\n\n\nKillSwicthMiddleware.cs: To enable or disable HTTP requests.\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\nDescription\n\n\n\n\nUseKillSwitch\nTrue to enable KillSwtich middleware\n\n\nEnableRequests\nTrue to enable HTTP requests.\n\n\nHttpStatusCode\nthe HTTP status code that will be returned\n\n\n\n\n\n\n\n\nSetting up in Devon\n\nFor setting it up using the Devon4NetApi template just configure it in the appsettings.{environment}.json file.\n\n\n\nSetting up in other projects\n\nInstall the package on your solution using the Package Manager Console:\n\n\n\n\n\n\n\nConfigure the component in Program.cs adding the following lines:\n\n\n\n\n\n\n\nAdd the default configuration shown in the configuration section.\n\n\n\nReferences\n\nASP.NET Core Middleware - Microsoft Docs\n\n\nWrite custom ASP.NET Core middleware - Microsoft Docs\n\n\n\n\n"}