{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.fluentvalidation","title":"Devon4Net.Infrastructure.FluentValidation","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.FluentValidation\n\nValidation is an automatic check to ensure that data entered is sensible and feasible.\nIt is critical to add validation for data inputs when programming.\nThis avoids unexpected or anomalous data from crashing your application and from obtaining unrealistic garbage outputs.\n\n\nIn the following table some validation methods are described:\n\n\n\n\n\n\n\n\nValidation Method\nDescription\n\n\nRange check\nChecks if the data is inside a given range.\n\n\nType check\nChecks that the data entered is of an expected type\n\n\nLength check\nChecks the number of characters meets expectations\n\n\nPresence check\nChecks that the user has at least inputted something\n\n\nCheck digit\nAn additional digit added to a number that is computed from the other digits; this verifies that the remainder of the number has been input correctly.\n\n\n\n\nFluentValidation is a.NET library that allows users to create strongly-typed validation rules.\n\n\nSetting up in Devon\n\nTo establish a set of validation criteria for a specific object, build a class that inherits from CustomFluentValidator&lt;T&gt;, where T is the type of class to validate. For example:\n\n\n\n\n\n\n\nWhere Employee is the class to validate.\n\n\nCreate a constructor for this class that will handle validation exceptions, and override the CustomValidate() method from the CustomFluentValidator&lt;T&gt; class to include the validation rules.\n\n\n\n\n\n\n\nIn this example, we want Employee entity to not accept Null or empty data.\nWe can notice this error if we do not enter the needed data:\n\n\n\n\n\nFigure 135. Fluent Validation exceptions\n\n\nWe can also develop Custom Validators by utilizing the Predicate Validator to define a custom validation function.\nIn the example above we can add:\n\n\n\n\n\n\n\nThis rule restricts the Todo List from having more than ten items.\n\n\n\n\n\n\n\n\nFor more information about Validators (Rules, Custom Validators, etc…​) please refer to this link\n\n\n\n\n\n\nSetting up in other projects\n\nInstall the package on your solution using the Package Manager Console:\n\n\n\n\n\n\n\nFollow the instructions described in the previous section.\n\n\n\nReferences\n\n\n\nFluentValidation Documentation\n\n\n\n\n\n\n"}