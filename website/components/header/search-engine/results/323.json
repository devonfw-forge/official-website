{"type":"doc","filename":"devonfw-guide_devon4net.wiki_templates.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_templates.asciidoc_grpc-template","title":"gRPC Template","breadcrumbs":[".net","Templates","Templates"],"text":"gRPC Template\n\nIn this part of the document you will learn what is gRPC and how the devon4net gRPC template works.\n\n\nTo help you understand how the template works, we will first go over some general concepts concerning gRPC technology in broad strokes. Then continue describing the contract shared between client and server and how it is formed using Google’s Protocol Buffers. And last but not least, both the GrpcClient and the GrpcServer will be explained.\n\n\ngRPC\n\ngRPC is a modern open source high performance Remote Procedure Call (RPC) framework. It is totally independent of the language used on the client side and the server side.\n\n\nIn gRPC a client app can directly call a method on a server application. Both parts need to share a file that acts as a contract. This way compatibility is ensured between client and server without taking languages into account.\n\n\n\n\n\nFigure 93. gRPC diagram\n\n\nOn the server side, we need to develop a service that implements the contract shared between both parts and also listens to client calls and process them using this implementation.\n\n\nOn the client side, the client can use the methods provided by this contract thanks to the \"stub\" (gRPC client).\n\n\nThis file is the Protocol Buffer (\".proto\" file)and needs to be both in the client and the server for them to understand each other.\n\n\n\nProtocol Buffers\n\nProtocol buffers provide a cross-platform mechanism for serializing structured data. It is like a JSON file, but smaller and faster.\n\n\nThis protocol buffers are written in an language called proto3. The following piece of code describes an example:\n\n\n\n\n\n\n\nThe first line, specifies that you are using the proto3 version. There are other versions such as proto2.\n\n\nThe option csharp_namespace specifies the namespace of the proto file in C#.\n\n\nA message types are definitions of object structures. A message might have different fields, that have:\n\n\n\n\nType: Type of the field value. It can be any scalar type (int32, double, string…​) or composite type (enumerations, other messages…​).\n\n\nNumber: Each field has a unique number which is used to identify the field.\n\n\nRule: Singular (can have zero or one) or repeated (can be zero or multiple times rpeated)\n\n\n\n\nYou can also see a service contract, which is called Greeter and has a method SayHello that accepts a HelloRequest and returns a HelloReply, both also defined on the file.\n\n\n\nDevon4Net.Application.GrpcServer\n\nThis project will launch the server that will be called from the GrpcClient and will manage the rpc calls to the available methods.\n\n\nThe proto file, which is shown in the previous section, defines the contract for the service, that will need to be implemented in this same project.\n\n\nAs you can see in the following figure, the proto file is placed in the directory Protos.\n\n\n\n\n\nFigure 94. GrpcServer directory tree\n\n\nThe service GreeterService, will need to extend Greeter.GreeterBase which is generated automatically thanks to the service named Greeter in the proto file.\n\n\nThis service will need to override the method SayHello defined in the proto file. This method can be overriden from the class Greeter.GreeterBase as it was already implemented:\n\n\n\n\n\n\n\nNotice the attribute GrpcDevonService. All services marked with this attribute will be auto registered in the Program.cs when adding the following line:\n\n\n\n\n\n\n\nThe list of strings provided as argument is the list of assemblies where devon will look for gRPC services tagged with that attribute.\n\n\n\n\n\n\n\n\nCheck the component documentation to learn more.\n\n\n\n\n\n\nDevon4Net.Application.GrpcClient\n\nThe client project will access the GrpcServer project end-point thanks to the protocol buffer and the configuration in the appsettings.{environment}.json. For trying out the communication between the client and the server, you will find an end-point in the GrpcGreeterController class.\n\n\n\n\n\nFigure 95. GrpcClient directory tree\n\n\nThe configuration is done adding the following options to the settings file:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrpcServer is the direction of the gRPC end-points. To learn more about the component configuration please visit the package documentation.\n\n\n\n\n\nThe following line will configure the component to use this configuration in the Program.cs:\n\n\n\n\n\n\n\nThe greeter controller will use a GrpcChannel injected in the constructor as follows:\n\n\n\n\n\n\n\nYou will find that the end-point that accesses the gRPC service looks like this:\n\n\n\n\n\n\n\nThe Greeter.GreeterClient is created automatically and can be used when adding the reference to the proto file namespace with the using directive.\n\n\n\nReferences\n\n\n\nIntroduction to gRPC - gRPC Docs\n\n\nProtocol Buffers - Google Docs\n\n\n\n\n\n\n\n"}