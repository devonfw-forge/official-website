{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto-devonfw-ide-CobiGen-PoC-E2E.asciidoc","title":"End to End POC Code generation using Entity class","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","How to"],"text":"End to End POC Code generation using Entity class\n\nThis article helps to create a sample application using CobiGen.\n\n\nPrerequisites\n\nDownload and install devonfw IDE here,\n\n\n\nSteps to create a Sample Project using CobiGen\n\nThe HOW_TO is divided in 2 parts:\n\n\n\n\nBE-Backend generator (DB + DAO + services) – CONTRACT FIRST APPROACH\n\n\nFE-Frontend generator (Web App Angular + Ionic App) – CONTRACT FIRST APPROACH\n\n\n\n\n\n\n\nSo, ready to go! We’re going to start from the BE part …\n\n\nBackend\n\nUnder your path installation of devonfw, you can find the eclipse-main.bat script and you can run it:\nrun installation_path\\eclipse-main.bat\n\n\nIt will open eclipse\n\n\nCreate a project using a command from the command prompt.\nTo made it, it’s necessary to open a CMD and open the folder where it’s installed devonfw and launch this command under the path workspaces/main.\n\n\n\n\n\n\n\n\nTo facilitate this step, you can go from your \"File Explorer\" under workspaces/main folder and with the right button of the mouse, choose \"Open devonfw CMD shell here\"\n\n\n\n\n\n\nThen launch this command from CMD:\n\n\n\n\n\n\n\nImport the project to eclipse as maven project\n\n\n\nClick FINISH\n\n\nNow We have the following 4 projects.\n\n\n\n\n\nBEFORE to start to create an Entity class, remember to create the tables, for this POC it’s used an H2 Database!\n\n\nCreate a new SQL file (i.e: V0002__CreateTables_myapp.sql) inside `myapp-core` , under the folder path `/myapp-core/src/main/resources/db/migration/1.0` and insert the following script:\n\n\n\n\n\n\n\nWARNING 1: please note that there in that folder is present only one file, 0001, and you have to add the other files in progressive number order (i.e. 0002)!\nWARNING 2: please note that there are 2 underscore in the name!\n\n\n\n\n\nNow create another SQL file (i.e: V0003__PopulateTables-myapp.sql) and add following script about the INSERT in order to populate the table created before.\nThe script must be inserted at the same path used before: `/myapp-core/src/main/resources/db/migration/1.0`\n\n\nWARNING 1: please note that there in that folder is present only one file, 0001, and you have to add the other files in progressive number order (i.e. 0003)!\nWARNING 2: please note that there are 2 underscore in the name!\n\n\n\n\n\n\n\n\n\n\nLet’s create the Entity Class for the code generation\n\n\nCreate a package employeemanagement.dataaccess.api under the folder `myapp-core`.\nNote: It is important to follow this naming convention for CobiGen to work properly.\n\n\n\n\n\nNow create a JPA Entity class in this package\n\n\n\n\n\n\n\nthen generate getters and setters for all attribute, as you can see in the image below:\n\n\ngetter &amp; setter\">\ngetter &amp; setter\">\n\n\nUse CobiGen to generate code. Right click on EmployeeEntity. CobiGen → Generate\n\n\nIf it will ask you to download the templates, click on update:\n\n\n\n\n\nIt will automatically download the latest version of CobiGen_Templates.\n\n\nAttention: If you want to adapt the CobiGen_Templates, (normally this is not necessary), you will find at the end of this document (in a separate chapter) a tutorial on how to import them and adapt them!\n\n\nClick on all the option selected as below:\n\n\n\n\n\nClick on finish. Below Screen would be seen. Click on continue\n\n\n\n\n\nThe entire BE layer structure having CRUD operation methods will be auto generated.\n\n\nSome classes will be generated on the API part (`myapp-api`), normally it will be interfaces, as shown below:\n\n\n\n\n\nSome other classes will be generated on the core part (`myapp-core`), normally it will be implementations as shown below:\n\n\n\n\n\nThe last step is to add the Cross Domain process, because when you are developing JavaScript client and server application separately, you have to deal with cross domain issues.\n\n\nSo, we need to prepare server side to accept request from other domains. We need to cover the following points:\n\n\n\n\nAccept request from other domains.\n\n\nAccept devonfw used headers like X-CSRF-TOKEN or correlationId.\n\n\nBe prepared to receive secured request (cookies).\n\n\n\n\nTo do this it’s necessary to add two kind of dependencies in the pom.xml of the `myapp-core` folder, at the end of the list of dependencies:\n\n\n\n\n\n\n\n\n\n\nNext step is to add some properties under your application.properties file, in the myapp-core folder in the resources/config:\n\n\n\n\n\n\n\n\n\n\nBEFORE to generate the FE, please start the Tomcat server to check that BE Layer has been generated properly.\n\n\nTo start a server you just have to right click on `SpringBootApp.java` → run as → Java Application\n\n\n\n\n\n\n\n\n\n\n\nBE DONE\n\n\nLast but not least: We make a quick REST services test !\n\n\nSee in the application.properties the TCP Port and the PATH\n\n\n\n\n\nNow compose the Rest service URL:\n\n\nservice class &lt;path&gt;/&lt;service method path&gt;\n\n\n\n\n&lt;server&gt; refers to server with port no. (i.e: localhost:8081)\n\n\n&lt;app&gt; is in the application.properties (empty in our case, see above)\n\n\n&lt;rest service class path&gt; refers to EmployeemanagementRestService: (i.e: /employeemanagement/v1)\n\n\n&lt;service method path&gt;/employee/{id}  (i.e: for  getEmployee method)\n\n\n\n\n\n\n\nURL of getEmployee for this example is:\n\n\nFor all employees (POST)\n\n\n\n\n\n\n\nFor the specific employee (GET)\n\n\n\n\n\n\n\nNow download Postman to test the rest services.\n\n\nOnce done, you have to create a POST Request for the LOGIN and insert in the body the JSON containing the username and password admin\n\n\n\n\n\nWARNING: please note that the body of the request must be JSON type!\n\n\nOnce done with success (Status: 200 OK) - you can see the status of the response in the top right corner of Postman - we can create a NEW GET Request in order to get one employee.\n\n\nTo do this you have to create a new request in Postman, GET type, and insert the URL specified before:\n\n\n\n\n\n\n\nThen click on \"SEND\" button…​\n\n\nNow you have to check that response has got Status: 200 OK and to see the below Employee\n\n\n\n\n\nNow that We have successfully tested the BE is time to go to create the FE !\n\n\n\nFrontend\n\nLet’s start now with angular Web and then Ionic app.\n\n\nAngular Web App\n\nTo generate angular structure, download or clone devon4ng-application-template from\n\n\n\n\n\n\n\n\n\n\nIMPORTANT when you download the zip of the source code of your FE application, the name of the app MUST BE devon4ng-application-template and you can extract it in your devonfw folder, under workspaces/main\n\n\nOnce downloaded the APP, you can open the application with your favorite IDE (IntelliJ, Visual Studio Code, …​)\nInstead, if you want to open this project with Eclipse, you have to follow these steps:\n\n\n\n\nRight click on the left part of Eclipse, and click on \"Import\":\n\n\n\nClick on \"Projects from Folder or Archive\"\n\n\n\nSelect your folder where you have saved the Angular FE Application, under workspaces/main. Wait that all the dependencies are charged and then click on \"Finish\"\n\n\n\nAt the end, you will have a structure like this:\n\n\n\n\n\nOnce done, right click on EmployeeEto.java file present under the package com.devonfw.poc.employeemanagement.logic.api.to, in the Backend part (`myapp-core module`).\nClick on the selected options as seen in the screenshot:\n\n\n\n\n\nClick on Finish\n\n\n\n\n\nThe entire ANGULAR structure has been auto generated. The generated code will be merged to the existing.\n\n\nee layer\">\n\n\nIMPORTANT now you have to check in the app-routing.module.ts file, if the content corresponding to the code below:\n\n\n\n\n\n\n\nAfter that, if you want to make visible the Employee Grid in you FE application, you have to modify the nav-bar.component.html, to add the Employee grid in the section:\n\n\n\n\n\n\n\nOpen the command prompt and execute devon npm install from your application folder (workspaces/main/devon4ng-application-template), which would download all the required libraries.\n\n\nCheck the file environment.ts if the server path is correct. (for production you will have to change also the environment.prod.ts file)\n\n\n\n\n\nIn order to do that, it’s important to look at the application.properties to see the values as PATH, TCP port etc…​\n\n\n\n\n\nFor example in this case the URL should be since the context path is empty the server URLS should be like:\n\n\n\n\n\n\n\nWarning: REMEMBER to set security filed to CSRF , if it is not configured already.\n\n\nNow run the devon ng serve -o command to run the Angular Application, from your application folder (workspaces/main/devon4ng-application-template), as done before.\n\n\n\n\n\nIf the command execution is successful, the below screen will appear and it would be automatically redirected to the URL:\n\n\n\n\n\n\n\n\n\n\nYou can login in the Web Application, with admin user and password.\nObviously, the BackEnd part must be up &amp; running during this test!\n\n\nANGULAR WebApp DONE\n\n\n\nIonic Mobile App\n\nTo generate Ionic structure, download or clone *devon4ng-application-template* from\n\n\n\n\n\n\n\nIMPORTANT when you download the zip of the source code of your FE application, the name of the app MUST BE devon4ng-ionic-application-template and you can extract it in your devonfw folder, under workspaces/main\n\n\nOnce downloaded the APP, you can open the application with your favorite IDE (IntelliJ, Visual Studio Code, …​)\nInstead, if you want to open this project with Eclipse, you have to follow these steps:\n\n\n\n\nRight click on the left part of Eclipse, and click on \"Import\":\n\n\n\nClick on \"Projects from Folder or Archive\"\n\n\n\nSelect your folder where you have saved the Angular FE Application, under workspaces/main. Wait that all the dependencies are charged and then click on \"Finish\"\n\n\n\nAt the end, you will have a structure like this:\n\n\n\n\n\nOnce done, Right click on the EmployeeEto as you already did before in order to use CobiGen.\nClick on the selected options as seen in the screenshot:\n\n\n\n\n\nClick on Finish\nThe entire ionic structure will be auto generated.\n\n\n\n\n\nChange (if necessary) the server URL (with correct serve URL) in environment.ts, environment.prod.ts and environment.android.ts files (i.e: itapoc\\devon4ng-ionic-application-template\\src\\environments\\).\n\n\nThe angular.json file inside the project has already a build configuration for android.\n\n\n\n\n\nThe only TWO thing that you have to modify, in this IONIC app is in employee-list.page.html and business-operator.service.ts.y\n\n\n1:\nYou have to change this line:\n\n\n\n\n\n\n\nwith this line:\n\n\n\n\n\n\n\n2:\nYou have to change this line:\n\n\n\n\n\n\n\nwith this line:\n\n\n\n\n\n\n\nOnce checked if all the files are correct, open a CMD devon CLI on the folder of the ionic template application (workspaces/main/devon4ng-ionic-application-template), under your devonFW workspace.\nIn this folder:\nRun the command *devon npm install* in the root folder to download the dependencies.\nOnce finished, run the command *devon ionic serve*\n\n\n\n\n\nOnce the execution is successful, you can make the LOGIN with admin/admin and…​\n\n\n\n\n\nIONIC Mobile App DONE\n\n\nSo: Well Done!!!\n\n\nStarting from an Entity class you have successfully generated the Backend layer (REST, SOAP, `DTO, Spring services, Hibernate DAO), the Angular Web App and the Ionic mobile App!`\n\n\n\n\n\nBuild APK\n\nSince We’re going to create apk remember the following preconditions:\n\n\n\n\nGradle\n\n\nAndroid Studio\n\n\nAndroid SDK\n\n\nCapacitor\n\n\n\n\nNow, open CMD and type the path where your devon4ng-ionic-application-template project is present.\nRun the following commands:\n\n\n\n\nnpx cap init\n\n\nionic build --configuration=android\n\n\nnpx cap add android\n\n\nnpx cap copy\n\n\nnpx cap open android\n\n\n\n\nBuild the APK using Android studio.\n\n\n\n\n\n\n\n\nYou can find your apk file in:\n/devon4ng-ionic-application-template/android/app/build/outputs/apk/debug\n\n\n\n\n\n\n\n\n"}