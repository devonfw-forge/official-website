{"type":"doc","filename":"devonfw-guide_ide.wiki_cli.asciidoc.html","anchor":"devonfw-guide_ide.wiki_intellij.asciidoc","title":"intellij","breadcrumbs":["devonfw-ide","Usage","Devon CLI"],"text":"intellij\n\nThe intellij commandlet allows to install, configure, and launch IntelliJ.\nTo launch IntelliJ for your current workspace and devonfw-ide installation, simply run:\ndevon intellij\n\n\nYou may also supply additional arguments as devon intellij «args». These are explained by the following table:\n\n\nTable 13. Usage of devon intellij\n\n\n\n\n\n\nArgument(s)\nMeaning\n\n\n\n\n--all\nif provided as first arg then to command will be invoked for each workspace\n\n\nsetup\nsetup IntelliJ (install or update)\n\n\nadd-plugin «id»\ninstall an additional plugin\n\n\nrun\nlaunch IntelliJ (default if no argument is given)\n\n\nstart\nsame as run\n\n\nws-up[date]\nupdate workspace\n\n\nws-re[verse]\nreverse merge changes from workspace into settings\n\n\nws-reverse-add\nreverse merge adding new properties\n\n\ncreate-script\ncreate launch script for this IDE, your current workspace and your OS\n\n\n\n\nThere are variables that can be used for IntelliJ. These are explained by the following table:\n\n\nTable 14. Variables of devonfw-ide for intelliJ\n\n\n\n\n\n\nVariable\nMeaning\n\n\n\n\nINTELLIJ_VERSION\nThe version of the tool IntelliJ to install and use.\n\n\nINTELLIJ_EDITION_TYPE\nThe edition of the tool IntelliJ to install and use. The value C mean Community edition and the value U mean Ultimate edition. The Ultimate edition requires a license. The user has to buy the license separately and it is not part of devonfw-ide. The devonfw-ide only supports download and installation.\n\n\n*EXTRA_JAVA_VERSION\nYou can set this to a different (newer) version of Java used to launch your IDE (other than JAVA_VERSION that is used to build your project)\n\n\n\n\nplugins\n\nTo be productive with IntelliJ you need plugins. Of course devonfw-ide can automate this for your:\nIn your settings git repository create a folder intellij/plugins (click this link to see more examples and see which plugins come by default).\nHere you can create a properties file for each plugin. This is an example scala.properties:\n\n\n\n\n\n\n\nThe variables are defined as following:\n\n\n\n\nplugin_id defines the unique ID of the plugin to install. If you want to customize devonfw-ide with new plugins use the search on https://plugins.jetbrains.com/idea_ce to find the plugin of your choice. Select the tab Versions and click on a version in the list. The plugin ID is displayed in the upper right corner. Copy &amp; paste the ID from here to make up your own custom config.\n\n\nplugin_active is an optional parameter. If it is true (default) the plugin will be installed automatically during the project setup for all developers in your team. Otherwise developers can still install the plugin manually via devon intellij add-plugin «plugin_id».\n\n\n\n\nIn general you should try to stick with the configuration pre-defined by your project. But some plugins may be considered as personal flavor and are typically not predefined by the project config. Such plugins should be shipped with your settings as described above with plugin_active=false allowing you to easily install it manually. Surely, you can easily add plugins via the UI of IntelliJ. However, be aware that some plugins may collect sensitive data or could introduce other vulnerabilities. So consider the governance of your project and talk to your technical lead before installing additional plugins that are not pre-defined in your settings.\n\n\nAs maintainer of the settings for your project you should avoid to ship too many plugins that may waste resources but are not used by every developer. By configuring additional plugins with plugin_active=false you can give your developers the freedom to install some additional plugins easily.\n\n\n\n\n\n"}