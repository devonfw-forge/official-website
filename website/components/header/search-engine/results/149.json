{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-jdk.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-jdk.asciidoc_upgrading","title":"Upgrading","breadcrumbs":["Java","General","Java Development Kit"],"text":"Upgrading\n\nUntil Java 8 compatibility was one of the key aspects for Java version updates (after the mess on the Swing updates with Java2 many years ago).\nHowever, Java 9 introduced a lot of breaking changes.\nThis documentation wants to share the experience we collected in devonfw when upgrading from Java 8 to newer versions.\nFirst of all we separate runtime changes that you need if you want to build your software with JDK 8 but such that it can also run on newer versions (e.g. JRE 11)\nfrom changes required to also build your software with more recent JDKs (e.g. JDK 11 or 12).\n\n\nRuntime Changes\n\nThis section describes required changes to your software in order to make it run also with versions newer than Java 8.\n\n\nClasses removed from JDK\n\nThe first thing that most users hit when running their software with newer Java versions is a ClassNotFoundException like this:\n\n\n\n\n\n\n\nAs Java 9 introduced a module system with Jigsaw, the JDK that has been a monolithic mess is now a well-defined set of structured modules.\nSome of the classes that used to come with the JDK moved to modules that where not available by default in Java 9 and have even been removed entirely in later versions of Java.\nTherefore you should simply treat such code just like any other 3rd party component that you can add as a (maven) dependency.\nThe following table gives you the required hints to make your software work even with such classes / modules removed from the JDK (please note that the specified version is just a suggestion that worked, feel free to pick a more recent or more appropriate version):\n\n\nTable 38. Dependencies for classes removed from Java 8 since 9+\n\n\n\n\n\n\n\n\nClass\nGroupId\nArtifactId\nVersion\n\n\n\n\njavax.xml.bind.*\njavax.xml.bind\njaxb-api\n2.3.1\n\n\ncom.sun.xml.bind.*\norg.glassfish.jaxb\njaxb-runtime\n2.3.1\n\n\njava.activation.*\njavax.activation\njavax.activation-api\n1.2.0\n\n\njava.transaction.*\njavax.transaction\njavax.transaction-api\n1.2\n\n\njava.xml.ws.*\njavax.xml.ws\njaxws-api\n2.3.1\n\n\njavax.jws.*\njavax.jws\njavax.jws-api\n1.1\n\n\njavax.annotation.*\njavax.annotation\njavax.annotation-api\n1.3.2\n\n\n\n\n\n3rd Party Updates\n\nFurther, internal and inofficial APIs (e.g. sun.misc.Unsafe) have been removed.\nThese are typically not used by your software directly but by low-level 3rd party libraries like asm that need to be updated.\nAlso simple things like the Java version have changed (from 1.8.x to 9.x, 10.x, 11.x, 12.x, etc.).\nSome 3rd party libraries were parsing the Java version in a very naive way making them unable to be used with Java 9+:\n\n\n\n\n\n\n\nTherefore the following table gives an overview of common 3rd party libraries that have been affected by such breaking changes and need to be updated to at least the specified version:\n\n\nTable 39. Minimum recommended versions of common 3rd party for Java 9+\n\n\n\n\n\n\n\n\nGroupId\nArtifactId\nVersion\nIssue\n\n\n\n\norg.apache.commons\ncommons-lang3\n3.7\nLANG-1365\n\n\ncglib\ncglib\n3.2.9\n102, 93, 133\n\n\norg.ow2.asm\nasm\n7.1\n2941\n\n\norg.javassist\njavassist\n3.25.0-GA\n194, 228, 246, 171\n\n\n\n\n\nResourceBundles\n\nFor internationalization (i18n) and localization (l10n) ResourceBundle is used for language and country specific texts and configurations as properties (e.g. MyResourceBundle_de.properties). With Java modules there are changes and impacts you need to know to get things working. The most important change is documented in the JavaDoc of ResourceBundle. However, instead of using ResourceBundleProvider and refactoring your entire code causing incompatibilities, you can simply put the resource bundles in a regular JAR on the classpath rather than a named module (or into the lauching app).\nIf you want to implement (new) Java modules with i18n support, you can have a look at mmm-nls.\n\n\n\n\nBuildtime Changes\n\nIf you also want to change your build to work with a recent JDK you also need to ensure that test frameworks and maven plugins properly support this.\n\n\nFindbugs\n\nFindbugs does not work with Java 9+ and is actually a dead project.\nThe new findbugs is SpotBugs.\nFor maven the new solution is spotbugs-maven-plugin:\n\n\n\n\n\n\n\n\nTest Frameworks\n\nTable 40. Minimum recommended versions of common 3rd party test frameworks for Java 9+\n\n\n\n\n\n\n\n\nGroupId\nArtifactId\nVersion\nIssue\n\n\n\n\norg.mockito\nmockito-core\n2.23.4\n1419, 1696, 1607, 1594, 1577, 1482\n\n\n\n\n\nMaven Plugins\n\nTable 41. Minimum recommended versions of common maven plugins for Java 9+\n\n\n\n\n\n\n\n\nGroupId\nArtifactId\n(min.) Version\nIssue\n\n\n\n\norg.apache.maven.plugins\nmaven-compiler-plugin\n3.8.1\nx\n\n\norg.apache.maven.plugins\nmaven-surefire-plugin\n2.22.2\nSUREFIRE-1439\n\n\norg.apache.maven.plugins\nmaven-surefire-report-plugin\n2.22.2\nSUREFIRE-1439\n\n\norg.apache.maven.plugins\nmaven-archetype-plugin\n3.1.0\nx\n\n\norg.apache.maven.plugins\nmaven-javadoc-plugin\n3.1.0\nx\n\n\norg.jacoco\njacoco-maven-plugin\n0.8.3\n663\n\n\n\n\n\nMaven Usage\n\nWith Java modules you can not run Javadoc standalone anymore or you will get this error when running mvn javadoc:javadoc:\n\n\n\n\n\n\n\nAs a solution or workaround you need to include the compile goal into your build lifecycle so the module-path is properly configured:\n\n\n\n\n\n\n\n\n\n\n"}