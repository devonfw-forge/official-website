{"type":"doc","filename":"devonfw-guide_devon4j.wiki_Spring-native-vs-Quarkus.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_spring-native-vs-quarkus.asciidoc_quarkus","title":"Quarkus","breadcrumbs":["Java","Quarkus","Spring Native vs Quarkus"],"text":"Quarkus\n\nQuarkus is a full-stack, Kubernetes-native Java framework made for JVMs. With its container-first-philosophy and its native compilation with GraalVM, Quarkus optimizes Java for containers with low memory usage and fast startup times.\n\n\nQuarkus achieves this in the following ways:\n\n\n\n\nFirst Class Support for GraalVM\n\n\nBuild Time Metadata Processing: As much processing as possible is\ndone at build time, so your application will only contain the classes\nthat are actually needed at runtime. This results in less memory usage,\nand also faster startup time, as all metadata processing has already been\ndone.\n\n\nReduction in Reflection Usage: Quarkus tries to avoid reflection as much as possible in order to reduce startup time and memory usage.\n\n\nNative Image Pre Boot: When running in a native image, Quarkus\npre-boots as much of the framework as possible during the native image\nbuild process. This means that the resulting native image has already\nrun most of the startup code and serialized the result into the\nexecutable, resulting in an even faster startup-time.\n\n\n\n\nThis gives Quarkus the potential for a great platform for serverless cloud and Kubernetes environments. For more information about Quarkus and its support for devonfw please refer to the Quarkus introduction guide.\n\n\n\n"}