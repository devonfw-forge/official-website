{"type":"doc","filename":"devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html","anchor":"devonfw-guide_devon4j.wiki_guide-batch-layer.asciidoc","title":"Batch Layer","breadcrumbs":["Java","Spring","Layers"],"text":"Batch Layer\n\nWe understand batch processing as a bulk-oriented, non-interactive, typically long running execution of tasks. For simplicity, we use the term \"batch\" or \"batch job\" for such tasks in the following documentation.\n\n\ndevonfw uses Spring Batch as a batch framework.\n\n\nThis guide explains how Spring Batch is used in devonfw applications. It focuses on aspects which are special to devonfw. If you want to learn about spring-batch you should adhere to springs references documentation.\n\n\nThere is an example of a simple batch implementation in the my-thai-star batch module.\n\n\nIn this chapter, we will describe the overall architecture (especially concerning layering) and how to administer batches.\n\n\nLayering\n\nBatches are implemented in the batch layer. The batch layer is responsible for batch processes, whereas the business logic is implemented in the logic layer. Compared to the service layer, you may understand the batch layer just as a different way of accessing the business logic.\nFrom a component point of view, each batch is implemented as a subcomponent in the corresponding business component.\nThe business component is defined by the business architecture.\n\n\nLet’s make an example for that. The sample application implements a batch for exporting ingredients. This ingredientExportJob belongs to the dishmanagement business component.\nSo the ingredientExportJob is implemented in the following package:\n\n\n\n\n\n\n\nBatches should invoke use cases in the logic layer for doing their work.\nOnly \"batch specific\" technical aspects should be implemented in the batch layer.\n\n\n\n\nExample:\nFor a batch, which imports product data from a CSV file, this means that all code for actually reading and parsing the CSV input file is implemented in the batch layer.\nThe batch calls the use case \"create product\" in the logic layer for actually creating the products for each line read from the CSV input file.\n\n\n\n\nDirectly accessing data access layer\n\nIn practice, it is not always appropriate to create use cases for every bit of work a batch should do. Instead, the data access layer can be used directly.\nAn example for that is a typical batch for data retention which deletes out-of-time data.\nOften deleting, out-dated data is done by invoking a single SQL statement. It is appropriate to implement that SQL in a Repository or DAO method and call this method directly from the batch.\nBut be careful: this pattern is a simplification which could lead to business logic cluttered in different layers, which reduces the maintainability of your application.\nIt is a typical design decision you have to make when designing your specific batches.\n\n\n\n\nProject structure and packaging\n\nBatches will be implemented in a separate Maven module to keep the application core free of batch dependencies. The batch module includes a dependency on the application core-module to allow the reuse of the use cases, DAOs etc.\nAdditionally the batch module has dependencies on the required spring batch jars:\n\n\n\n\n\n\n\nTo allow an easy start of the batches from the command line it is advised to create a bootified jar for the batch module by adding the following to the pom.xml of the batch module:\n\n\n\n\n\n\n\n\nImplementation\n\nMost of the details about implementation of batches is described in the spring batch documentation.\nThere is nothing special about implementing batches in devonfw. You will find an easy example in my-thai-star.\n\n\n\nStarting from command line\n\nDevonfw advises to start batches via command line. This is most common to many ops teams and allows easy integration in existing schedulers. In general batches are started with the following command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nExplanation\n\n\n\n\n--spring.main.web-application-type=none\nThis disables the web app (e.g. Tomcat)\n\n\n--spring.batch.job.names=&lt;myJob&gt;\nThis specifies the name of the job to run. If you leave this out ALL jobs will be executed. Which probably does not make to much sense.\n\n\n&lt;params&gt;\n(Optional) additional parameters which are passed to your job\n\n\n\n\nThis will launch your normal spring boot app, disables the web application part and runs the designated job via Spring Boots org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.\n\n\n\nScheduling\n\nIn real world scheduling of batches is not as simple as it first might look like.\n\n\n\n\nMultiple batches have to be executed in order to achieve complex tasks. If one of those batches fails the further execution has to be stopped and operations should be notified for example.\n\n\nInput files or those created by batches have to be copied from one node to another.\n\n\nScheduling batch executing could get complex easily (quarterly jobs, run job on first workday of a month, …​)\n\n\n\n\nFor devonfw we propose the batches themselves should not mess around with details of scheduling.\nLikewise your application should not do so. This complexity should be externalized to a dedicated batch administration service or scheduler.\nThis service could be a complex product or a simple tool like cron. We propose Rundeck as an open source job scheduler.\n\n\nThis gives full control to operations to choose the solution which fits best into existing administration procedures.\n\n\n\nHandling restarts\n\nIf you start a job with the same parameters set after a failed run (BatchStatus.FAILED) a restart will occur.\nIn many cases your batch should then not reprocess all items it processed in the previous runs.\nFor that you need some logic to start at the desired offset. There different ways to implement such logic:\n\n\n\n\nMarking processed items in the database in a dedicated column\n\n\nWrite all IDs of items to process in a separate table as an initialization step of your batch. You can then delete IDs of already processed items from that table during the batch execution.\n\n\nStoring restart information in springs ExecutionContext (see below)\n\n\n\n\nUsing spring batch ExecutionContext for restarts\n\nBy implementing the ItemStream interface in your ItemReader or ItemWriter you may store information about the batch progress in the ExecutionContext. You will find an example for that in the CountJob in My Thai Star.\n\n\nAdditional hint: It is important that bean definition method of your ItemReader/ItemWriter return types implementing ItemStream(and not just ItemReader or ItemWriter alone). For that the ItemStreamReader and ItemStreamWriter interfaces are provided.\n\n\n\n\nExit codes\n\nYour batches should create a meaningful exit code to allow reaction to batch errors e.g. in a scheduler.\nFor that spring batch automatically registers an org.springframework.boot.autoconfigure.batch.JobExecutionExitCodeGenerator. To make this mechanism work your spring boot app main class as to populate this exit code to the JVM:\n\n\n\n\n\n\n\n\nStop batches and manage batch status\n\nSpring batch uses several database tables to store the status of batch executions.\nEach execution may have different status.\nYou may use this mechanism to gracefully stop batches.\nAdditionally in some edge cases (batch process crashed) the execution status may be in an undesired state.\nE.g. the state will be running, despite the process crashed sometime ago.\nFor that cases you have to change the status of the execution in the database.\n\n\nCLI-Tool\n\nDevonfw provides a easy to use cli-tool to manage the executing status of your jobs.\nThe tool is implemented in the devonfw module devon4j-batch-tool. It will provide a runnable jar, which may be used as follows:\n\n\n\nList names of all previous executed jobs\n\njava -D'spring.datasource.url=jdbc:h2:~/mts;AUTO_SERVER=TRUE' -jar devon4j-batch-tool.jar jobs list\n\nStop job named 'countJob'\n\njava -D'spring.datasource.url=jdbc:h2:~/mts;AUTO_SERVER=TRUE' -jar devon4j-batch-tool.jar jobs stop countJob\n\nShow help\n\njava -D'spring.datasource.url=jdbc:h2:~/mts;AUTO_SERVER=TRUE' -jar devon4j-batch-tool.jar\n\n\n\n\nAs you can the each invocation includes the JDBC connection string to your database.\nThis means that you have to make sure that the corresponding DB driver is in the classpath (the prepared jar only contains H2).\n\n\n\n\nAuthentication\n\nMost business application incorporate authentication and authorization.\nYour spring boot application will implement some kind of security, e.g. integrated login with username+password or in many cases authentication via an existing IAM.\nFor security reasons your batch should also implement an authentication mechanism and obey the authorization implemented in your application (e.g. via @RolesAllowed).\n\n\nSince there are many different authentication mechanism we cannot provide an out-of-the-box solution in devonfw, but we describe a pattern how this can be implemented in devonfw batches.\n\n\nWe suggest to implement the authentication in a Spring Batch tasklet, which runs as the first step in your batch. This tasklet will do all of the work which is required to authenticate the batch. A simple example which authenticates the batch \"locally\" via username and password could be implemented like this:\n\n\n\n\n\n\n\nThe username and password have to be supplied via two cli parameters -username and -password. This implementation creates an \"authenticated\" Authentication and sets in the Spring Security context. This is just for demonstration normally you should not provide passwords via command line. The actual authentication will be done automatically via Spring Security as in your \"normal\" application.\nIf you have a more complex authentication mechanism in your application e.g. via OpenID connect just call this in the tasklet. Naturally you may read authentication parameters (e.g. secrets) from the command line or more securely from a configuration file.\n\n\nIn your Job Configuration set this tasklet as the first step:\n\n\n\n\n\n\n\n\nTipps &amp; tricks\n\nIdentifying job parameters\n\nSpring uses a jobs parameters to identify job executions. Parameters starting with \"-\" are not considered for identifying a job execution.\n\n\n\n\n\n\n\n"}