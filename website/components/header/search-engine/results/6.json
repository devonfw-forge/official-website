{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-aop.asciidoc","title":"Aspect Oriented Programming (AOP)","breadcrumbs":["Java","Spring","Guides"],"text":"Aspect Oriented Programming (AOP)\n\nAOP is a powerful feature for cross-cutting concerns. However, if used extensive and for the wrong things an application can get unmaintainable. Therefore we give you the best practices where and how to use AOP properly.\n\n\nAOP Key Principles\n\nWe follow these principles:\n\n\n\n\nWe use spring AOP based on dynamic proxies (and fallback to cglib).\n\n\nWe avoid AspectJ and other mighty and complex AOP frameworks whenever possible\n\n\nWe only use AOP where we consider it as necessary (see below).\n\n\n\n\n\nAOP Usage\n\nWe recommend to use AOP with care but we consider it established for the following cross cutting concerns:\n\n\n\n\nTransaction-Handling\n\n\nAuthorization\n\n\nValidation\n\n\nTrace-Logging (for testing and debugging)\n\n\nException facades for services but only if no other solution is possible (use alternatives such as JAX-RS provider instead).\n\n\n\n\n\nAOP Debugging\n\nWhen using AOP with dynamic proxies the debugging of your code can get nasty. As you can see by the red boxes in the call stack in the debugger there is a lot of magic happening while you often just want to step directly into the implementation skipping all the AOP clutter. When using Eclipse this can easily be archived by enabling step filters. Therefore you have to enable the feature in the Eclipse tool bar (highlighted in read).\n\n\n\n\n\n\n\nIn order to properly make this work you need to ensure that the step filters are properly configured:\n\n\n\n\n\n\n\nEnsure you have at least the following step-filters configured and active:\n\n\n\n\n\n\n\n\n\n\n\n"}