{"type":"doc","filename":"devonfw-guide_cicdgen.wiki_master-cicdgen.asciidoc_cicdgen-schematics.html","anchor":"devonfw-guide_cicdgen.wiki_master-cicdgen.asciidoc_cicdgen-schematics","title":"cicdgen Schematics","breadcrumbs":["CI/CD","cicdgen","cicdgen Schematics"],"text":"cicdgen Schematics\n\n\nCICDGEN SCHEMATICS\n\nWe use angular schematics to create and update an existing devonfw project in order to adapt it to a CICD environment. All schematics are prepared to work with Production Line, a Capgemini CICD platform, but it can also work in other environment which have the following tools:\n\n\n\n\nJenkins\n\n\nGitLab\n\n\nNexus 3\n\n\nSonarQube\n\n\n\n\nThe list of available schematics are:\n\n\n\n\ndevon4j\n\n\ndevon4ng\n\n\ndevon4net\n\n\ndevon4node\n\n\n\n\nHow to run the schematics\n\nYou can run the schematics using the schematics CLI provided by the angular team, but the easiest way to run it is using the cicdgen CLI which is a wrapper for the schematics CLI in order to use it in a easy way.\n\n\nTo generate files you only need to run the command\n\n\n\n\n\n\n\n&lt;schematic-name&gt; is the name of the schematic that you want to execute.\n\n\nYou can find all information about arguments in the schematic section.\n\n\n\n\nMerge Strategies\n\nWhen you execute cicdgen in a project, is possible that you already have some files that cicdgen will generate. Until version 1.5 the behaviour in these cases was to throw an error and not create/modify any file. Since version 1.6 you can choose what to do in case of conflict. In this page we will explain who to choose one merge strategy and how it works.\n\n\nChoose a merge strategy\n\nTo choose a merge strategy, you must pass to cicdgen the merge parameter followed by the name of the strategy. The strategies available are: error, keep, override, combine.\n\n\nExample:\n\n\n\n\n\n\n\n\nMerge strategies\n\n\n\nerror: The error strategy is the same as until version 1.5, throwing an error and do not create/modify any file. This is the default value, if you do not pass the merge parameter this value will be taken.\n\n\nkeep: The keep strategy will keep the actual content of your files in case of conflict. If there is no conflict, the file will be created with the new content.\n\n\noverride: The override strategy will override your current files, without throwing any error, and create a new ones with the new content. If there is no conflict, the file will be created with the new content.\n\n\ncombine: The combine strategy will create a new file combining the current content with the new content. In order to combine both files, it will apply a diff algorithm and it will show the conflicts in the same way that git does. If there is no conflict, the file will be created with the new content.\n\nBy resolving the conflicts in the same way as git, you can use the same tools in order to solve them. For example, you can use VSCode:\n\n\n\n\n\n\n\n\nExamples:\n\n\nkeep\nCurrent file:\n\n\n\n\n\n\n\nNew file:\n\n\n\n\n\n\n\nThe result will be:\n\n\n\n\n\n\n\noverride\nCurrent file:\n\n\n\n\n\n\n\nNew file:\n\n\n\n\n\n\n\nThe result will be:\n\n\n\n\n\n\n\ncombine\nCurrent file:\n\n\n\n\n\n\n\nNew file:\n\n\n\n\n\n\n\nThe result will be:\n\n\n\n\n\n\n\n\n\n\n\ndevon4j schematic\n\nWith the cicdgen generate devon4j command you will be able to generate some files required for CICD. In this section we will explain the arguments of this command and also the files that will be generated.\n\n\ndevon4j schematic arguments\n\nWhen you execute the cicdgen generate devon4j command you can also add some arguments in order to modify the behaviour of the command. Those arguments are:\n\n\n\n\n--docker\n\nThe type of this parameter if boolean. If it is present, docker related files and pipeline stage will be also generated. For more details see docker section of Jenkinsfile and files generated for docker\n\n\n\n--dockerurl\n\nThe URL of your external docker daemon. Example: tcp://127.0.0.1:2376\n\n\n\n--dockercertid\n\nThe Jenkins credential id for your docker daemon certificate. It is only required when your docker daemon is secure.\n\n\n\n--registryurl\n\nYour docker registry URL. It is required when --docker is true, and it will be used to know where the docker image will be uploaded.\n\n\n\n--openshift\n\nThe type of this parameter if boolean. If it is present, OpenShift related files and pipeline stage will be also generated. For more details see OpenShift section of Jenkinsfile and files generated for docker (same as --docker)\n\n\n\n--ocname\n\nThe name used for register your OpenShift cluster in Jenkins.\n\n\n\n--ocn\n\nOpenShift cluster namespace\n\n\n\n--teams\n\nWith this argument we can add the teams notification option in the Jenkinsfile.\n\n\n\n--teamsname\n\nThe name of the Microsoft Teams webhook. It is defined at Microsoft Teams connectors.\n\n\n\n--teamsurl\n\nThe url of the Microsoft Teams webhook. It is returned by Microsoft Teams when you create a connector.\n\n\n\n--merge\n\nIf you have used cicdgen previously, you can choose what you want to do in case of file conflict. The default behavior is to throw an error and not modify any file. You can see the other strategies on their specific page.\n\n\n\n--commit\n\nIf true, all changes will be committed at the end of the process (if possible). In order to send a false value, you need to write --commit=false\n\n\n\n\n\n\nDevon4ng generated files\n\nWhen you execute the generate devon4ng command, some files will be added/updated in your project.\n\n\nFiles\n\n\n\n.gitignore\n\nDefines all files that git will ignore. e.g: compiled files, IDE configurations. It will download the content from: https://gitignore.io/api/java,maven,eclipse,intellij,intellij+all,intellij+iml,visualstudiocode\n\n\n\npom.xml\n\nThe pom.xml is modified in order to add, if needed, the distributionManagement.\n\n\n\nJenkinsfile\n\nThe Jenkinsfile is the file which define the Jenkins pipeline of our project. With this we can execute the test, build the application and deploy it automatically following a CICD methodology. This file is prepared to work with the Production Line default values, but it is also fully configurable to your needs.\n\n\n\n\nPrerequisites\n\n\n\nA Production Line instance. It can works also if you have a Jenkins, SonarQube and Nexus3, but in this case maybe you need to configure them properly.\n\n\nJava 11 installed in Jenkins as a global tool.\n\n\nSonarQube installed in Jenkins as a global tool.\n\n\nMaven3 installed in Jenkins as a global tool.\n\n\nA maven global settings properly configured in Jenkins.\n\n\nIf you will use docker to deploy:\n\n\n\nDocker installed in Jenkins as a global custom tool.\n\n\nThe Nexus3 with a docker repository.\n\n\nA machine with docker installed where the build and deploy will happen.\n\n\nA docker network called application.\n\n\n\n\n\nIf you will use OpenShift to deploy:\n\n\n\nAn OpenShift instance\n\n\nThe OpenShift projects created\n\n\n\n\n\n\n\n\nThe Jenkins syntax\n\nIn this section we will  explain a little bit the syntax of the Jenkins, so if you need to change something you will be able to do it properly.\n\n\n\n\nagent: Here you can specify the Jenkins agent where the pipeline will be executed. The default value is any.\n\n\noptions: Here you can set global options to the pipeline. By default, we add a build discarded to delete old artifacts/build of the pipeline and also we disable the concurrent builds.\n\nIf the teams option is passed to cicdgen, we add a new option in order to send notifications to Microsoft Teams with the status of the pipeline executions.\n\n\n\nenvironment: Here all environment variables are defined. All values defined here matches with the Production Line defaults. If you Jenkins has other values, you need to update it manually.\n\n\nstages: Here are defined all stages that our pipeline will execute. Those stages are:\n\n\n\nLoading Custom Tools: Load some custom tools that can not be loaded in the tools section. Also set some variables depending on the git branch which you are executing. Also, we set properly the version number in all pom files. It means that if your branch is develop, your version should end with the word -SNAPSHOT, in order case, if -SNAPSHOT is present it will be removed.\n\n\nFresh Dependency Installation: install all packages need to build/run your java project.\n\n\nUnit Tests: execute the mvn test command.\n\n\nSonarQube code analysis: send the project to SonarQube in order to get the static code analysis of your project.\n\n\nDeliver application into Nexus: build the project and send all bundle files to Nexsus3.\n\n\nIf --docker is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project.\n\n\nDeploy the new image: deploy a new version of the application using the image created in the previous stage. The previous version is removed.\n\n\n\n\n\n\n\n\nIf --openshift is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project using a OpenShift build config.\n\n\nDeploy the new image: deploy a new version of the application in OpenShift.\n\n\nCheck pod status: checks that the application deployed in the previous stage is running properly. If the application does not run the pipeline will fail.\n\n\n\n\n\n\n\n\npost: actions that will be executed after the stages. We use it to clean up all files.\n\n\n\n\n\n\n\n\n\n\n\n\ndevon4j Docker generated files\n\nWhen you generate the files for a devon4ng you can also pass the option --docker. It will generate also some extra files related to docker.\n\n\n\n\n\n\n\n\nIf you pass the --docker option the option --registryurl is also required. It will be used to upload the images to a docker registry. Example: if your registry url is docker-registry-test.s2-eu.capgemini.com you should execute the command in this way: cicdgen generate devon4node --groupid com.devonfw --docker --registryurl docker-registry-test.s2-eu.capgemini.com.\n\n\n\n\n\nFiles\n\n\n\nDockerfile\n\nThis file contains the instructions to build a docker image for you project. This Dockerfile is for local development purposes, you can use it in your machine executing:\n\n\n\n\n\n\n\nThis build is using a multi-stage build. First, it use a maven image in order to compile the source code, then it will use a java image to run the application. With the multi-stage build we keep the final image as clean as possible.\n\n\n\nDockerfile.ci\n\nThis file contains the instructions to create a docker image for you project. The main difference with the Dockerfile is that this file will be only used in the Jenkins pipeline. Instead of compiling again the code, it takes the compiled war from Jenkins to the image.\n\n\n\n\n\n\n\n\n\ndevon4ng schematic\n\nWith the cicdgen generate devon4ng command you can generate some files required for CICD. In this section we will explain the arguments of this command and also the files that will be generated.\n\n\ndevon4ng schematic arguments\n\nWhen you execute the cicdgen generate devon4ng command you can also add some arguments in order to modify the behaviour of the command. Those arguments are:\n\n\n\n\n--docker\n\nThe type of this parameter if boolean. If it is present, docker related files and pipeline stage will be also generated. For more details see docker section of Jenkinsfile and files generated for docker\n\n\n\n--dockerurl\n\nThe URL of your external docker daemon. Example: tcp://127.0.0.1:2376\n\n\n\n--dockercertid\n\nThe Jenkins credential id for your docker daemon certificate. It is only required when your docker daemon is secure.\n\n\n\n--registryurl\n\nYour docker registry URL. It is required when --docker is true, and it will be used to know where the docker image will be uploaded.\n\n\n\n--openshift\n\nThe type of this parameter if boolean. If it is present, OpenShift related files and pipeline stage will be also generated. For more details see OpenShift section of Jenkinsfile and files generated for OpenShift (same as --docker)\n\n\n\n--ocname\n\nThe name used for register your OpenShift cluster in Jenkins.\n\n\n\n--ocn\n\nOpenShift cluster namespace\n\n\n\n--groupid\n\nThe project groupId. This argument is required. It will be used for store the project in a maven repository at Nexus 3. Why maven? Because is the kind of repository where we can upload/download a zip file easily. Npm repository needs a package.json file but, as we compile the angular application to static javascript and html files, the package.json is no needed anymore.\n\n\n\n--teams\n\nWith this argument we can add the teams notification option in the \">Jenkinsfile.\n\n\n\n--teamsname\n\nThe name of the Microsoft Teams webhook. It is defined at Microsoft Teams connectors.\n\n\n\n--teamsurl\n\nThe url of the Microsoft Teams webhook. It is returned by Microsoft Teams when you create a connector.\n\n\n\n--merge\n\nIf you have used cicdgen previously, you can choose what you want to do in case of file conflict. The default behavior is to throw an error and not modify any file. You can see the other strategies on their specific page.\n\n\n\n--commit\n\nIf true, all changes will be committed at the end of the process (if possible). In order to send a false value, you need to write --commit=false\n\n\n\n\n\n\ndevon4ng generated files\n\nWhen you execute the generate devon4ng command, some files will be added/updated in your project.\n\n\nFiles\n\n\n\nangular.json\n\nThe angular.json is modified in order to change the compiled files destination folder. Now, when you make a build of your project, the compiled files will be generated into dist folder instead of dist/&lt;project-name&gt; folder.\n\n\n\npackage.json\n\nThe package.json is modified in order to add a script for test the application using Chrome Headless instead of a regular chrome. This script is called test:ci.\n\n\n\nkarma.conf.js\n\nThe karma.conf.js is also modified in order to add the Chrome Headless as a browser to execute test. The coverage output folder is change to ./coverage instead of ./coverage/&lt;project-name&gt;\n\n\n\nJenkinsfile\n\nThe Jenkinsfile is the file which define the Jenkins pipeline of our project. With this we can execute the test, build the application and deploy it automatically following a CICD methodology. This file is prepared to work with the Production Line default values, but it is also fully configurable to your needs.\n\n\n\n\nPrerequisites\n\n\n\nA Production Line instance. It can works also if you have a Jenkins, SonarQube and Nexus3, but in this case maybe you need to configure them properly.\n\n\nNodeJS installed in Jenkins as a global tool.\n\n\nGoogle Chrome installed in Jenkins as a global custom tool.\n\n\nSonarQube installed in Jenkins as a global tool.\n\n\nMaven3 installed in Jenkins as a global tool.\n\n\nA maven global settings properly configured in Jenkins.\n\n\nIf you will use docker :\n\n\n\nDocker installed in Jenkins as a global custom tool.\n\n\nThe Nexus3 with a docker repository.\n\n\nA machine with docker installed where the build and deploy will happen.\n\n\nA docker network called application.\n\n\n\n\n\nIf you will use OpenShift :\n\n\n\nAn OpenShift instance\n\n\nThe OpenShift projects created\n\n\n\n\n\n\n\n\nThe Jenkins syntax\n\nIn this section we will  explain a little bit the syntax of the Jenkins, so if you need to change something you will be able to do it properly.\n\n\n\n\nagent: Here you can specify the Jenkins agent where the pipeline will be executed. The default value is any.\n\n\noptions: Here you can set global options for the pipeline. By default, we add a build discarded to delete old artifacts/build of the pipeline and also we disable the concurrent builds.\n\nIf the teams option is passed to cicdgen, we add a new option in order to send notifications to Microsoft Teams with the status of the pipeline executions.\n\n\n\ntools: Here we define the global tools configurations. By default a version of nodejs is added here.\n\n\nenvironment: Here all environment variables are defined. All values defined here matches with the Production Line defaults. If you Jenkins has other values, you need to update it manually.\n\n\nstages: Here are defined all stages that our pipeline will execute. Those stages are:\n\n\n\nLoading Custom Tools: in this stage some custom tools are loaded. Also we set some variables depending on the git branch which you are executing.\n\n\nFresh Dependency Installation: install all packages need to build/run your angular project.\n\n\nCode Linting: execute the linter analysis.\n\n\nExecute Angular tests: execute the angular test in a Chrome Headless.\n\n\nSonarQube code analysis: send the project to SonarQube in order to get the static code analysis of your project.\n\n\nBuild Application: compile the application to be ready to deploy in a web server.\n\n\nDeliver application into Nexus: store all compiled files in Nexus3 as a zip file.\n\n\nIf --docker is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project.\n\n\nDeploy the new image: deploy a new version of the application using the image created in the previous stage. The previous version is removed.\n\n\n\n\n\nIf --openshift is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project using a OpenShift build config.\n\n\nDeploy the new image: deploy a new version of the application in OpenShift.\n\n\nCheck pod status: checks that the application deployed in the previous stage is running properly. If the application does not run the pipeline will fail.\n\n\n\n\n\n\n\n\npost: actions that will be executed after the stages. We use it to clean up all files.\n\n\n\n\n\n\n\n\n\n\n\n\ndevon4ng Docker generated files\n\nWhen you generate the files for a devon4ng you can also pass the option --docker. It will generate also some extra files related to docker.\n\n\n\n\n\n\n\n\nIf you pass the --docker option the option --registryurl is also required. It will be used to upload the images to a docker registry. Example: if your registry url is docker-registry-test.s2-eu.capgemini.com you should execute the command in this way: cicdgen generate devon4node --groupid com.devonfw --docker `--registryurl docker-registry-test.s2-eu.capgemini.com`.\n\n\n\n\n\nFiles\n\n\n\n.dockerignore\n\nIn this files are defined the folders that will not be copied to the docker image. Fore more information read the official documentation.\n\n\n\nDockerfile\n\nThis file contains the instructions to build a docker image for you project. This Dockerfile is for local development purposes, you can use it in your machine executing:\n\n\n\n\n\n\n\nThis build is using a multi-stage build. First, it use a node image in order to compile the source code, then it will use a nginx image as a web server for our devon4ng application. With the multi-stage build we avoid everything related to node.js in our final image, where we only have a nginx with our application compiled.\n\n\n\nDockerfile.ci\n\nThis file contains the instructions to create a docker image for you project. The main difference with the Dockerfile is that this file will be only used in the Jenkins pipeline. Instead of compiling again the code, it takes all compiled files and the nginx.conf from Jenkins to the image.\n\n\n\n\n\n\n\n\n\ndevon4net schematic\n\nWith the cicdgen generate devon4net command you can generate some files required for CICD. In this section we will explain the arguments of this command and also the files that will be generated.\n\n\ndevon4net schematic arguments\n\nWhen you execute the cicdgen generate devon4net command you can also add some arguments in order to modify the behaviour of the command. Those arguments are:\n\n\n\n\n--appname\n\nThe name of your devon4net application.\n\n\n\n--appversion\n\nThe initial version of your devon4net application\n\n\n\n--docker\n\nThe type of this parameter if boolean. If it is present, docker related files and pipeline stage will be also generated. For more details see docker section of Jenkinsfile and files generated for docker\n\n\n\n--dockerurl\n\nThe URL of your external docker daemon. Example: tcp://127.0.0.1:2376\n\n\n\n--dockercertid\n\nThe Jenkins credential id for your docker daemon certificate. It is only required when your docker daemon is secure.\n\n\n\n--registryurl\n\nYour docker registry URL. It is required when --docker is true, and it will be used to know where the docker image will be uploaded.\n\n\n\n--openshift\n\nThe type of this parameter if boolean. If it is present, OpenShift related files and pipeline stage will be also generated. For more details see OpenShift section of Jenkinsfile and files generated for OpenShift (same as --docker)\n\n\n\n--ocname\n\nThe name used for register your OpenShift cluster in Jenkins.\n\n\n\n--ocn\n\nOpenShift cluster namespace\n\n\n\n--groupid\n\nThe project groupId. This argument is required. It will be used for store the project in a maven repository at Nexus 3. Why maven? Because is the kind of repository where we can upload/download a zip file easily. Npm repository needs a package.json file but, as we compile the angular application to static javascript and html files, the package.json is no needed anymore.\n\n\n\n--teams\n\nWith this argument we can add the teams notification option in the Jenkinsfile.\n\n\n\n--teamsname\n\nThe name of the Microsoft Teams webhook. It is defined at Microsoft Teams connectors.\n\n\n\n--teamsurl\n\nThe url of the Microsoft Teams webhook. It is returned by Microsoft Teams when you create a connector.\n\n\n\n--merge\n\nIf you have used cicdgen previously, you can choose what you want to do in case of file conflict. The default behavior is to throw an error and not modify any file. You can see the other strategies on their specific page.\n\n\n\n--commit\n\nIf true, all changes will be committed at the end of the process (if possible). In order to send a false value, you need to write --commit=false\n\n\n\n\n\n\ndevon4net generated files\n\nWhen you execute the generate devon4net command, some files will be added/updated in your project.\n\n\nFiles\n\n\n\nJenkinsfile\n\nThe Jenkinsfile is the file which define the Jenkins pipeline of our project. With this we can execute the test, build the application and deploy it automatically following a CICD methodology. This file is prepared to work with the Production Line default values, but it is also fully configurable to your needs.\n\n\n\n\nPrerequisites\n\n\n\nA Production Line instance. It can works also if you have a Jenkins, SonarQube and Nexus3, but in this case maybe you need to configure them properly.\n\n\ndotnet core installed in Jenkins as a global tool.\n\n\nSonarQube installed in Jenkins as a global tool.\n\n\nMaven3 installed in Jenkins as a global tool.\n\n\nA maven global settings properly configured in Jenkins.\n\n\nIf you will use docker :\n\n\n\nDocker installed in Jenkins as a global custom tool.\n\n\nThe Nexus3 with a docker repository.\n\n\nA machine with docker installed where the build and deploy will happen.\n\n\n\n\n\nIf you will use OpenShift :\n\n\n\nAn OpenShift instance\n\n\nThe OpenShift projects created\n\n\n\n\n\n\n\n\nThe Jenkins syntax\n\nIn this section we will  explain a little bit the syntax of the Jenkins, so if you need to change something you will be able to do it properly.\n\n\n\n\nagent: Here you can specify the Jenkins agent where the pipeline will be executed. The default value is any.\n\n\noptions: Here you can set global options for the pipeline. By default, we add a build discarded to delete old artifacts/build of the pipeline and also we disable the concurrent builds.\n\nIf the teams option is passed to cicdgen, we add a new option in order to send notifications to Microsoft Teams with the status of the pipeline executions.\n\n\n\ntools: Here we define the global tools configurations. By default a version of nodejs is added here.\n\n\nenvironment: Here all environment variables are defined. All values defined here matches with the Production Line defaults. If you Jenkins has other values, you need to update it manually.\n\n\nstages: Here are defined all stages that our pipeline will execute. Those stages are:\n\n\n\nLoading Custom Tools: in this stage some custom tools are loaded. Also we set some variables depending on the git branch which you are executing.\n\n\nFresh Dependency Installation: install all dependencies need to build/run your dotnet project.\n\n\nExecute dotnet tests: execute the tests.\n\n\nSonarQube code analysis: send the project to SonarQube in order to get the static code analysis of your project.\n\n\nBuild Application: compile the application to be ready to deploy in a web server.\n\n\nDeliver application into Nexus: store all compiled files in Nexus3 as a zip file.\n\n\nIf --docker is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project.\n\n\nDeploy the new image: deploy a new version of the application using the image created in the previous stage. The previous version is removed.\n\n\n\n\n\nIf --openshift is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project using a OpenShift build config.\n\n\nDeploy the new image: deploy a new version of the application in OpenShift.\n\n\nCheck pod status: checks that the application deployed in the previous stage is running properly. If the application does not run the pipeline will fail.\n\n\n\n\n\n\n\n\npost: actions that will be executed after the stages. We use it to clean up all files.\n\n\n\n\n\n\n\n\n\n\n\n\ndevon4net Docker generated files\n\nWhen you generate the files for devon4net you can also pass the option --docker. It will generate also some extra files related to docker.\n\n\n\n\n\n\n\n\nIf you pass the --docker option the option --registryurl is also required. It will be used to upload the images to a docker registry. Example: if your registry url is docker-registry-test.s2-eu.capgemini.com you should execute the command in this way: cicdgen generate devon4net --groupid com.devonfw --docker `--registryurl docker-registry-test.s2-eu.capgemini.com`.\n\n\n\n\n\nFiles\n\n\n\n.dockerignore\n\nIn this files are defined the folders that will not be copied to the docker image. Fore more information read the official documentation.\n\n\n\nDockerfile\n\nThis file contains the instructions to build a docker image for your project. This Dockerfile is for local development purposes, you can use it in your machine executing:\n\n\n\n\n\n\n\n\nDockerfile.ci\n\nThis file contains the instructions to create a docker image for you project. The main difference with the Dockerfile is that this file will be only used in the Jenkins pipeline. Instead of compiling again the code, it takes all compiled files from Jenkins to the image.\n\n\n\n\n\n\n\n\n\ndevon4node schematic\n\nWith the cicdgen generate devon4node command you can generate some files required for CICD. In this section we will explain the arguments of this command and also the files that will be generated.\n\n\ndevon4node schematic arguments\n\nWhen you execute the cicdgen generate devon4node command you can also add some arguments in order to modify the behaviour of the command. Those arguments are:\n\n\n\n\n--docker\n\nThe type of this parameter if boolean. If it is present, docker related files and pipeline stage will be also generated. For more details see docker section of Jenkinsfile and files generated for docker\n\n\n\n--dockerurl\n\nThe URL of your external docker daemon. Example: tcp://127.0.0.1:2376\n\n\n\n--dockercertid\n\nThe Jenkins credential id for your docker daemon certificate. It is only required when your docker daemon is secure.\n\n\n\n--registryurl\n\nYour docker registry URL. It is required when --docker is true, and it will be used to know where the docker image will be uploaded.\n\n\n\n--openshift\n\nThe type of this parameter if boolean. If it is present, OpenShift related files and pipeline stage will be also generated. For more details see OpenShift section of Jenkinsfile and files generated for OpenShift (same as --docker)\n\n\n\n--ocname\n\nThe name used for register your OpenShift cluster in Jenkins.\n\n\n\n--ocn\n\nOpenShift cluster namespace\n\n\n\n--groupid\n\nThe project groupId. This argument is required. It will be used for store the project in a maven repository at Nexus 3. Why maven? Because is the kind of repository where we can upload/download a zip file easily. Npm repository needs a package.json file but, as we compile the angular application to static javascript and html files, the package.json is no needed anymore.\n\n\n\n--teams\n\nWith this argument we can add the teams notification option in the \">Jenkinsfile.\n\n\n\n--teamsname\n\nThe name of the Microsoft Teams webhook. It is defined at Microsoft Teams connectors.\n\n\n\n--teamsurl\n\nThe url of the Microsoft Teams webhook. It is returned by Microsoft Teams when you create a connector.\n\n\n\n--merge\n\nIf you have used cicdgen previously, you can choose what you want to do in case of file conflict. The default behavior is to throw an error and not modify any file. You can see the other strategies on their specific page.\n\n\n\n--commit\n\nIf true, all changes will be committed at the end of the process (if possible). In order to send a false value, you need to write --commit=false\n\n\n\n\n\n\ndevon4node generated files\n\nWhen you execute the generate devon4node command, some files will be added/updated in your project.\n\n\nFiles\n\n\n\npackage.json\n\nThe package.json is modified in order to add a script for run the linter and generate the json report. This script is called lint:ci.\n\n\n\nJenkinsfile\n\nThe Jenkinsfile is the file which define the Jenkins pipeline of our project. With this we can execute the test, build the application and deploy it automatically following a CICD methodology. This file is prepared to work with the Production Line default values, but it is also fully configurable to your needs.\n\n\n\n\nPrerequisites\n\n\n\nA Production Line instance. It can works also if you have a Jenkins, SonarQube and Nexus3, but in this case maybe you need to configure them properly.\n\n\nNodeJS installed in Jenkins as a global tool.\n\n\nSonarQube installed in Jenkins as a global tool.\n\n\nMaven3 installed in Jenkins as a global tool.\n\n\nA maven global settings properly configured in Jenkins.\n\n\nIf you will use docker :\n\n\n\nDocker installed in Jenkins as a global custom tool.\n\n\nThe Nexus3 with a docker repository.\n\n\nA machine with docker installed where the build and deploy will happen.\n\n\n\n\n\nIf you will use OpenShift :\n\n\n\nAn OpenShift instance\n\n\nThe OpenShift projects created\n\n\n\n\n\n\n\n\nThe Jenkins syntax\n\nIn this section we will  explain a little bit the syntax of the Jenkins, so if you need to change something you will be able to do it properly.\n\n\n\n\nagent: Here you can specify the Jenkins agent where the pipeline will be executed. The default value is any.\n\n\noptions: Here you can set global options for the pipeline. By default, we add a build discarded to delete old artifacts/build of the pipeline and also we disable the concurrent builds.\n\nIf the teams option is passed to cicdgen, we add a new option in order to send notifications to Microsoft Teams with the status of the pipeline executions.\n\n\n\ntools: Here we define the global tools configurations. By default a version of nodejs is added here.\n\n\nenvironment: Here all environment variables are defined. All values defined here matches with the Production Line defaults. If you Jenkins has other values, you need to update it manually.\n\n\nstages: Here are defined all stages that our pipeline will execute. Those stages are:\n\n\n\nLoading Custom Tools: in this stage some custom tools are loaded. Also we set some variables depending on the git branch which you are executing.\n\n\nFresh Dependency Installation: install all packages need to build/run your node project.\n\n\nCode Linting: execute the linter analysis.\n\n\nExecute tests: execute the tests.\n\n\nSonarQube code analysis: send the project to SonarQube in order to get the static code analysis of your project.\n\n\nBuild Application: compile the application to be ready to deploy in a web server.\n\n\nDeliver application into Nexus: store all compiled files in Nexus3 as a zip file.\n\n\nIf --docker is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project.\n\n\nDeploy the new image: deploy a new version of the application using the image created in the previous stage. The previous version is removed.\n\n\n\n\n\nIf --openshift is present:\n\n\n\nCreate the Docker image: build a new docker image that contains the new version of the project using a OpenShift build config.\n\n\nDeploy the new image: deploy a new version of the application in OpenShift.\n\n\nCheck pod status: checks that the application deployed in the previous stage is running properly. If the application does not run the pipeline will fail.\n\n\n\n\n\n\n\n\npost: actions that will be executed after the stages. We use it to clean up all files.\n\n\n\n\n\n\n\n\n\n\n\n\ndevon4node Docker generated files\n\nWhen you generate the files for a devon4node you can also pass the option --docker. It will generate also some extra files related to docker.\n\n\n\n\n\n\n\n\nIf you pass the --docker option the option --registryurl is also required. It will be used to upload the images to a docker registry. Example: if your registry url is docker-registry-test.s2-eu.capgemini.com you should execute the command in this way: cicdgen generate devon4node --groupid com.devonfw --docker `--registryurl docker-registry-test.s2-eu.capgemini.com`.\n\n\n\n\n\nFiles\n\n\n\n.dockerignore\n\nIn this files are defined the folders that will not be copied to the docker image. Fore more information read the official documentation.\n\n\n\nDockerfile\n\nThis file contains the instructions to build a docker image for you project. This Dockerfile is for local development purposes, you can use it in your machine executing:\n\n\n\n\n\n\n\nThis build is installs all dependencies in ordre to build the project and then remove all devDependencies in order to keep only the production dependencies.\n\n\n\n.dockerignore.ci\n\nAnother .dockerignore. The purpose of this one is to define de file exclusions in your CI pipeline.\n\n\n\nDockerfile.ci\n\nThis file contains the instructions to create a docker image for you project. The main difference with the Dockerfile is that this file will be only used in the Jenkins pipeline. Instead of compiling again the code, it takes all compiled files from Jenkins to the image.\n\n\n\n\n\n\n\n\n\n"}