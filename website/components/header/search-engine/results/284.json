{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-setup-security-and-roles-in-api-controllers","title":"How to: Setup security and roles in API controllers","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Setup security and roles in API controllers\n\nIn this part of the document, you will learn to use the different attributes over the controller methods that manage end-points. This attributes are provided by .Net core libraries and can be used to specify the behavior of Web API controllers and action methods.\n\n\nAttributtes\n\nYou can use a large number of attributes, some are optional, for example to define the route of end-points [Route(\"/GetSomething\")] and other are required, like [ApiController] to indicate that the class is an API controller.\n\n\n\n\n\nNote\n\n\nWe will be explaining the security related attributes. Those that are specific to the controllers will not be mentioned.\n\n\n\n\n\n]\n==== [HttpOptions]\n\n\nThis attribute identifies an API controller end-point that support the HTTP OPTIONS request. The HTTP OPTIONS method is used to get information about the communication options available for a specific URL or server.\n\n\n\n\n\nNote\n\n\nPlease do your research on this method if you are not familiar with it.\n\n\n\n\n\n]\n==== [AllowAnonymous]\n\n\nAllowAnonymous allows any type of user (authorized or unauthorized) to access the information provided by the end-point. This attribute can be specified for controller class or for individual end-points. Specifying it for individual end-points will override the controller attribute. An example could be:\n\n\n\n\n\n\n\n]\n==== [Authorize]\n\n\nAuthorize only enables you to restrict access to requests with an authorization specified in the header. This attribute can be specified for controller class or for individual end-points. Specifying it for individual end-points will override the controller attribute. You can specify different properties to the attribute:\n\n\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\nExample\n\n\nAuthenticationSchemes\nList of strings separated by comma\nList of schemes from which user info is constructed\n[Authorize(AuthenticationSchemes = \"Bearer\")]\n\n\nPolicy\nString\nPolicy name that determines access to the resource\n[Authorize(Policy = \"MyPolicy\")]\n\n\nRoles\nList of strings separated by comma\nList of roles allowed to access\n[Authorize(Roles = \"User\")]\n\n\n\n\nFor example, lets create a controller that is authorized only for users with role 'Admin' and 'Tester' provided in 'Bearer' type authentication:\n\n\n\n\n\n\n\n[[devonfw-guide_devon4net.wiki_howto.asciidoc_enablecors—​disablecors]]]\n==== [EnableCors] &amp; [DisableCors]\n\n\n\n\n\nNote\n\n\nPlease refer to the CORS component documentation to learn everything about CORS.\n\n\n\n\n\nYou can enable a Cors policy for controller or individual end-points. Specifying it for individual end-points will override the controller attribute. You will need to specify the policy you want to enable. This policy will need to be described in the appsettings.{environment}.json.\n\n\nFor example, lets create a CORS policy named 'CorsPolicy' and enable it for a controller, and disable it for a method:\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nHere are some interesting references to continue learning about this topic:\n\n\n\n\nIntroduction to authorization in ASP.NET Core - Microsoft Docs\n\n\nAuthorization Namespace - Microsoft Docs\n\n\nHTTP OPTIONS - MDN Web Docs\n\n\n\n\n\n\n"}