{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto_angular-client-generation.asciidoc","title":"Angular Client Generation","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","How to"],"text":"Angular Client Generation\n\nThe generation can create a full Angular client (Angular 13, as of March 2022) using the devon4ng-application-template package located at workspaces/examples folder of the distribution. For more details about this package, please refer here.\n\n\nTake into account that the TypeScript merging for CobiGen needs Node 6 or higher to be installed at your machine.\n\n\n\n\n\n\n\n\nThis is a short introduction to the Angular generation. For a deeper tutorial including the generation of the backend, we strongly recommend you to follow this document.\n\n\n\n\n\nRequisites\n\nInstall yarn globally:\n\n\n\n\n\n\n\n\nAngular workspace\n\nThe output location of the generation can be defined editing the cobigen.properties file located at crud_angular_client_app/templates folder of the CobiGen_Templates project.\n\n\n\n\n\n\n\nBy default, the output path would be the devon4ng-application-template folder at the root of the devon4j project parent folder:\n\n\n\n\n\n\n\nHowever, this path can be changed, for example to the src/main/client folder of the devon4j project:\n\n\nrelocate: ./src/main/client/${cwd}\n\n\n\n\n\n\n\nOnce the output path is chosen, copy the files of the devon4ng-application-template repository into this output path.\n\n\n\nInstall Node dependencies\n\nOpen a terminal in the just copied devon4ng-application-template folder and run the command:\n\n\n\n\n\n\n\nThis will start the installation of all node packages needed by the project into the node_modules folder.\n\n\n\nGenerating\n\nChoose an ETO object as an input file for CobiGen, right click on it and select CobiGen → Generate from the context menu.\nCobiGen will then display a wizard showing you the resources to be generated which are related to your input file:\n\n\n\n\n\n\n\nCheck all the increments relative to Angular:\n\n\n\n\n\n\n\n\n\nThe Angular devon4j URL increment is only needed for the first generations however, checking it again on next generation will not cause any problem.\n\n\n\n\n\n\nAs we have done on other generations, we click Next to choose which fields to include at the generation or simply clicking Finish will start the generation.\n\n\n\n\n\n\n\n\nRouting\n\nDue to the nature of the TypeScript merger, currently it is not possible to merge the array of path objects of the routings at app-routing.module.ts file properly, so the modification should be done by hand on this file. However, the import related to the new component generated is added.\n\n\nThis would be the generated app-routing.module.ts file:\n\n\n\n\n\n\n\nAdding the following to the children object of home will add a new side menu entry to the component generated:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJWT Authentication\n\nIf you are using a backend server with JWT authentication, you need to specify this type of authentication to be used by your Angular application (default when generating from the devon4ng template).\n\n\nListing 69. environment.ts\n\n\n\n\n\nAn alternative would be to set security: 'csrf'. For more details, see the devon4j CSRF guide.\n\n\n\nRunning\n\nFirst of all, run your devon4j java server by right clicking on the SpringBootApp.java file and choose Run As → Java Application from the context menu. This will start to run the SpringBoot server. Once you see the statement: Started SpringBoot in XX seconds, the backend is running.\n\n\n\n\n\n\n\nOnce the the server is running, open a devonfw console at the output directory defined previously and run:\n\n\n\n\n\n\n\nThis will run the Angular application at:\n\n\n\n\n\n\n\n\n\n\n\n\nOnce finished, the browser will open automatically at the previously stated localhost URL showing the Angular application. You can use the credentials set at the devon4j java server to login.\n\n\n\n\n\n"}