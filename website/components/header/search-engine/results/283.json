{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-setup-jwt","title":"How to: Setup JWT","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Setup JWT\n\nAs you may have learned at this point you can set up JWT component in a number of different ways according your needs. For that you’ll need to configure your appsettings.json.\n\n\n\n\n\nNote\n\n\nPlease read documentation about JWT component first to learn what you need to do to use it in your project.\n\n\n\n\n\nAssuming that you already have the JWT component correctly installed and available in our project let’s start thinking about how we can put it to good use.\n\n\nConfiguration\n\nWe can configure it to work either with a secret key or a certificate.\n\n\nIf you choose certificate, you will need to add a certificate to your project, and specify the password and the encryptionAlgorithm used. You can learn how to do it following the tutorial included in this document.\n\n\nIf you specify both, the secret key will take priority.\n\n\nFor example lets specify the next:\n\n\n\n\n\nFigure 24. JWT configuration example\n\n\n\n\n\nNote\n\n\nThe property SecretKey needs to be an encrypted key using the algorithm specified.\n\n\n\n\n\nThis would create the following configuration:\n\n\n\n\nA token with audience and issuer equal to devon4net.\n\n\nIt will expire in 60 minutes\n\n\nIt will validate the signature and if the token is valid in time\n\n\nIt will require tokens that are signed, and have both expiration time and audience specified.\n\n\nIt will use the secret key encrypted with SHA 512\n\n\n\n\n\nClaims\n\nJson Web Tokens work with claims. A Claim is a piece of information about a subject. It is similar to a key-value pair, where the value will be the claim type, such as the name or the role of an authenticated user. This claims are stored inside a JSON and then encrypted forming the JWT.\n\n\nIn .Net we can create Claims using the Claim class avaiable in System.Security.Claims. It has many constructors but the most important is the following one, where you can create a Claim based on two strings.\n\n\n\n\n\n\n\nYou can choose between a variety of claim types thanks to the ClaimType class. As you can see in the previous piece of code, in this case we have asserted a name and a role in two claims. This could be for a user, for example.\n\n\n\nJwtHandler\n\nIn JWT component we have a handler that is cofigured on the installation of the package and can be injected for use in any wanted service. This is the JwtHandler. This handler will allow us to manipulate, encrypt and extract information from Json Web Tokens.\n\n\n\n\n\n\n\n\n\n\nReturn Type\nMethod Name\nParameters\nDescription\n\n\nstring\nCreateJwtToken\nList&lt;Claim&gt; clientClaims\nReturns the encrypted jwt given a list of claims.\n\n\nList&lt;Claim&gt;\nGetUserClaims\nstring jwtToken\nReturns a list of claims given an encrypted token.\n\n\nstring\nGetClaimValue\nList&lt;Claim&gt; claimList, string claim\nReturns the value of a claim given a list of claims and the type of the claim to recover formatted as a string.\n\n\nstring\nGetClaimValue\nstring token, string claim\nReturns the value of a claim given an encrypted token and the type of the claim to recover formatted as a string.\n\n\nSecurityKey\nGetIssuerSigningKey\n-\nReturns the issuer’s signing key.\n\n\nbool\nValidateToken\nstring jwtToken, out ClaimsPrincipal claimsPrincipal, out SecurityToken securityToken\nReturns true if the token is valid.\n\n\nstring\nCreateRefreshToken\n-\nCreates a refresh token for the JWT token.\n\n\n\n\n\nVideo\n\n\n\nReferences\n\nHere are some interesting references to continue learning about this topic:\n\n\n\n\nJSON Web Token Claims - auth0\n\n\nClaim Class - Microsoft Docs\n\n\nClaimTypes Class - Microsoft Docs\n\n\n\n\n\n\n"}