{"type":"doc","filename":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_architecture.html","anchor":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_data-model","title":"Data Model","breadcrumbs":["Tools","Solicitor User Guide","Architecture"],"text":"Data Model\n\n\n\n\nThe internal business data model consists of 6 entities:\n\n\n\n\nModelRoot: root object of the business data model which holds metadata about the data processing\n\n\nEngagement: the masterdata of the overall project\n\n\nApplication: a deliverable within the Engagement\n\n\nApplicationComponent: component within an Application\n\n\nRawLicense: License info attached to an ApplicationComponent as it is read from the input data\n\n\nNormalizedLicense: License info attached to an ApplicationComponent processed by the business rules\n\n\n\n\nModelRoot\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nmodelVersion\nint\nversion number of the data model\n\n\nexecutionTime\nString\ntimestamp when the data was processed\n\n\nsolicitorVersion\nString\nSolicitor version which processed the model\n\n\nsolicitorGitHash\nString\nbuildnumber / GitHash of the Solicitor build\n\n\nsolicitorBuilddate\nString\nbuild date of the Solicitor build\n\n\nextensionArtifactId\nString\nartifactId of the active Solicitor Extension (\"NONE\" if no extension)\n\n\nextensionVersion\nString\nVersion of the active Extension (or \"NONE\")\n\n\nextensionGitHash\nString\nBuildnumber / GitHash of the Extension (or \"NONE\")\n\n\n\n\n\nEngagement\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nengagementName\nString\nthe engagement name\n\n\nengagementType\nEngagementType\nthe engagement type; possible values: INTERN, EXTERN\n\n\nclientName\nString\nname of the client\n\n\ngoToMarketModel\nGoToMarketModel\nthe go-to-market-model; possible values: LICENSE\n\n\ncontractAllowsOss\nboolean\ndoes the contract explicitely allow OSS?\n\n\nossPolicyFollowed\nboolean\nis the companies OSS policy followed?\n\n\ncustomerProvidesOss\nboolean\ndoes the customer provide the OSS?\n\n\n\n\n\nApplication\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\napplicationName\nString\nthe name of the application / deliverable\n\n\nreleaseId\nString\nversion identifier of the application\n\n\nreleaseDate\nSting\nrelease data of the application\n\n\nsourceRepo\nString\nURL of the source repo of the application (should be an URL)\n\n\nprogrammingEcosystem\nString\nprogramming ecosystem (e.g. Java8; Android/Java, iOS / Objective C)\n\n\n\n\n\nApplicationComponent\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nusagePattern\nUsagePattern\npossible values: DYNAMIC_LINKING, STATIC_LINKING, STANDALONE_PRODUCT\n\n\nossModified\nboolean\nis the OSS modified?\n\n\nossHomepage\nString\nURL of the OSS homepage\n\n\ngroupId\nString\ncomponent identifier: maven group\n\n\nartifactId\nString\ncomponent identifier: maven artifactId\n\n\nversion\nString\ncomponent identifier: Version\n\n\nrepoType\nString\ncomponent identifier: RepoType\n\n\npackageUrl\nString\nthe Package URL as an technology neutral component identifier\n\n\nnoticeFileUrl\nString\nURL referencing a NOTICE file to be included in the attributions (optional, see Experimental Scancode Integration)\n\n\nnoticeFileContent\nString\nresolved content of noticeFileUrl (optional, see Experimental Scancode Integration)\n\n\ncopyrights\nString\nCopyright statements found in the components metadata / code (optional, see Experimental Scancode Integration)\n\n\n\n\n\nRawLicense\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndeclaredLicense\nString\nname of the declared license\n\n\nlicenseUrl\nString\nURL of the declared license\n\n\ntrace\nString\ndetail info of history of this data record\n\n\norigin\nString\norigin of the raw license data; either the lowercase classname of the Reader or \"scancode\" if licensedata was taken from scancode results\n\n\nspecialHandling\nboolean\n(for controlling rule processing)\n\n\n\n\n\nNormalizedLicense\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndeclaredLicense\nString\nname of the declared license (copied from RawLicense)\n\n\nlicenseUrl\nString\nURL of the declared license (copied from RawLicense\n\n\ndeclaredLicenseContent\nString\nresolved content of licenseUrl\n\n\nnormalizedLicenseType\nString\ntype of the license, see License types\n\n\nnormalizedLicense\nString\nname of the license in normalized form (SPDX-Id) or special \"pseudo license id\", see Pseudo License Ids\n\n\nnormalizedLicenseUrl\nString\nURL pointing to a normalized form of the license\n\n\nnormalizedLicenseContent\nString\nresolved content of normalizedLicenseUrl\n\n\nnormalizedLicenseType\nString\ntype of the license, see License types\n\n\neffectiveNormalizedLicenseType\nString\ntype of the effective license, see License types\n\n\neffectiveNormalizedLicense\nString\neffective normalized license (SPDX-Id) or \"pseudo license id\"; this is the information after selecting the right license in case of multi licensing or any license override due to a component being redistributed under a different license\n\n\neffectiveNormalizedLicenseUrl\nString\nURL pointing to the effective normalized license\n\n\neffectiveNormalizedLicenseContent\nString\nresolved content of effectiveNormalizedLicenseUrl\n\n\nlegalPreApproved\nString\nindicates whether the license is pre approved based on company standard policy\n\n\ncopyLeft\nString\nindicates the type of copyleft of the license\n\n\nlicenseCompliance\nString\nindicates if the license is compliant according to the default company policy\n\n\nlicenseRefUrl\nString\nURL to the reference license information (TBD)\n\n\nlicenseRefContent\nString\nresolved content of licenseRefUrl\n\n\nincludeLicense\nString\ndoes the license require to include the license text ?\n\n\nincludeSource\nString\ndoes the license require to deliver source code of OSS component ?\n\n\nreviewedForRelease\nString\nfor which release was the legal evaluation done?\n\n\ncomments\nString\ncomments on the component/license (mainly as input to legal)\n\n\nlegalApproved\nString\nindicates whether this usage is legally approved\n\n\nlegalComments\nString\ncomments from legal, possibly indicating additional conditions to be fulfilled\n\n\ntrace\nString\ndetail info of history of this data record (rule executions)\n\n\nguessedLicenseUrl\nString\nguessed (possibly improved) URL of the effective normalized license\n\n\nguessedLicenseUrlAuditInfo\nString\naudit info which documents how the guessedLicenseUrl was guessed\n\n\nguessedLicenseContent\nString\nresolved content of guessedLicenseUrl\n\n\n\n\nFor the mechanism how Solicitor resolves the content of URLs and how the result\nmight be influenced see Resolving of License URLs.\n\n\nFor a description of the URL guessing mechanism see Guessing of license URLs.\n\n\nLicense types\n\nDefines the type of license\n\n\n\n\nOSS-SPDX - An OSS license which has a corresponding SPDX-Id\n\n\nOSS-OTHER - An OSS license which has no SPDX-Id\n\n\nCOMMERCIAL - Commercial (non OSS) license; this might also include code which is owned by the project\n\n\nUNKNOWN- License is unknown\n\n\nIGNORED- license will be ignored (non selected license in multi licensing case; only to be used as \"Effective Normalized License Type\")\n\n\n\n\n\nPseudo License Ids\n\nA \"normalized\" license id might be either a SPDX-Id or a \"pseudo license id\" which is used to indicate a specific situation. The following pseudo license ids are used:\n\n\n\n\nOSS specific - a nonstandard OSS license which could not be mapped to a SPDX-Id\n\n\nPublicDomain - any form of public domain which is not represented by an explicit SPDX-Id\n\n\nIgnored - license will be ignored (non selected license in multi licensing case; only to be used as \"Effective Normalized License\")\n\n\nNonOSS - commercial license, not OSS\n\n\n\n\n\n\n\n\n"}