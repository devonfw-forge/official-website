{"type":"doc","filename":"devonfw-guide_ide.wiki_cli.asciidoc.html","anchor":"devonfw-guide_ide.wiki_vscode.asciidoc","title":"vscode","breadcrumbs":["devonfw-ide","Usage","Devon CLI"],"text":"vscode\n\nThe vscode commandlet allows to install, configure, and launch Visual Studio Code.\nTo launch VSCode for your current workspace and devonfw-ide installation, simply run:\ndevon vscode\n\n\nYou may also supply additional arguments as devon vscode «args». These are explained by the following table:\n\n\nTable 27. Usage of devon vscode\n\n\n\n\n\n\nArgument(s)\nMeaning\n\n\n\n\n--all\nif provided as first arg then to command will be invoked for each workspace\n\n\nsetup\nsetup VSCode (install or update)\n\n\nadd-plugin «id»\ninstall an additional plugin (extension)\n\n\nrun\nlaunch VSCode (default if no argument is given)\n\n\nstart\nsame as run\n\n\nws-up[date]\nupdate workspace\n\n\nws-re[verse]\nreverse merge changes from workspace into settings\n\n\nws-reverse-add\nreverse merge adding new properties\n\n\ncreate-script\ncreate launch script for this IDE, your current workspace and your OS\n\n\n\n\nplugins\n\nTo be productive with VS Code you need plugins (called extensions in VS Code). Of course devonfw-ide can automate this for your:\nIn your settings git repository create a folder vscode/plugins (click this link to see more examples and see which plugins come by default).\nHere you can create a properties file for each plugin. This is an example devonfw-extension-pack.properties:\n\n\n\n\n\n\n\nThe variables are defined as following:\n\n\n\n\nplugin_id defines the unique ID of the plugin to install. If you want to customize devonfw-ide with new plugins click on Extensions at the bottom of the left navigation icon bar in VS code. Then use the search to find the plugin of your choice. If you click on it the plugin ID is displayed in grey beside the official title at the top of the plugin details page. Copy &amp; paste the ID from here to make up your own custom config.\n\n\nplugin_active is an optional parameter. If it is true (default) the plugin will be installed automatically during the project setup for all developers in your team. Otherwise developers can still install the plugin manually via devon vscode add-plugin «plugin-name» from the config file settings/vscode/plugins/«plugin-name».properties. See the settings/vscode/plugins folder for possible values of «plugin-name».\n\n\n\n\nIn general you should try to stick with the configuration pre-defined by your project. But some plugins may be considered as personal flavor and are typically not predefined by the project config. Such plugins should be shipped with your settings as described above with plugin_active=false allowing you to easily install it manually. Surely, you can easily add plugins via the UI of VS code. However, be aware that some plugins may collect sensitive data or could introduce other vulnerabilities. So consider the governance of your project and talk to your technical lead before installing additional plugins that are not pre-defined in your settings.\n\n\nAs maintainer of the settings for your project you should avoid to ship too many plugins that may waste resources but are not used by every developer. By configuring additional plugins with plugin_active=false you can give your developers the freedom to install some additional plugins easily.\n\n\ncleaning plugins on update\n\nIf you want to strictly manage the plugins for VS code in your project, you can create or edit the file settings/vscode/plugins in your settings and add this variable:\n\n\n\n\n\n\n\nThis will wipe all plugins when an update of VS code is performed (e.g. via devon ide update) and reinstall all configured plugins. While this gives you more control over the governance of the plugins and allows to remove a plugin later during project lifecycle. However, this will delete all manually installed plugins automatically without asking.\n\n\n\n\n\n\n"}