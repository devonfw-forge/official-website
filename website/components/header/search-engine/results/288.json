{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-specflow","title":"How to: Specflow","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Specflow\n\nIn this part of the document you will learn to use Specflow in your projects for defining, managing and automatically execute readable acceptance tests in .NET.\n\n\nSpecFlow is a.NET test automation tool based on the BDD (Behavior-driven development) paradigm. Specflow tests use the Gherking language to write test cases that are then bound to your application code through bindings, allowing you to run the tests using your preferred testing framework.\n\n\nBefore going into detail on how to use Specflow and how you can use it to implement your tests, you will need know Gherking syntax. It is used to write tests in a form that can be readed perfectly as a sentence. For example:\n\n\n\n\n\n\n\nAs you can see, thanks to Gherkin we have written a test for a calculator, which makes sure that when the values ​​10 and 5 are added, the result is 15. Because is a natural-language friendly language you can read the test, and understand the statement.\n\n\nThe following table shows the keywords used in Gherkin syntax:\n\n\n\n\n\n\n\n\nKeyword\nDescription\n\n\nFeature\nProvides high level description of a software feature that wants to be tested and group related scenarios.\n\n\nRule\nRepresents one business rule that should be implemented.\n\n\nScenario or Example\nList of steps that ilustrates a business rule.\n\n\nSteps\nEach step starts with Given, When, Then, And or But.\n\n\nBackground\nScenario context run before the Scenario tests but after Before Hooks.\n\n\nScenario Outline or Scenario Template\nIt is used to run the same Scenario multiple times, with different combinations of values.\n\n\nScenarios or Examples\nKeyword used to define the variables of Scenario Outline in a table.\n\n\n\"\"\nStrings\n\n\n@\nTags\n\n\n#\nComments\n\n\n|\nTables\n\n\n\n\nFor example:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nPlease refer to the Cucumber Documentation or Specflow Documentation to learn more about the keywords used in Gherkin.\n\n\n\n\n\nSpecflow Installation\n\nTo use specflow you will need to add the Specflow extension to your Visual Studio 2022. This way you can use it in any of your projects. For that open visual studio and navigate to Extensions &gt; Manage Extensions.\n\n\nThis will open the extension manager, where you will have to search for the 'SpecFlow' extension and hit download:\n\n\n\n\n\nFigure 29. SpecFlow for VS 2022 in Extension Manager\n\n\nHitting download will schedule the extension installation. At the time when you close VS2022, you will be able to install the extension by clicking Modify in the pop-up window shown below:\n\n\n\n\n\nFigure 30. SpecFlow installation\n\n\n\nCreate specflow project\n\nTo create a specflow project for testing, first we will need to have something to test. In this example we will test a Calculator class that we created inside a class library project in an empty solution like shown in the following image:\n\n\n\n\n\nFigure 31. SpecFlowTest solution directory tree\n\n\nWhere, the Calculator class implementation is:\n\n\n\n\n\n\n\nOnce we have the Calculator ready, we need to create a Specflow project. For that you can Right click on the solution &gt; Add &gt; New Project…​. This will open a window where you can search the specflow project as shown in the next image:\n\n\n\n\n\nFigure 32. Add new SpecFlow project\n\n\nWhen creating the project you will be able to choose the .Net version that you are using, the library for the tests and if you want to use FluentAssertions library. For this example we will use the configuration shown below:\n\n\n\n\n\nFigure 33. Choose the project options\n\n\nThe specflow template comes with a calculator test implemented, this is their example. But we will create the files from scratch so you know how to complete your testing project.\n\n\n\n\n\nFigure 34. Initial project structure\n\n\nAs you can see also the template comes with a folder structure defined, you can redifine it as you want but this is the recommended one.\n\n\n\nCreate specflow tests\n\nTo create a new test using specflow, you can add a new item to your project by Right click in any directory on the project &gt; Add &gt; New item…​:\n\n\n\n\n\nFigure 35. Initial project structure\n\n\nYou can type specflow in the search bar to look for the items available thanks to the library and select Feature File for Specflow. You can create a test there in Gherkin syntax:\n\n\n\n\n\n\n\nOnce you have your test created you can build the project by navigating to Build &gt; Build Solution. You will see that the test appears in a purple color, this is because it is not mapped to a definition yet. You can automatically create the definition by Right clicking inside the feature file &gt; Define Steps.\n\n\nThis will open the following window:\n\n\n\n\n\nFigure 36. Define SpecFlow Steps\n\n\nOnce you press Create the test will no longer appear in purple and will be shown in a white color. This is because now they have a definition. You can also do this manually creating a class and marking it with the [Binding] attribute.\n\n\nThis class will need to define the test steps such as Gherkin syntax can be transformed into C# code. You can implement this class as follows to test the Calculator:\n\n\n\n\n\n\n\nNow build the solution again to be able to run the tests.\n\n\n\n\n\nNote\n\n\nPlease revise the Specflow Documentation to learn more about feature bindings.\n\n\n\n\n\n\nRun the tests\n\nTo run the tests you can navigate to Test &gt; Test Explorer:\n\n\n\n\n\nFigure 37. VS2022 Test Explorer\n\n\nBy clicking the green play button you can run the tests and see the results as shown in the image above.\n\n\n\nLiving documentation\n\nSpecFlow Living Documentation is a set of tools that allows you to share and collaborate on Gherkin Feature Files. It gives you the option to generate and share an html interactive file. You can do this directly for Azure DevOps or using a CLI (Command Line Interface). In this guide you will learn how to do this with the CLI continuing with the Calculator example.\n\n\n\n\n\nNote\n\n\nPlease refer to the Specflow+LivingDoc documentation to learn more.\n\n\n\n\n\nStep 1 - Install CLI\n\nInstall the tool by running the following command in your preferred terminal:\n\n\n\n\n\n\n\n\nStep 2 - Navigate to the build output directory\n\nNow we need to navigate to the build directory of the Specflow Project taht contains the tests. In our case we can navigate to this path by running the following command:\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nYour path may be different depending on the root directory, the file structure of the solution and the .Net version you are using.\n\n\n\n\n\n\nStep 3 - Run command to generate results\n\nTo generate the file run the following command:\n\n\n\n\n\n\n\n\nStep 4 - See html results\n\nThe file generated can be seen with your favorite browser and will look like this:\n\n\n\n\n\nFigure 38. Specflow LivingDoc results\n\n\n\n\nReferences\n\n\n\nGherkin Syntax - Cucumber Docs\n\n\nLearn Gherkin - Specflow Docs\n\n\n\n\n\n\n"}