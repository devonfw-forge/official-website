{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-csrf.asciidoc","title":"Cross-site request forgery (CSRF)","breadcrumbs":["Java","Spring","Guides"],"text":"Cross-site request forgery (CSRF)\n\nCSRF is a type of malicious exploit of a web application that allows an attacker to induce users to perform actions that they do not intend to perform.\n\n\n\n\n\n\n\nMore details about csrf can be found at https://owasp.org/www-community/attacks/csrf.\n\n\nSecure devon4j server against CSRF\n\nIn case your devon4j server application is not accessed by browsers or the web-client is using JWT based authentication, you are already safe according to CSRF.\nHowever, if your application is accessed from a browser and you are using form based authentication (with session coockie) or basic authentication, you need to enable CSRF protection.\nThis guide will tell you how to do this.\n\n\nDependency\n\nTo secure your devon4j application against CSRF attacks, you only need to add the following dependency:\n\n\n\n\n\n\n\nStarting with devon4j version 2020.12.001 application template, this is all you need to do.\nHowever, if you have started from an older version or you want to understand more, please read on.\n\n\n\nPluggable web-security\n\nTo enable pluggable security via devon4j security starters you need to apply WebSecurityConfigurer to your BaseWebSecurityConfig (your class extending spring-bootâ€™s WebSecurityConfigurerAdapter) as following:\n\n\n\n\n\n\n\n\nCustom CsrfRequestMatcher\n\nIf you want to customize which HTTP requests will require a CSRF token, you can implement your own CsrfRequestMatcher and provide it to the devon4j CSRF protection via qualified injection as following:\n\n\n\n\n\n\n\nPlease note that the exact name (@Named(\"CsrfRequestMatcher\")) is required here to ensure your custom implementation will be injected properly.\n\n\n\nCsrfRestService\n\nWith the devon4j-starter-security-csrf the CsrfRestService gets integrated into your app.\nIt provides an operation to get the CSRF token via an HTTP GET request.\nThe URL path to retrieve this CSRF token is services/rest/csrf/v1/token.\nAs a result you will get a JSON like the following:\n\n\n\n\n\n\n\nThe token value is a strong random value that will differ for each user session.\nIt has to be send with subsequent HTTP requests (when method is other than GET) in the specified header (X-CSRF-TOKEN).\n\n\n\nHow it works\n\nPutting it all together, a browser client should call the CsrfRestService after successfull login to receive the current CSRF token.\nWith every subsequent HTTP request (other than GET) the client has to send this token in the according HTTP header.\nOtherwise the server will reject the request to prevent CSRF attacks.\nTherefore, an attacker might make your browser perform HTTP requests towards your devon4j application backend via &lt;image&gt; elements, &lt;iframes&gt;, etc.\nYour browser will then still include your session coockie if you are already logged in (e.g. from another tab).\nHowever, in case he wants to trigger DELETE or POST requests trying your browser to make changes in the application (delete or update data, etc.) this will fail without CSRF token.\nThe attacker may make your browser retrieve the CSRF token but he will not be able to retrieve the result and put it into the header of other requests due to the same-origin-policy.\nThis way your application will be secured against CSRF attacks.\n\n\n\n\nConfigure devon4ng client for CSRF\n\nDevon4ng client configuration for CSRF is described here\n\n\n\n\n\n\n"}