{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-configuration.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-configuration.asciidoc_security","title":"Security","breadcrumbs":["Java","General","Configuration"],"text":"Security\n\nOften you need to have passwords (for databases, third-party services, etc.) as part of your configuration. These are typically environment specific (see above). However, with DevOps and continuous-deployment you might be tempted to commit such configurations into your version-control (e.g. git). Doing that with plain text passwords is a severe problem especially for production systems. Never do that! Instead we offer some suggestions how to deal with sensible configurations:\n\n\nPassword Encryption\n\nA simple but reasonable approach is to configure the passwords encrypted with a master-password. The master-password should be a strong secret that is specific for each environment. It must never be committed to version-control.\n\n\nFor Spring, we use jasypt-spring-boot. For more details, see here\n\n\nFor Quarkus, see here\n\n\nIs this Security by Obscurity?\n\n\n\nYes, from the point of view to protect the passwords on the target environment this is nothing but security by obscurity. If an attacker somehow got full access to the machine this will only cause him to spend some more time.\n\n\nNo, if someone only gets the configuration file. So all your developers might have access to the version-control where the config is stored. Others might have access to the software releases that include this configs. But without the master-password that should only be known to specific operators none else can decrypt the password (except with brute-force what will take a very long time, see jasypt for details).\n\n\n\n\n\n\n\n\n\n\n"}