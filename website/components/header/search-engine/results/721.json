{"type":"doc","filename":"devonfw-guide_ide.wiki_cli.asciidoc.html","anchor":"devonfw-guide_ide.wiki_eclipse.asciidoc","title":"eclipse","breadcrumbs":["devonfw-ide","Usage","Devon CLI"],"text":"eclipse\n\nThe eclipse commandlet allows to install, configure, and launch the Eclipse IDE.\nTo launch eclipse for your current workspace and devonfw-ide installation simply run:\ndevon eclipse\n\n\nYou may also supply additional arguments as devon eclipse «args». These are explained by the following table:\n\n\nTable 7. Usage of devon eclipse\n\n\n\n\n\n\nArgument(s)\nMeaning\n\n\n\n\n--all\nif provided as first arg then to command will be invoked for each workspace\n\n\nsetup\nsetup Eclipse (install or update)\n\n\nadd-plugin «id» [«url»]\ninstall an additional plugin\n\n\nrun\nlaunch Eclipse (default if no argument is given)\n\n\nstart\nsame as run\n\n\nws-up[date]\nupdate workspace\n\n\nws-re[verse]\nreverse merge changes from workspace into settings\n\n\nws-reverse-add\nreverse merge adding new properties\n\n\ncreate-script\ncreate launch script for this IDE, your current workspace and your OS\n\n\n\n\nThere are variables that can be used for Eclipse. These are explained by the following table:\n\n\nTable 8. Variables of devonfw-ide for Eclipse\n\n\n\n\n\n\nVariable\nMeaning\n\n\n\n\nECLIPSE_VERSION\nThe version of the tool Eclipse to install and use.\n\n\nECLIPSE_EDITION_TYPE\nThe edition of the tool Eclipse to install and use. You can choose between Java for standard edition or JEE for enterprise edition.\n\n\n*EXTRA_JAVA_VERSION\nYou can set this to a different (newer) version of Java used to launch your IDE (other than JAVA_VERSION that is used to build your project)\n\n\n\n\nplugins\n\nTo be productive with Eclipse you need plugins. Of course devonfw-ide can automate this for your:\nIn your settings git repository create a folder eclipse/plugins (click on this link to see more examples and see which plugins come by default).\nHere you can create a properties file for each plugin. This is an example tmterminal.properties:\n\n\n\n\n\n\n\nThe variables are defined as follows:\n\n\n\n\nplugin_url defines the URL of the Eclipse update site of the plugin\n\n\nplugin_id defines the feature group ID(s) to install. To install multiple features/plugins provide a coma-separated list of IDs. If you want to customize devonfw-ide with new plugins you can first install them manually and then go to About Eclipse &gt; Installation Details then you can filter for your newly installed plugin and find the values in the Id column. Copy &amp; paste them from here to make up your own custom config.\n\n\nplugin_active is an optional parameter. If it is true (default) the plugin will be installed automatically during the project setup for all developers in your team. Otherwise, developers can still install the plugin manually via devon eclipse add-plugin «plugin-name» from the config file settings/eclipse/plugins/«plugin-name».properties. See the settings/eclipse/plugins folder for possible values of «plugin-name».\n\n\n\n\nIn general you should try to stick with the configuration pre-defined by your project. But some plugins may be considered as personal flavor and are typically not predefined by the project config. This e.g. applies for devstyle that allows a real dark mode for eclipse and tunes the theming and layout of Eclipse in general. Such plugins should be shipped with your settings as described above with plugin_active=false allowing you to easily install it manually.\n\n\nAs the maintainer of the settings for your project you should avoid to ship too many plugins that may waste resources but are not used by every developer. By configuring additional plugins with plugin_active=false you can give your developers the freedom to install some additional plugins easily.\n\n\nlegacy plugin config\n\nFor downward compatibility we still support the deprecated legacy configuration if the folder settings/eclipse/plugins does not exist:\nThe project configuration typically defines the plugins that will be installed via ECLIPSE_PLUGINS variable. Otherwise defaults from this eclipse commandlet will apply.\nBe aware that this comes at your own risk and sometimes plugins can conflict and break your IDE.\n\n\nHere is an example how a project can configure the plugins in its devon.properties inside the settings:\n\n\n\n\n\n\n\nFor the above listed plugins you can also use the short form:\n\n\n\n\n\n\n\nOf course you may also mix plugin IDs with fully qualified plugins.\n\n\n\n\ndictionary\n\nEclipse already comes with a build-in spellchecker. This is very helpful when writing comments. The default settings of devonfw-ide ship with a project specific dictionary file and according configurations to enable spellchecking and configuring this dictionary.\nWhen typing JavaDoc, inline comments or other texts the spellchecker will underline unknown words in red.\nIf your cursor is located at such a word you can hit [Ctrl][1] to get a context menu with additional options.\nThere you can either choose similar correct words to correct a typo or you may even add the word (maybe a new business term) to your local dictionary.\n\n\n\n\n\n\n\nIn the latter case, you should commit the changes to your settings so that it will be available to your entire team.\nFor further details about committing changes to the settings please consult the admin usage.\n\n\nnon-english dictionary\n\nIn case your project has to write documentation or text in languages other than English, you might want to prefill your project dictionary for that language.\nHere we collect a list of such dictionaries that you can download and merge into your project dictionary:\n\n\n\n\nGerman: https://sourceforge.net/projects/germandict/ (has to be converted to UTF-8 e.g. with Notepad++ via Encoding &gt; Convert to UTF-8)\n\n\n\n\n\n\n\n\n"}