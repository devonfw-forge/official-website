{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_spring_guide-beanmapping-spring.asciidoc","title":"Bean Mapping in devon4j-spring","breadcrumbs":["Java","Spring","Guides"],"text":"Bean Mapping in devon4j-spring\n\nWe have developed a solution that uses a BeanMapper that allows to abstract from the underlying implementation. As mentioned in the general bean mapping guide, we started with Dozer a Java Bean to Java Bean mapper that recursively copies data from one object to another. Now we recommend using Orika. This guide will show an introduction to Orika and Dozer bean-mapper.\n\n\nBean-Mapper Dependency\n\nTo get access to the BeanMapper we have to use either of the below dependency in our POM:\n\n\nListing 22. Orika\n\n\n\n\n\nListing 23. Dozer\n\n\n\n\n\n\nBean-Mapper Configuration\n\nBean-Mapper Configuration using Dozer\n\nThe BeanMapper implementation is based on an existing open-source bean-mapping framework.\nIn case of Dozer the mapping is configured src/main/resources/config/app/common/dozer-mapping.xml.\n\n\nSee the my-thai-star dozer-mapping.xml as an example.\nImportant is that you configure all your custom datatypes as &lt;copy-by-reference&gt; tags and have the mapping from PersistenceEntity (ApplicationPersistenceEntity) to AbstractEto configured properly:\n\n\n\n\n\n\n\n\n\nBean-Mapper Configuration using Orika\n\nOrika with devonfw is configured by default and sets some custom mappings for GenericEntity.java to GenericEntityDto.java. To specify and customize the mappings you can create the class BeansOrikaConfig.java that extends the class BaseOrikaConfig.java from the devon4j.orika package. To register a basic mapping, register a ClassMap for the mapperFactory with your custom mapping. Watch the example below and follow the basic Orika mapping configuration guide and the Orika advanced mapping guide.\n\n\nRegister Mappings:\n\n\n\n\n\n\n\n\nBean-Mapper Usage\n\nThen we can get the BeanMapper via dependency-injection what we typically already provide by an abstract base class (e.g. AbstractUc). Now we can solve our problem very easy:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHey there! Seems like you are still using the documentation of our legacy Java repository. Since it wonâ€™t be maintained anymore, we recommend you to checkout the new Java page here.\n\n\n\n\n\n\n\n\n"}