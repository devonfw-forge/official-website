{"type":"doc","filename":"devonfw-guide_ide.wiki_advanced-tooling-mac.asciidoc.html","anchor":"devonfw-guide_ide.wiki_advanced-tooling-mac.asciidoc_keyboard","title":"Keyboard","breadcrumbs":["devonfw-ide","Advanced Features","MacOS Tooling"],"text":"Keyboard\n\nKeyboard support is not an integration however, some users coming from other platforms may struggle with the way macOS deals with (external non-apple) keyboards.\nSo to make it short: if you are happy with your keyboard and shortcuts, you can skip all the following.\nOtherwise, if you think that pressing keys like Home, End, etc. should just work as expected or pressing Alt Gr should allow you to type the special characters as printed on your German keyboard then here you will find a solution to your problems!\nTo get all automated you can just run the script system/mac/keyboard/install-mac-keyboard-support.sh (in ${DEVON_IDE_HOME}).\nIf you would like to understand what is going on, you want to customize the keyboard settings to your needs, or you want a keyboard layout other than German ISO, please read on.\n\n\nKeyboard Layouts\n\nKeyboard layouts allow a find-grained mapping of each key on your keyboard to its resulting input character or behaviour.\nThey are macOS native features and do not need to have software running as a background service to make the keyboard mapping work (see Karabiner section below as an alternative).\nThey are provided as so called bundle (white lego brick icon). Like a macOS app this is a folder containing a Contents folder with a specific sub-folder structure.\nIn the Resources subfolder *.keylayout files are placed and define the exact mapping for the keyboard.\nAs an example we provide a Keyboard Layouts folder containing a bundle for a German keyboard mapping.\n\n\nTo install keyboard layouts simply double-click the bundle or copy it to ~/Library/Keyboard Layouts.\nTo actually use them go to System Preferences and select Keyboard.\nThen, select the tab Input Sources.\nWith the + button you can add a keyboard layout for your daily usage with your Mac.\nPlease note that the keyboard layout shipped with devonfw-ide is called German-ISO and can be found in the Others section at the end of the list.\nIt can be used as an example or template, if you want to create your own layout.\n\n\n\n\n\n\n\nWhen you have multiple mappings in place, on the top menu bar you will find a little icon next to the current time that allows you to switch between the keyboard layouts, which is very handy when you switch from your native MacBook keyboard to an external USB keyboard or vice versa.\nEven for a pure MacOS geek this can be helpful in case a friend coming from Windows/Linux is supposed to type something on the Mac in a pair-programming session.\n\n\nIn our German keyboard mapping example you can use the keys like Alt Gr, etc. to type special characters as you would expect and as printed on your keyboard.\nTo make Pos1, End, etc. work properly across all apps please read on to the next section(s).\n\n\nIn case you would like to create your own keyboard layout you can of course edit the *.keylayout files in a text editor.\nHowever, to make this much more comfortable, you can use the graphical editor tool Ukelele.\nBesides, the app itself, the Ukelele dmg file, also contains a Documentation and a Resources folder.\nThe latter contains many keyboard layouts that you can use as a starting point.\n\n\n\nKey Bindings\n\nStill, various keyboard shortcuts might not work as expected for you.\nTherefore, we provide you with an advanced configuration in the folder system/mac/keyboard/KeyBindings that you can copy to your ~/Library folder:\n\n\n\n\n\n\n\nTo make the changes work you need to log out and log in again or you can reboot.\nAfter that, your Home (Pos1) and End buttons should work as expected including with selection via Shift and/or Command.\nAlso, you can use Command together with the left or right arrow key to move between words and combined it with Shift for selection.\nAs an example, for further customization you can press Command + &lt; to type the unicode character «.\n\n\nHowever, still some apps listen to keyboard events on a lower level and come with their own keyboard mappings.\nIn these apps you might still experience unexpected behaviour.\nSolutions can be found in the following sub-sections.\n\n\n\nSwitch Control and Command\n\nIf you are used to windows or linux and get easily confused by the apple keyboard behaviour you might want to switch the Control and the Option key.\nOpen System Preferences and select Keyboard.\nThen, in the first tab, click on the button Modifier Keys…​.\nFor every keyboard you can customize the behaviour of your modifier keys and therefore switch Control and Option as illustrated in the screenshot:\n\n\n\n\n\n\n\nProgrammers now should also disable that Control + Space is opening Spotlight Search as otherwise this shortcut can not be redefined in other apps like common IDEs.\n\n\n\n\n\n\n\nEclipse\n\nIn Eclipse, move and select by word as described above does not work.\nEven worse, the most important shortcut does not work: Control + Space for code completion (content assist).\nYou can manually redefine the key bindings in Preferences under General &gt; Keys.\nHowever, with multiple IDE installations and workspaces this will quickly get tedious.\nTherefore, you can Export and Import specific Preferences such as Keys Preferences to/from a *.epf (Eclipse PreFerences) file.\nWe have done all this for you so you can just import the file located in system/mac/keyboard/Eclipse/eclipse-mac-keybindings.epf into your Eclipse.\nHappy coding.\n\n\n\n\nKarabiner\n\nIf you want more dynamics and do not worry about an app that has to run in the background to make your keyboard work as you like (no relevant performance overhead), you can try Karabiner Elements.\nThis is a powerful tool to remap your keyboard shortcuts.\nIn the UI you can only directly create and edit Simple Modifications that are too limited for most use-cases.\nHowever, using Complex Modifications you can do a lot of magic to customize the keyboard behaviour to your personal needs.\nA key with any combination of modifiers can be mapped to any key with arbitrary modifiers.\nThis can also be bound to conditions based on the frontmost application or the keyboard model.\nThese complex modifications are configured as *.json files.\nWe have included a set with useful rules for external keyboards, programmer shortcuts, etc.\nIf you have Karabiner installed, you only need to copy the contents of the karabiner folder located in this directory to your ~/.config folder:\n\n\n\n\n\n\n\nNow, if you open the Complex Modifications in the Karabiner app, you can click on the + Add rule button and will see these mappings in the pop up.\nSelect the rules you want to add (e.g. add all) and you are done.\nUnlike other solutions, you can quickly tweak your keyboard without the need to log out and restart apps, which gives faster trial and error turnarounds.\nFurther, if you want to tweak your own configs, Karabiner comes with a secondary app called Karabiner-EventViewer that shows you the names of the keys, modifiers, and apps for the events you are triggering.\nThis is very helpful to get the config right.\n\n\n\n\n\n\n"}