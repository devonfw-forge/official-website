{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_test-framework-modules.html","anchor":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_framework-features","title":"Framework Features","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Test Framework Modules"],"text":"Framework Features\n\nPage Class\n\nPage Object Models allow for the representation of a webpage as a Java Class. The class contains all required web elements like buttons, textfields, labels, etc. When initializing a new project, create a new package to store the Page Object Models in.\n\n\nInitialization\n\nSource folder: allure-app-under-test/src/main/java\n\n\nName: com.example.selenium.pages.YOUR_PROJECT\n\n\nClasses being created inside of this new package have to extend the BasePage class. As a result, a few abstract methods from BasePage have to be implemented.\n\n\n\n\n\n\n\nThe example above demonstrates a minimum valid Page Object class with all required methods included.\n\n\nBasePage method: isLoaded\n\nThe inherited method isLoaded() can be used to check if the current Page Object Model has been loaded correctly. There are multiple ways to verify a correctly loaded page. One example would be to compare the actual page title with the expected page title.\n\n\n\n\n\n\n\n\nBasePage method: load\n\nThe method load() can be used to tell the webdriver to load a specific page.\n\n\n\n\n\n\n\n\nBasePage method: pageTitle\n\nThe pageTitle() method returns a String containing the page title.\n\n\n\n\nCreating a selector variable\n\nTo initialize web elements, a large variety of selectors can be used.\n\n\nWe recommend creating  a private and constant field for every web element you’d like to represent in Java. Use the guide above to find the preferred selector and place it in the code below at \"WEB_ELEMENT_SELECTOR\".\n\n\n\n\n\n\n\nAs soon as you create the selector above, you can make use of it to initialize a WebElement object.\n\n\n\n\n\n\n\nNote: The examples displayed in the cssSelector.docx file use the Selenium method driver.findElement() to find elements. However, using this framework we recommend  findDynamicElement() or findQuietlyElement().findDynamicElement() allows waiting for dynamic elements, for example buttons that pop up.\n\n\n\nCreating a page method\n\nTo interact with the page object, we recommend creating methods for each action.\n\n\n\n\n\n\n\nCreating a method like the one above allows the test case to run something like googleSearchPage.enterGoogleSearchInput(\"Hello\") to interact with the page object.\n\n\n\nNaming Conventions\n\nFor code uniformity and readability, we provide a few method naming conventions.\n\n\n\n\n\n\n\n\n\nElement\nAction\nName (example)\n\n\n\n\nForm: Input text\nenter\nenterUsernameInput()\n\n\n\nis (label)\nisUsernameInputPresent()\n\n\n\nis (value)\nisUsernameEmpty()\n\n\n\nget\ngetUsernameValue()\n\n\nForm: Label\nget\ngetCashValue()\n\n\n\nis (value)\nisCashValueEmpty()\n\n\n\nis (label)\nisCashLabelPresent()\n\n\nForm: Submit Button\nsubmit\nsubmitLoginForm()\n\n\n\nis\nisLoginFormPresent()\n\n\nPage: Button\nclick\nclickInfoButton()\n\n\n\nis\nisInfoButtonpresent()\n\n\nCheckbox\nset\nsetRememberMeCheckbox()\n\n\n\nunset\nunsetRememberMeCheckbox()\n\n\n\nis (present)\nisRememberMeCheckboxPresent()\n\n\n\nis (value)\nisRememberMeCheckboxSet()\n\n\nRadio\nset\nsetMaleRadioValue(\"Woman\")\n\n\n\nis (present)\nisMaleRadioPresent()\n\n\n\nis (visible)\nisMaleRadioVisible()\n\n\n\nget\ngetSelectedMaleValue()\n\n\nElements (Tabs, Cards, Account, etc.)\nclick\nclickPositionTab() / clickMyBilanceCard()\n\n\n\nis\nisMyBilanceCardPresent()\n\n\nDropdown List\nselect\nselectAccountTypeValue(typeName)\n\n\n\nunselect\nunselectAccountTypeValue(typeName)\n\n\n\nmultiple select\nselectAccountTypesValues(List typeNames)\n\n\n\nis (list)\nisAccountTypeDropdownListPresent()\n\n\n\nis (element present)\nisAccountTypeElementPresent(typeName)\n\n\n\nis (element selected)\nisAccountTypeSelected(typeName)\n\n\nLink\nclick\nclickMoreLink()\n\n\n\nis\nisMoreLinkPresent()\n\n\nCombobox\nselect\nselectSortCombobox()\n\n\n\nis (present)\nisSortComboboxPresent(name)\n\n\n\nis (contain)\nselectSortComboboxContain(name)\n\n\nElement Attribute\nget\ngetPositionTabCss()\n\n\n\nget\ngetMoreLinkHref() / getRememberMeCheckboxName()\n\n\n\n\nA css selector is used to select elements from an HTML page.\n\n\nSelection by element tag, class or id are the most common selectors.\n\n\n\n\n\n\n\nThis text element (p) can be found by using any one of the following selectors:\n\n\n\n\n\n\n\n\nUsing other attributes\n\nWhen a class or an id attribute is not sufficient to identify an element, other attributes can be used as well, by using \"[attribute=value]\": For example:\n\n\n\n\n\n\n\nThis can be selected by using the entire value: \"a[href='https://ns.nl/example.html'\\]\". For selecting links starting with, containing, ending with see the list below.\n\n\n\nUsing sub-elements\n\nThe css selectors can be stacked, by appending them:\n\n\n\n\n\n\n\nIn the example above, the link element to nsinternational can be obtained with: \"#2 a\".\n\n\n\nWhen possible avoid\n\n\n\nUsing paths of commonly used HTML elements within the containers (HTML: div). This will cause failures when a container is added, a common occurrence during development, e.g. \"div div p\". Use class or id instead, if those are not available, request them to be added in the production code.\n\n\nMagic order numbers. It is possible to get the second text element in its parent container by using the selector \"p:nth-child(2)\". If the items are representing different items, ask the developer to add specific attributes. It is also possible to request all items, with a selector similar to \".myList li\", and iterate through them later.\n\n\n\n\n\nList\n\nA good list with CSS Selectors can be found at W3Schools:\nhttps://www.w3schools.com/cssref/css_selectors.asp\n\n\n\n\nSelenium UFT Comparison\n\n\n\n\n\n\n\n\n\n\nSubject\nHP UFT\nHP LeanFT\nSelenium\nSelenium IDE\n\n\n\n\nLanguage\nVBScript\nSame as Selenium\nSupports several languages.\nJava\nJavascript\n\n\nLearning curve\nBased on VBScript which is relatively easy to learn\nLess intuitive, more coding knowledge necessary\nLess intuitive, more coding skills necessary\nRecord/playback possible. Generated code difficult to maintain\n\n\nProject type\nTraditional\nAgile\nAgile\nAgile\n\n\nUser oriented\nMore Tester\nMore Developer\nMore Developer\nMore Tester\n\n\nObject recognition\nTest object identification and storage in object repository\nSame as UFT\nWith Firebug\nSame as SE\n\n\nCustomizations\nOnly the available standard. No custimization\nSame as UFT\nLots of customizations possible\nFewer then SE\n\n\nFramework\nNeeded.\nExists in ATaaS\n\nNeeded.\nIntegration with Fitnesse, Cucumber, Gauche\nNo Framework. Limited capabilities of the tool.\n\n\nOperating System support\nRuns on Windows\nRuns on Windows\nMultiple OS support. With Grid: testing on multiple devices at same time\nPlugin for Firefox\n\n\nApplication coverage\nMany\nMany\nWeb only\nWeb only\n\n\nMultiple browsers\nIn UFT 12.5 available\nIn 12.5 available\nMultiple tests in multiple browser windows at once and faster support for new browser versions\nMultiple tests in multiple browser windows at once and faster support for new browser versions\n\n\nSystem Load\nHigh system load (RAM &amp; CPU usage)\nLower load than HP UFT?\nLower load than HP UFT\nLower load than HP UFT\n\n\nALM integration\nWith HP ALM – full integration\n\nJira, Jenkins\nNot with ALM tool\nSame as SE\n\n\nIntegration with other tools\nA lot can be built, but many are already covered.\nMore than UFT.\nFreeware and can be integrated with different open source tools\nFreeware and can be integrated with different open source tools\n\n\nAddins\nAdd-ins necessary to access all capabilities of the tool – license related\nSame as UFT\nSee integration with other tools\nSee integration with other tools\n\n\nReporting\nComplete, link to ALM\nSame as UFT\nNo native mechanism for generating reports, but multiple plugins available for reporting\nNo native mechanism for generating reports, but multiple plugins available for reporting\n\n\nSupport\nHP full support\nSame as UFT\nLimited support as it is open source\nLimited support as it is open source\n\n\nLicense costs\nAbout 17K – Capgemini price 5K.\nIncluded in the S2 service charge\nSame price as HP UFT\nFree\nFree\nlimited functionality (no iterations / conditional statements)\n\n\niVAL Service\nATaaS\nNot in a S2 service\nNot in a S2 service\nNot in a S2 service\n\n\n\n\nBold for key differentiators.\n\n\nProjects also choose an available resource and the knowledge of that resource.\n\n\nBoth: Framework determines the quality of automation. Needs to be set up by someone with experience with the tool\n\n\n\nRun on different browsers\n\n\n\n\n\n\nTo execute each test with a chosen installed browser, specific arguments are required in Run configuration.\n\n\n\n\n\n\n\n\n\n\n\n\nIt is necessary to enter -Dbrowser= with browser parameter name as an argument (in 'Arguments' tab):\n\n\nfirefox\nie\nphantomjs\nchrome\nchromeheadless\nFor example: -Dbrowser=ie\n\n\n\n\n\n\n\n\nBrowser options\n\nTo run a browser with specific options during runtime, please use\n\n\n-DbrowserOptions=\"&lt; options &gt;\"\n\n\n\n\n\n\n\nexamples:\n\n\n\n\nOne parameter -DbrowserOptions=\"headless\"\n\n\nOne parameter -DbrowserOptions=\"--incognito\"\n\n\nMany parameters -DbrowserOptions=\"headless;param1=value1;testEquals=FirstEquals=SecondEquals;--testMe\"\n\n\n\n\nList of options/capabilites supported by:\n\n\n\n\nSelenium Grid\n\n\nChrome Driver\n\n\n\n\n\nRun with full range of resolution\n\n\n\n\n\n\nIn order to execute tests in different browser resolutions, it is required to provide these resolutions as a test parameter.\n\n\nTest example with resolutions included may be found in ResolutionTest test class\n\n\n\n\n\n\n\nExample of resolution notation is available in ResolutionEnum class\n\n\n\n\n\n\n\nTest with given resolution parameters will be launched as many times as the number of resolutions provided.\n\n\n\nSelenium Best Practices\n\nThe following table displays a few best practices that should be taken into consideration when developing Selenium test cases.\n\n\n\n\n\n\n\n\nBest Practices\nDescription\n\n\n\n\n\"Keep it Simple\"\nDo not force use every Selenium feature available - Plan before creating the actual test cases\n\n\nUsing Cucumber\nCucumber can be used to create initial testcases for further decision making\n\n\nSupporting multiple browsers\nTest on multiple browsers (in parallel, if applicable) if the application is expected to support multiple environments\n\n\nTest reporting\nMake use of test reporting modules like Junit which is included in the framework\n\n\nMaintainability\nAlways be aware of the maintainability of tests - You should always be able to adapt to changes\n\n\nTesting types\nWhich tests should be created? Rule of thumb: 70% Unit test cases, 20% Integration test cases and 10% UI Test cases\n\n\nTest data\nConsider before actually developing tests and choosing tools: Where to get test data from, how to reset test data\n\n\n\n\n\n\n"}