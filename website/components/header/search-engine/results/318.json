{"type":"doc","filename":"devonfw-guide_devon4net.wiki_samples.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_samples.asciidoc_my-thai-star-restaurant","title":"My Thai Star Restaurant","breadcrumbs":[".net","Samples","Samples"],"text":"My Thai Star Restaurant\n\n  My Thai Star (.Net Core Server + Angular client)\n\n\n\n\nYour browser does not support the video tag.\n\n\n\n\nAngular requirements\n\n\n\nNode\n\n\nAngular CLI\n\n\nYarn\n\n\n\n\n\nAngular client\n\n\n\nInstall Node.js LTS version\n\n\nInstall Angular CLI from command line:\n\n\n\nnpm install -g @angular/cli\n\n\n\n\n\nInstall Yarn\n\n\nGo to Angular client from command line\n\n\nExecute : yarn install\n\n\nLaunch the app from command line: ng serve and check http://localhost:4200\n\n\nYou are ready\n\n\n\n\n\n.Net Core server\n\nBasic architecture details\n\nFollowing the devonfw conventions the .Net Core 2.0 My Thai Star backend is going to be developed dividing the application in Components and using a n-layer architecture.\n\n\n\n\n\n\n\n\nComponents\n\nThe application is going to be divided in different components to encapsulate the different domains of the application functionalities.\n\n\n\n\n\n\n\nAs main components we will find:\n\n\n\n\n_BookingService: Manages the bookings part of the application. With this component the users (anonymous/logged in) can create new bookings or cancel an existing booking. The users with waiter role can see all scheduled bookings.\n\n\n\n\n-OrderService: This component handles the process to order dishes (related to bookings). A user (as a host or as a guest) can create orders (that contain dishes) or cancel an existing one. The users with waiter role can see all ordered orders.\n\n\n\n\nDishService: This component groups the logic related to the menu (dishes) view. Its main feature is to provide the client with the data of the available dishes but also can be used by other components (Ordermanagement) as a data provider in some processes.\n\n\nUserService: Takes care of the User Profile management, allowing to create and update the data profiles.\n\n\n\n\nAs common components (that don’t exactly represent an application’s area but provide functionalities that can be used by the main components):\n\n\n\n\nMailservice: with this service we will provide the functionality for sending email notifications. This is a shared service between different app components such as bookingmanagement or ordercomponent.\n\n\n\n\nOther components:\n\n\n\n\nSecurity (will manage the access to the private part of the application using a jwt implementation).\n\n\nTwitter integration: planned as a Microservice will provide the twitter integration needed for some specific functionalities of the application.\n\n\n\n\n\n\nLayers\n\nIntroduction\n\nThe .Net Core backend for My Thai Star application is going to be based on:\n\n\n\n\ndevon4NET as the .Net Core framework\n\n\nVSCode as the Development environment\n\n\nTOBAGO as code generation tool\n\n\n\n\n\nApplication layer\n\nThis layer will expose the REST api to exchange information with the client applications.\n\n\nThe application will expose the services on port 8081 and it can be launched as a self host console application (microservice approach) and as a Web Api application hosted on IIS/IIS Express.\n\n\n\nBusiness layer\n\nThis layer will define the controllers which will be used on the application layer to expose the different services. Also, will define the swagger contract making use of summary comments and framework attributes.\n\n\nThis layer also includes the object response classes in order to interact with external clients.\n\n\n\nService layer\n\nThe layer in charge of hosting the business logic of the application. Also orchestrates the object conversion between object response and entity objects defined in Data layer.\n\n\n\nData layer\n\nThe layer to communicate with the data base.\n\n\nData layer makes use of Entity Framework.\nThe Database context is defined on DataAccessLayer assembly (ModelContext).\n\n\nThis layer makes use of the Repository pattern and Unit of work in order to encapsulate the complexity. Making use of this combined patterns we ensure an organized and easy work model.\n\n\nAs in the previous layers, the data access layer will have both interface and implementation tiers. However, in this case, the implementation will be slightly different due to the use of generics.\n\n\n\nCross-Cutting concerns\n\nthe layer to make use of transversal components such JWT and mailing.\n\n\n\n\nJwt basics\n\n\n\nA user will provide a username / password combination to our auth server.\n\n\nThe auth server will try to identify the user and, if the credentials match, will issue a token.\n\n\nThe user will send the token as the Authorization header to access resources on server protected by  JWT Authentication.\n\n\n\n\n\n\n\n\n\n\nJwt implementation details\n\nThe Json Web Token pattern will be implemented based on the jwt on .net core framework that is provided by default in the devon4Net projects.\n\n\n\nAuthentication\n\nBased on Microsoft approach, we will implement a class to define the security entry point and filters. Also, as My Thai Star is a mainly public application, we will define here the resources that won’t be secured.\n\n\nOn devon4Net.Infrastructure.JWT assembly is defined a subset of Microsoft’s authorization schema Database. It is started up the first time the application launches.\n\n\nYou can read more about _Authorization on:\n\n\nAuthorization in ASP.NET Core\n\n\nClaim based authorization\n\n\n\nDependency injection\n\nAs it is explained in the Microsoft documentation we are going to implement the dependency injection pattern basing our solution on .Net Core.\n\n\n\n\n\n\n\n\n\nSeparation of API and implementation: Inside each layer we will separate the elements in different tiers: interface and implementation. The interface tier will store the interface with the methods definition and inside the implementation we will store the class that implements the interface.\n\n\n\n\n\nLayer communication method\n\nThe connection between layers, to access to the functionalities of each one, will be solved using the dependency injection.\n\n\n\n\n\n\n\nConnection BookingService - Logic\n\n\n\n\n\n\n\nTo give service to the defined User Stories we will need to implement the following services:\n\n\n\n\nprovide all available dishes.\n\n\nsave a booking.\n\n\nsave an order.\n\n\nprovide a list of bookings (only for waiters) and allow filtering.\n\n\nprovide a list of orders (only for waiters) and allow filtering.\n\n\nlogin service (see the Security section).\n\n\nprovide the current user data (see the Security section)\n\n\n\n\nFollowing the [naming conventions] proposed for devon4Net applications we will define the following end points for the listed services.\n\n\n\n\n(POST) /mythaistar/services/rest/dishmanagement/v1/dish/search.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/filter (to filter with fields that does not belong to the Order entity).\n\n\n(POST) /mythaistar/login.\n\n\n(GET) /mythaistar/services/rest/security/v1/currentuser/.\n\n\n\n\nYou can find all the details for the services implementation in the Swagger definition included in the My Thai Star project on Github.\n\n\n\nApi Exposed\n\nThe devon4Net.Business.Controller assembly in the business layer of a component will store the definition of the service by a  interface. In this definition of the service we will set-up the endpoints of the service, the type of data expected and returned, the HTTP method for each endpoint of the service and other configurations if needed.\n\n\n\n\n\n\n\nUsing the summary annotations and attributes will tell to swagger the contract via the XML doc generated on compiling time. This doc will be stored in XmlDocumentation folder.\n\n\nThe Api methods will be exposed on the application layer.\n\n\n\n\n"}