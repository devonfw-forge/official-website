{"type":"doc","filename":"devonfw-guide_devon4net.wiki_templates.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_templates.asciidoc_kafka-template","title":"Kafka Template","breadcrumbs":[],"text":"Kafka Template\n\nThe devon4net stack includes a Kafka template with some samples of how to use Producers, Consumers and Streams in your .Net projects. The Kafka server is running in docker in local, further in the document you will find everything you need to know to configure the template and run it.\n\n\nThere are two main examples in the template.\n\n\n\n\nFile Transfer: You can transfer files in pieces from the Producer to the Consumer project, going through a Stream inside Kafka. An \"In-Memory\" database stores the pieces until all of them have arrived and the file is ready to be downloaded.\n\n\nMessage Service: You can send kafka messages through a topic in kafka, from the Producer project to the Consumer.\n\n\n\n\nThe template is made up of three projects:\n\n\n\n\nDevon4Net.Application.Kafka: This project holds the Stream and deploys it to the server. It also helps managing the Kafka server through an API in localhost:9093, allowing you to create and delete Kafka topics.\n\n\nDevon4Net.Application.Kafka.Producer: This project contains two producers. You will be able to use the producers through an availble API in localhost:9091.\n\n\nDevon4Net.Application.Kafka.Consumer: This project consumes both from the file topic and the message topic. You have also an API available in localhost:9094\n\n\n\n\n\n\n\nFigure 163. Diagram of the Template\n\n\nAs you can see in the diagram, all of the projects communicate with and through the kafka image running on docker.\n\n\nSample of use\n\nIn this part of the document, you will learn how to launch the projects and use them.\n\n\nDocker\n\nIn devon4net you have a kafka docker file available for running in the directory source\\Docker\\Kafka.\n\n\n\n\nFor running it first make sure that your Docker Daemon is running in your system.\n\n\nThen you can navigate to the directory using a console and execute the following command:\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\nThe only necessary configuration is the directory you want to download the files that will be transferred. For that go to the Devon4Net.Application.Kafka.Consumer project and fill the Downloads section in the appsettings.Development.json.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also change other configuration as you wish. To learn more about the configuration go to the component documentation.\n\n\n\n\n\n\nProject initialization\n\nTo start all three projects you will need to select them. For that right click on the solution and select Set Startup projects…​\n\n\n\n\n\nFigure 164. Set multiple startup projects\n\n\nThen select the three projects and run it.\n\n\n\nCreate the topics\n\nThe consumers and the streams use the topics before they are created, so you will need to define them before starting the application.\n\n\nFor that you can use the API available in localhost:9093 and create the following topics:\n\n\n\n\nmessage_producer\n\n\nmessage_consumer\n\n\nfile_producer\n\n\nfile_consumer\n\n\n\n\nNow you can re-run the application and use it.\n\n\n\nUse it\n\nIn this sample of use we are going to send a file and receive it in our desired directory using the Consumer API.\n\n\n\n\nGo to the Producer API and upload a file:\n\n\n\n\nFigure 165. Upload a file to the API\n\n\n\nNavigate to the Producer API and copy the file Guid using the getFilesGuids end-point.\n\n\n\n\nFigure 166. Get the files Guids\n\n\n\nPut the file guid in the downloadFile end-point and wait for it downloading in the directory you chose.\n\n\n\n\nFigure 167. Download the file by its Guid\n\n\n\n\n\n\n\n\n\n\n\nYou can follow the process of sending (Producer), processing (Stream) and downloading (Consumer) the file by pieces through the projects consoles, where you will see some interesting logs.\n\n\n\n\n\n\n\n\n\n"}