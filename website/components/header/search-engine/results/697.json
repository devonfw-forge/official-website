{"type":"doc","filename":"devonfw-guide_hangar.wiki_hangar.asciidoc_github-actions-deploying-on-aws-eks-or-azure-aks.html","anchor":"devonfw-guide_hangar.wiki_hangar.asciidoc_setup-github-actions-workspace","title":"Setup GitHub Actions workspace","breadcrumbs":[],"text":"Setup GitHub Actions workspace\n\nSetting up a repository on GitHub\n\nBy the end of this guide, a repository on GitHub will be created in an automated way using a script.\n\n\nPrerequisites\n\n\n\nA GitHub user.\n\n\nInstall GitHub CLI.\n\n\nInstall Git.\n\n\n\n\n\nCreating repository using provided script\n\nThe script located at /scripts/repositories/github/create-repo.sh allows you to either:\n\n\n\n\nCreate an empty repository with just a README file and clone it to your computer into the directory you set. Useful when starting a project from scratch.\n\n\nImport an already existing directory or Git repository into your project giving a path or an URL. Useful for taking to GitHub the development of an existing project.\n\n\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nTypical use cases\n\n\n\n\n\n\n\nThis is non-exhaustive list. Make your own combination of flags if all of the following use cases does not fit your needs.\n\n\n\n\n\nCreating an empty repository\n\n\n\n\n\n\nIn case repository name is not specified, destination directory name will be used.\n\n\n\nCreating an empty repository with Gitflow branching strategy\n\n\n\n\n\n\n\nImporting a remote Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source repository name (in URL) will be used.\n\n\n\nImporting a specific remote Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\nImporting local directory or Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source directory name will be used.\n\n\n\nImporting a specific local Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\n\n\n\n\n\nThis operation is destructive regarding branches on the local repository.\n\n\n\n\n\n\n\n\n\n\n\nSame command could also be used with a local directory, but then using -b and -r would be redundant.\n\n\n\n\n\n\n\n\nBranching strategies\n\nTo ensure the quality of development, it is crucial to keep a clean Git workflow. The following branching strategies are supported (using -s flag):\n\n\nGitflow\n\nThis is not an explanation of Gitflow (there are plenty of them on the web), but the actions performed by the script to help you start using this worflow.\n\n\nBranches\n\n\n\nmaster is the initial (seed) branch.\n\n\ndevelop branch is created from master branch.\n\n\n\n\nAny other branch part the strategy (feature, release, and hotfix branches) will be created by developers during the lifecycle of the project.\n\n\n\n\nBranch protection rules\n\nIt is possible to protect important branches against bad practices using branch protection rules.\n\n\nThe following branch protection rules are applied to master and develop branches:\n\n\n\n\nRequire a pull request before merging: ON\n\n\n\nRequire approvals: 1\n\n\nDismiss stale pull request approvals when new commits are pushed: ON\n\n\n\n\n\nRequire conversation resolution before merging: ON\n\n\n\n\nThe above branch protection rules are defined in a configuration file located at /scripts/repositories/common/config/strategy.cfg. Feel free to adapt it to your needs.\n\n\n\n\n\n\n\n\nThis is the bare minimum standard for any project.\n\n\n\n\n\nYou can find more information about branch protection rules in the official documentation.\n\n\n\n\n\n\n\n"}