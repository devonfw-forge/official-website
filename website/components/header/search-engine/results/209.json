{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-security.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-security.asciidoc_vulnerabilities-and-protection","title":"Vulnerabilities and Protection","breadcrumbs":["Java","General","Security"],"text":"Vulnerabilities and Protection\n\nIndependent from classical authentication and authorization mechanisms there are many common pitfalls that can lead to vulnerabilities and security issues in your application such as XSS, CSRF, SQL-injection, log-forging, etc. A good source of information about this is the OWASP.\nWe address these common threats individually in security sections of our technological guides as a concrete solution to prevent an attack typically depends on the according technology. The following table illustrates common threats and contains links to the solutions and protection-mechanisms provided by the devonfw:\n\n\nTable 37. Security threats and protection-mechanisms\n\n\n\n\n\n\n\nThreat\nProtection\nLink to details\n\n\n\n\nA1 Injection\nvalidate input, escape output, use proper frameworks\nSQL Injection\n\n\nA2 Broken Authentication\nencrypt all channels, use a central identity management with strong password-policy\nAuthentication\n\n\nA3 Sensitive Data Exposure\nUse secured exception facade, design your data model accordingly\nREST exception handling\n\n\nA4 XML External Entities\nPrefer JSON over XML, ensure FSP when parsing (external) XML\nXML guide\n\n\nA5 Broken Access Control\nEnsure proper authorization for all use-cases, use @DenyAll as default to enforce\nAccess-control guide especially method authorization\n\n\nA6 Security Misconfiguration\nUse devon4j application template and guides to avoid\ntutorial-newapp and sensitive configuration\n\n\nA7 Cross-Site Scripting\nprevent injection (see A1) for HTML, JavaScript and CSS and understand same-origin-policy\nclient-layer\n\n\nA8 Insecure Deserialization\nUse simple and established serialization formats such as JSON, prevent generic deserialization (for polymorphic types)\nJSON guide especially inheritence, XML guide\n\n\nA9 Using Components with Known Vulnerabilities\nsubscribe to security newsletters, recheck products and their versions continuously, use devonfw dependency management\nCVE newsletter and dependency check\n\n\nA10 Insufficient_Logging &amp; Monitoring\nEnsure to log all security related events (login, logout, errors), establish effective monitoring\nLogging guide and monitoring guide\n\n\nInsecure Direct Object References\nUsing direct object references (IDs) only with appropriate authorization\nlogic-layer\n\n\nCross-Site Request Forgery (CSRF)\nsecure mutable service operations with an explicit CSRF security token sent in HTTP header and verified on the server\nCSRF guide\n\n\nLog-Forging\nEscape newlines in log messages\nlogging security\n\n\nUnvalidated Redirects and Forwards\nAvoid using redirects and forwards, in case you need them do a security audit on the solution.\ndevonfw proposes to use rich-clients (SPA/RIA). We only use redirects for login in a safe way.\n\n\n\n\n\n"}