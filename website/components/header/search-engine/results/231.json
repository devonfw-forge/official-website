{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-validation.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-validation.asciidoc_stateless-validation","title":"Stateless Validation","breadcrumbs":["Java","General","Validation"],"text":"Stateless Validation\n\nFor regular, stateless validation we use the JSR303 standard that is also called bean validation (BV).\nDetails can be found in the specification.\nAs implementation we recommend hibernate-validator.\n\n\nExample\n\nA description of how to enable BV for spring applications can be found in the relevant Spring documentation. A guide you can use to integrate validation in Quarkus applications can be found here. For a quick summary follow these steps:\n\n\n\n\nMake sure that hibernate-validator is located in the classpath by adding a dependency to the pom.xml.\n\n\n\n\nListing 14. spring\n\n\n\n\n\nListing 15. quarkus\n\n\n\n\n\n\n\nFor methods to validate go to their declaration and add constraint annotations to the method parameters.\n\nIn spring applications you can add the @Validated annotation to the implementation (spring bean) to be validated (this is an annotation of the spring framework, so it`s not available in the Quarkus context). The standard use case is to annotate the logic layer implementation, i.e. the use case implementation or component facade in case of simple logic layer pattern. Thus, the validation will be executed for service requests as well as batch processing.\n\n\n\n\n@Valid annotation to the arguments to validate (if that class itself is annotated with constraints to check).\n\n\n@NotNull for required arguments.\n\n\nOther constraints (e.g. @Size) for generic arguments (e.g. of type String or Integer). However, consider to create custom datatypes and avoid adding too much validation logic (especially redundant in multiple places).\n\n\n\n\n\n\n\nListing 16. BookingmanagementRestServiceImpl.java\n\n\n\n\n\n\n\nFinally add appropriate validation constraint annotations to the fields of the ETO class.\n\n\n\n\nListing 17. BookingCto.java\n\n\n\n\n\nListing 18. BookingEto.java\n\n\n\n\n\nA list with all bean validation constraint annotations available for hibernate-validator can be found here. In addition it is possible to configure custom constraints. Therefore it is necessary to implement a annotation and a corresponding validator. A description can also be found in the Spring documentation or with more details in the hibernate documentation.\n\n\n\n\n\nNote\n\n\nBean Validation in Wildfly &gt;v8: Wildfly v8 is the first version of Wildfly implementing the JEE7 specification. It comes with bean validation based on hibernate-validator out of the box. In case someone is running Spring in Wildfly for whatever reasons, the spring based annotation @Validated would duplicate bean validation at runtime and thus should be omitted.\n\n\n\n\n\n\nGUI-Integration\n\nTODO\n\n\n\nCross-Field Validation\n\nBV has poor support for this. Best practice is to create and use beans for ranges, etc. that solve this. A bean for a range could look like so:\n\n\n\n\n\n\n\n\n\n"}