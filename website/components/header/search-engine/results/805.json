{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_tutorials.html","anchor":"devonfw-guide_mrchecker.wiki_Who-Is-MrChecker_Tutorials_Project-Organisation.asciidoc","title":"Project organization","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Tutorials"],"text":"Project organization\n\nImporting projects\n\nEvery MrChecker project should be imported as a Maven Project.\n\n\nExample from Eclipse IDE:\n\n\n\n\n\n\n\n\n\n\n\n\nEnter the project path and select projects to import.\n\n\n\n\n\n\n\nWhen the import is finished, update the project structure - ALT + F5\n\n\n\n\n\n\n\n\nExporting projects\n\nIn order to create a new standalone MrChecker project, you can use template-app-under-test and export it to the new folder:\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new folder for the project and enter its path. Select project and files to export:\n\n\n\n\n\n\n\nChange project name and other properties, if necessary, in pom.xml file:\n\n\n\n\n\n\n\nThen you can import the project to the workspace and create new packages and classes.\n\n\n\nCreating new packages\n\n\n\nYou will need two new packages: one for the new page classes, the other one for test classes:\n\n\n\nCreate a package for page classes\n\n\n\n\n\n\n\nCreate a package for test classes\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\nCreating new Page Classes\n\n\n\n\n\n\nEvery Page Class should extend BasePage class. Import all necessary packages and override all required methods:\n\n\n\n\npublic boolean isLoaded() - returns true if the page is loaded and false if not\n\n\npublic void load() - loads the page\n\n\npublic String pageTitle() - returns page title\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\nCreating new Test Classes\n\n\n\n\n\n\nTest classes should extend BaseTest class, import all necessary packages and override all required methods:\n\n\n\n\npublic void setUp() - executes before each test\n\n\npublic void tearDown() - executes after each test\n\n\n\n\nOptionally, it is also possible to implement the following methods:\n\n\n\n\n@BeforeClass\npublic static void setUpBeforeClass() - runs only once before all tests\n\n\n@AfterClass\npublic static void tearDownAfterClass() - runs only once after performing all tests\n\n\n\n\nEvery test method has to be signed with \"@Test\" parameter.\n\n\n\n\n\n\n\n\nRunning Tests\n\nRun the test by right-clicking on the test method → Run as → JUnit test.\n\n\n\n\n"}