{"type":"doc","filename":"devonfw-guide_devon4net.wiki_userguide.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_userguide.asciidoc_publishing","title":"Publishing","breadcrumbs":[".net","User guide","devon4net Guide"],"text":"Publishing\n\nNginx\n\nIn order to deploy your application to a Nginx server on Linux platform you can follow the instructions from Microsoft here.\n\n\n\nIIS\n\nIn this point is shown the configuration options that must implement the .Net Core application.\n\n\nSupported operating systems:\n\n\n\n\nWindows 7 and newer\n\n\nWindows Server 2008 R2 and newer*\n\n\n\n\nWebListener server will not work in a reverse-proxy configuration with IIS. You must use the Kestrel server.\n\n\nIIS configuration\n\n\nEnable the Web Server (IIS) role and establish role services.\n\n\nWindows desktop operating systems\n\n\nNavigate to Control Panel &gt; Programs &gt; Programs and Features &gt; Turn Windows features on or off (left side of the screen). Open the group for Internet Information Services and Web Management Tools. Check the box for IIS Management Console. Check the box for World Wide Web Services. Accept the default features for World Wide Web Services or customize the IIS features to suit your needs.\n\n\n\n\n\n\n\n*Conceptually, the IIS configuration described in this document also applies to hosting ASP.NET Core applications on Nano Server IIS, but refer to ASP.NET Core with IIS on Nano Server for specific instructions.\n\n\nWindows Server operating systems\nFor server operating systems, use the Add Roles and Features wizard via the Manage menu or the link in Server Manager. On the Server Roles step, check the box for Web Server (IIS).\n\n\n\n\n\n\n\nOn the Role services step, select the IIS role services you desire or accept the default role services provided.\n\n\n\n\n\n\n\nProceed through the Confirmation step to install the web server role and services. A server/IIS restart is not required after installing the Web Server (IIS) role.\n\n\nInstall the .NET Core Windows Server Hosting bundle\n\n\n\n\nInstall the .NET Core Windows Server Hosting bundle on the hosting system. The bundle will install the .NET Core Runtime, .NET Core Library, and the ASP.NET Core Module. The module creates the reverse-proxy between IIS and the Kestrel server. Note: If the system doesn’t have an Internet connection, obtain and install the Microsoft Visual C++ 2015 Re-distributable before installing the .NET Core Windows Server Hosting bundle.\n\n\nRestart the system or execute net stop was /y followed by net start w3svc from a command prompt to pick up a change to the system PATH.\n\n\n\n\n\n\n\nNote\n\n\nIf you use an IIS Shared Configuration, see ASP.NET Core Module with IIS Shared Configuration.\n\n\n\n\n\nTo configure IISIntegration service options, include a service configuration for IISOptions in ConfigureServices:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDefault\nSetting\n\n\n\n\nAutomaticAuthentication\ntrue\nIf true, the authentication middleware sets the HttpContext.User and responds to generic challenges. If false, the authentication middleware only provides an identity (HttpContext.User) and responds to challenges when explicitly requested by the Authentication Scheme. Windows Authentication must be enabled in IIS for AutomaticAuthentication to function.\n\n\nAuthenticationDisplayName\nnull\nSets the display name shown to users on login pages.\n\n\nForwardClientCertificate\ntrue\nIf true and the MS-ASPNETCORE-CLIENTCERT request header is present, the HttpContext.Connection.ClientCertificate is populated.\n\n\n\n\nweb.config\n\n\nThe web.config file configures the ASP.NET Core Module and provides other IIS configuration. Creating, transforming, and publishing web.config is handled by Microsoft.NET.Sdk.Web, which is included when you set your project’s SDK at the top of your .csproj file, &lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt;. To prevent the MSBuild target from transforming your web.config file, add the &lt;IsTransformWebConfigDisabled&gt; property to your project file with a setting of true:\n\n\n\n\n\n\n\n\nAzure\n\nIn order to deploy your application to Azure platform you can follow the instructions from Microsoft:\n\n\nSet up the development environment\n\n\n\n\nInstall the latest&nbsp;Azure SDK for Visual Studio. The SDK installs Visual Studio if you don’t already have it.\n\n\nVerify your&nbsp;Azure account. You can&nbsp;open a free Azure account&nbsp;or&nbsp;Activate Visual Studio subscriber benefits.\n\n\n\n\nCreate a web app\n\n\nIn the Visual Studio Start Page, select&nbsp;File &gt; New &gt; Project…​\n\n\n\n\n\n\n\nComplete the&nbsp;New Project&nbsp;dialog:\n\n\n\n\nIn the left pane, select&nbsp;.NET Core.\n\n\nIn the center pane, select&nbsp;ASP.NET Core Web Application.\n\n\nSelect&nbsp;OK.\n\n\n\n\n\n\n\n\n\nIn the&nbsp;New ASP.NET Core Web Application&nbsp;dialog:\n\n\n\n\nSelect&nbsp;Web Application.\n\n\nSelect&nbsp;Change Authentication.\n\n\n\n\n\n\n\n\n\nThe&nbsp;Change Authentication&nbsp;dialog appears.\n\n\n\n\nSelect&nbsp;Individual User Accounts.\n\n\nSelect&nbsp;OK&nbsp;to return to the&nbsp;New ASP.NET Core Web Application, then select&nbsp;OK&nbsp;again.\n\n\n\n\n\n\n\n\n\nVisual Studio creates the solution.\n\n\nRun the app locally\n\n\n\n\nChoose&nbsp;Debug&nbsp;then&nbsp;Start Without Debugging&nbsp;to run the app locally.\n\n\nClick the&nbsp;About&nbsp;and&nbsp;Contact&nbsp;links to verify the web application works.\n\n\n\n\n\n\n\n\n\n\n\nSelect&nbsp;Register&nbsp;and register a new user. You can use a fictitious email address. When you submit, the page displays the following error:\n\n\n\n\n\"Internal Server Error: A database operation failed while processing the request. SQL exception: Cannot open the database. Applying existing migrations for Application DB context may resolve this issue.\"\n\n\n\n\nSelect&nbsp;Apply Migrations&nbsp;and, once the page updates, refresh the page.\n\n\n\n\n\n\n\n\n\nThe app displays the email used to register the new user and a&nbsp;Log out&nbsp;link.\n\n\n\n\n\n\n\nDeploy the app to Azure\n\n\nClose the web page, return to Visual Studio, and select&nbsp;Stop Debugging&nbsp;from the&nbsp;Debug&nbsp;menu.\n\n\nRight-click on the project in Solution Explorer and select&nbsp;Publish…​.\n\n\n\n\n\n\n\nIn the&nbsp;Publish&nbsp;dialog, select&nbsp;Microsoft Azure App Service&nbsp;and click&nbsp;Publish.\n\n\n\n\n\n\n\n\n\nName the app a unique name.\n\n\nSelect a subscription.\n\n\nSelect&nbsp;New…​&nbsp;for the resource group and enter a name for the new resource group.\n\n\nSelect&nbsp;New…​&nbsp;for the app service plan and select a location near you. You can keep the name that is generated by default.\n\n\n\n\n\n\n\n\n\n\n\nSelect the&nbsp;Services&nbsp;tab to create a new database.\n\n\nSelect the green&nbsp;+&nbsp;icon to create a new SQL Database\n\n\n\n\n\n\n\n\n\n\n\nSelect&nbsp;New…​&nbsp;on the&nbsp;Configure SQL Database&nbsp;dialog to create a new database.\n\n\n\n\n\n\n\n\n\nThe&nbsp;Configure SQL Server&nbsp;dialog appears.\n\n\n\n\nEnter an administrator user name and password, and then select&nbsp;OK. Don’t forget the user name and password you create in this step. You can keep the default&nbsp;Server Name.\n\n\nEnter names for the database and connection string.\n\n\n\n\nNote\n\n\"admin\" is not allowed as the administrator user name.\n\n\n\n\n\n\n\n\n\nSelect&nbsp;OK.\n\n\n\n\nVisual Studio returns to the&nbsp;Create App Service&nbsp;dialog.\n\n\n\n\nSelect&nbsp;Create&nbsp;on the&nbsp;Create App Service&nbsp;dialog.\n\n\n\n\n\n\n\n\n\n\n\nClick the&nbsp;Settings&nbsp;link in the&nbsp;Publish&nbsp;dialog.\n\n\n\n\n\n\n\n\n\nOn the&nbsp;Settings&nbsp;page of the&nbsp;Publish&nbsp;dialog:\n\n\n\n\nExpand&nbsp;Databases&nbsp;and check&nbsp;Use this connection string at runtime.\n\n\nExpand&nbsp;Entity Framework Migrations&nbsp;and check&nbsp;Apply this migration on publish.\n\n\nSelect&nbsp;Save. Visual Studio returns to the&nbsp;Publish&nbsp;dialog.\n\n\n\n\n\n\n\n\n\nClick&nbsp;Publish. Visual Studio will publish your app to Azure and launch the cloud app in your browser.\n\n\nTest your app in Azure\n\n\n\n\nTest the&nbsp;About&nbsp;and&nbsp;Contact&nbsp;links\n\n\nRegister a new user\n\n\n\n\n\n\n\n\n\nUpdate the app\n\n\n\n\nEdit the&nbsp;Pages/About.cshtml&nbsp;Razor page and change its contents. For example, you can modify the paragraph to say \"Hello ASP.NET Core!\":\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRight-click on the project and select&nbsp;Publish…​&nbsp;again.\n\n\n\n\n\n\n\n\n\n\n\nAfter the app is published, verify the changes you made are available on Azure.\n\n\n\n\n\n\n\n\n\nClean up\n\n\nWhen you have finished testing the app, go to the&nbsp;Azure portal&nbsp;and delete the app.\n\n\n\n\nSelect&nbsp;Resource groups, then select the resource group you created.\n\n\n\n\n\n\n\n\n\n\n\nIn the&nbsp;Resource groups&nbsp;page, select&nbsp;Delete.\n\n\n\n\n\n\n\n\n\n\n\nEnter the name of the resource group and select&nbsp;Delete. Your app and all other resources created in this tutorial are now deleted from Azure.\n\n\n\n\n\n\n\n"}