{"type":"doc","filename":"devonfw-guide_devon4j.wiki_quarkus_getting-started-quarkus.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_quarkus_getting-started-quarkus.asciidoc_how-to-integrate-a-database","title":"How to Integrate a Database","breadcrumbs":["Java","Quarkus","Quarkus Quickstart"],"text":"How to Integrate a Database\n\nThe next step for our REST service would be to integrate a database to store the objects of the entity.\n\n\nWith Quarkus, adding a database can be easy, because Quarkus can take over the build-up and connection process.\nFirst, you should understand our guides on the concepts of working with data. Then, we will show how to integrate a database with Quarkus.\n\n\nData Principles Guides\n\n\nGeneral devon4j JPA guide\nTo get an insight into the general JPA usage, read the JPA guide containing a general explanation of the Java Persistence API.\n\n\nDifference to SpringData\nIf you have already worked with SpringData, this is also partially supported with Quarkus. This is explained in more detail in this SpringData Guide.\n\n\n\n\nDatabase Integration\n\n\nQuarkus zero config dev mode\nStarting with the database implementation in Quarkus, we recommend for beginners to use the DEV mode Zero Config Setup (Dev Services). This is especially great for testing the code without a database set up.\nQuarkus does all the work for you and configures a database and creates the database and tables (schemas) for you.\n\n\n\nConfiguration Properties\nA list of all database configuration properties for the Dev services\n\n\n\n\n\nIntegrate a simple Hibernate ORM database\nThe zero config setup only works with the Dev mode, itâ€™s comfortable in the first phases of the creation of your service but if the goal is to also get a deployable version, you have to create your own database and integrate it.\nThis Quarkus guide shows, how to integrate a Hibernate ORM database with an example service.\n\n\n\nConfiguration list for JDBC\nA list of all configuration that is possible with a JDBC configuration properties\n\n\n\n\n\nReactive CRUD application with Panache\nQuarkus unifies reactive and imperative programming.\nReactive is an architectural principle to build robust, efficient, and concurrent applications.\nFor an introduction into reactive and how Quarkus enables it, follow this Quarkus reactive architecture article and also the reactive quickstart.\nTo get started with reactive and implement reactive methods, you can follow the Quarkus reactive guide.\nThe reactive guide uses the Quarkus based implementation of a Hibernate ORM called Panache.\nThe implementation is not our first choice with devon4j and therefore not part of our recommendations, but to understand the reactive guide you can read the Hibernate ORM with Panache guide first to prevent possible problems following the guide.\n\n\n\n\n\n\n\nNote\n\n\n\nYou need an installed Docker version for the zero config setup.\n\n\n\n\n\n\nDatabase Migration\nFor schema-based databases, we recommend migrating databases with Flyway.\nIn that case, our general migration guide can give you an overview if you are not familiar with migration.\n.. Flyway guide for Quarkus\nThis Quarkus guide will show how to work with the Flyway extension in a Quarkus application.\nThis should be used if you start your own database and do not leave the creation to quarkus.\n\n\n\n"}