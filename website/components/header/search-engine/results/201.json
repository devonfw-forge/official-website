{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-rest.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-rest.asciidoc_jax-rs","title":"JAX-RS","breadcrumbs":["Java","General","REST"],"text":"JAX-RS\n\nFor implementing REST services we use the JAX-RS standard.\nAs payload encoding we recommend JSON bindings using Jackson.\nTo implement a REST service you simply add JAX-RS annotations.\nHere is a simple example:\n\n\n\n\n\n\n\nHere we can see a REST service for the business component imagemanagement. The method getImage can be accessed via HTTP GET (see @GET) under the URL path imagemanagement/image/{id} (see @Path annotations) where {id} is the ID of the requested table and will be extracted from the URL and provided as parameter id to the method getImage. It will return its result (ImageDto) as JSON (see @Produces annotation - you can also extend RestService marker interface that defines these annotations for JSON). As you can see it delegates to the logic component imagemanagement that contains the actual business logic while the service itself only exposes this logic via HTTP. The REST service implementation is a regular CDI bean that can use dependency injection.\n\n\n\n\n\nNote\n\n\nWith JAX-RS it is important to make sure that each service method is annotated with the proper HTTP method (@GET,@POST,etc.) to avoid unnecessary debugging. So you should take care not to forget to specify one of these annotations.\n\n\n\n\n\nService-Interface\n\nYou may also separate API and implementation in case you want to reuse the API for service-client:\n\n\n\n\n\n\n\n\nJAX-RS Configuration\n\nStarting from CXF 3.0.0 it is possible to enable the auto-discovery of JAX-RS roots.\n\n\nWhen the JAX-RS server is instantiated, all the scanned root and provider beans (beans annotated with javax.ws.rs.Path and javax.ws.rs.ext.Provider) are configured.\n\n\n\nREST Exception Handling\n\nFor exceptions, a service needs to have an exception facade that catches all exceptions and handles them by writing proper log messages and mapping them to a HTTP response with an corresponding HTTP status code.\nFor this, devon4j provides a generic solution via RestServiceExceptionFacade that you can use within your Spring applications. You need to follow the exception guide in order for it to work out of the box because the facade needs to be able to distinguish between business and technical exceptions.\nTo implement a generic exception facade in Quarkus, follow the Quarkus exception guide.\n\n\nNow your service may throw exceptions, but the facade will automatically handle them for you.\n\n\nThe general format for returning an error to the client is as follows:\n\n\n\n\n\n\n\n\nPagination details\n\nWe recommend to use spring-data repositories for database access that already comes with pagination support.\nTherefore, when performing a search, you can include a Pageable object.\nHere is a JSON example for it:\n\n\n\n\n\n\n\nBy increasing the pageNumber the client can browse and page through the hits.\n\n\nAs a result you will receive a Page.\nIt is a container for your search results just like a Collection but additionally contains pagination information for the client.\nHere is a JSON example:\n\n\n\n\n\n\n\nThe totalElements property contains the total number of hits.\nThis can be used by the client to compute the total number of pages and render the pagination links accordingly.\nVia the pageable property the client gets back the Pageable properties from the search request.\nThe actual hits for the current page are returned as array in the content property.\n\n\n\n\n"}