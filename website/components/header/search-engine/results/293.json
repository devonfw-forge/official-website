{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-rabbitmq","title":"How to: RabbitMQ","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: RabbitMQ\n\nConfigure the Server\n\nThere are several methods to configure the RabbitMQ server, depending on your operating system.\n\n\nIn this tutorial, we will show you how to run a server via Docker, for testing purposes. If you want further information on how to configure and install the RabbitMQ server in a specific operating system, please consult the official RabbitMQ documentation\n\n\nFirst you must have docker installed on your machine. Run the following command to start the server:\n\n\n\n\n\n\n\nThis command shows several options parameters:\n\n\n\n\n-it: To create an interactive container\n\n\n--rm: To automatically clean up the container and remove the file system when the container exits.\n\n\n--name: The name of the container\n\n\n-e: Environment variables\n\n\n-p: To expose a container’s internal port\n\n\n\n\nThe server will listen on port 5672, and you may access the management plugin at the following url:\n\n\nhttp://localhost:15672/\n\n\n\n\n\nFigure 76. RabbitMQ Management Plugin\n\n\nYou may customize your Docker container as you like, please see the official Docker  image documentation for more information.\n\n\n\nConfigure the Client\n\n\n\nInstall the package in your solution using the Package Manager Console:\n\n\n\n\n\n\n\nCreate a Configuration static class in order to add the RabbitMqHandler services, for example:\n\n\n\n\n\n\n\nAdd the following lines in the Program.cs class:\n\n\n\n\n\n\n\nConfigure the component in the file appsettings.{environment}.json, for example:\n\n\n\n\n\n\nWhere:\n\n\n\n\nEnableRabbitMq: True for enabling the RabbitMQ component\n\n\nHosts: Host configuration, which might be a list of multiple hosts\n\n\nVirtualHost:  Virtual host’s name\n\n\nUserName: User’s name\n\n\nPassword: password for connecting\n\n\nRequestedHeartbeat: The heartbeat timeout setting specifies how long the peer TCP connection should be considered unreachable by RabbitMQ and client libraries. Should be set to zero for no heartbeat.\n\n\nPrefetchCount:  The amount of messages transmitted by RabbitMQ before EasyNetQ sends a response.\n\n\nPublisherConfirms: True for enabling Publisher confirms that simply speaking is an AMQP extension that sends a callback when your message is successfully received by the broker.\n\n\nPersistentMessages: When set to true, RabbitMQ will retain messages to disk and survive server restarts. When set to false, performance increases might be expected.\n\n\nPlatform: The value given here will be shown in the RabbitMQ management interface.\n\n\nTimeOut: Range from 0 to 65535. Format is in seconds. For infinite timeout please use 0. Throws System.TimeoutException when value exceeded.\n\n\nBackup: Configuration of Message’s BackUp. Its default database is LiteDB.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nCheck the RabbitMQ Component section for examples of the component’s implementation and essential classes.\n\n\n\n\n\n\nReferences\n\n\n\nRabbitMQ Documentation\n\n\nDocker docs\n\n\n\n\n\n\n"}