{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-aws-lambda-function","title":"How to: AWS Lambda Function","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: AWS Lambda Function\n\nIn this part of the document you are going to learn how to develop and deploy AWS Lambda functions using devon4net.\n\n\n\n\n\nNote\n\n\nWe will make use of the devon4net AWS template. So please make sure you have read its documentation to know where everything is placed.\n\n\n\n\n\nWhat is a Lambda Function?\n\nA Lambda Function is a function or piece of code that runs in AWS without having to configure or manage a server. You can setup your code and deploy it to the AWS Lambda Service and can trigger and be triggered from other AWS Services.\n\n\nIt supports numerous programming languages ​​among which is .NET.\n\n\n\nInstall the AWS template and Visual Studio AWS tools\n\nIn devon4Net you have some AWS templates available, to install them you can run the following command.\n\n\n\n\n\n\n\nAfter this you will be able to create a project using the template provided by devon4net that include the components you need to start developing your first lambda function.\n\n\nYou will also need to install the AWS tools for Visual Studio. Run the following command to install the tools:\n\n\n\n\n\n\n\nOr check if a new version is available in case you have already installed it:\n\n\n\n\n\n\n\n\nCreate a project using the template\n\nNow that everything is installed you can start by creating your project using the template, for that:\n\n\n\n\nOpen Visual Studio 2022 and select create a new project.\n\n\nLook for the devon4net AWS Template, select it and click next.\n\n\n\n\nFigure 42. Create a new AWS project using devon4net\n\n\n\nChoose a name and project location and create it.\n\n\n\n\nFigure 43. Create a new AWS project using devon4net\n\n\n\n\n\nThis three steps will create the project where we will develop our function. For this tutorial, we will focus in the Lambda part of the template. That means, that we will only be using the Devon4Net.Application.Lambda project present in the template:\n\n\n\n\n\nFigure 44. Devon4Net.Application.Lambda file structure\n\n\nAs you can see in the screenshot above, you already have some example functions that are already working:\n\n\n\n\nSnsManagement: Example with Amazon Simple Notification Service (SNS)\n\n\nSqsManagement: Example with Amazon Simple Queue Service (SQS)\n\n\nStringManagement: Example processing some operations over strings\n\n\n\n\nEach directory has the following subdirectories:\n\n\n\n\nHandlers: Implementation of the functions.\n\n\nFunctions: Function definition for the services.\n\n\nDto: Objects used to input and output the data in the functions.\n\n\n\n\n\n\n\nNote\n\n\nIf you want to learn more about what this part of the template includes you can read the Template Documentation.\n\n\n\n\n\n\nDevelop your first function\n\nWe will follow the same file structure than the examples that are already in the template. For the example we will create a Calculator that will do a mathematical division of two numbers, dividend and divisor; and will produce two other numbers, quotient and remainder.\n\n\nStep 1 - Create Input and output class\n\nAs the example says, we will need to input dividend and divisor, and output quotient and remainder, so lets create CalculatorInputDto and CalculatorOutput objects in CalculatorManagement/Dto.\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2 - Create Function Handler\n\nTo create the function handler you will need to implement the FunctionHandler method available thanks to ILambdaEventHandler&lt;TInput, TOutput&gt; interface from Devon4Net.Infrastructure.AWS.Lambda component.\n\n\n\n\n\nNote\n\n\nTo learn more about it, please read the component documentation.\n\n\n\n\n\nThis method will contain all the logic necessary that will be aplied to TInput to produce TOutput, being CalculatorInputDto and CalculatorOutputDto respectively.\n\n\nTo follow the structure it will be placed in CalculatorManagement/Handlers.\n\n\n\n\n\n\n\n\nStep 3 - Add Function to Services\n\nNow we need to create our Function class that will inherit from LambdaFunction&lt;TInput, TOutput&gt; also available thanks to the Devon4Net.Infrastructure.AWS.Lambda component.\n\n\nAnd we will also need to implement the abstract method ConfigureServices as follows:\n\n\n\n\n\n\n\nIt will be placed in CalculatorManagement/Functions to follow the same structure.\n\n\n\nStep 4 - Configure it in serverless.template\n\nAfter the previous three steps we will have something like this:\n\n\n\n\n\nFigure 45. Calculator function file structure\n\n\nNow we need to configure it so that the function is interpreted by AWS Lambda service as a Lambda function. For that we have a template defined as serverless.template.\nIn that file we will find the configuration for all the functions, where we will need to add the following configuration for the CalculatorManagementFunction:\n\n\n\n\n\n\n\nBefore trying everything, as we are not using neither AWS Secrets Manager nor AWS Parameter Store, navigate to appsettings.json and make sure the following variables are set to false:\n\n\n\n\n\n\n\n\nStep 5 - Try it\n\nTo try that everything works fine in our local we will be using Mock Lambda Test Tool 6.0 from the AWS toolkit that we installed earlier.\n\n\nFor that, right click in the project (1) and select it as startup project (2). Then execute it by pressing the green button which says Mock Lambda Test Tool 6.0 (3).\n\n\n\n\n\nFigure 46. Execute the lambda function\n\n\nNow navigate to http://localhost:5050/ using your favorite web browser (1) and select the CalculatorFunction in the UI (2). You can put your desired numbers in the form of a JSON in the box (3), press Execute (4) and check the results (5).\n\n\n\n\n\nFigure 47. Try it\n\n\n\n\nReferences\n\n\n\nAWS Lambda\n\n\nAmazon Simple Queue Service (SQS)\n\n\nAmazon Simple Notification Service (SNS)\n\n\n\n\n\n\n"}