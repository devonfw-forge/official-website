{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-deploy-aws-lambda-functions","title":"How to: Deploy AWS Lambda Functions","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Deploy AWS Lambda Functions\n\nIn this section, you are going to learn how to deploy AWS Lambda functions using AWS CLI, AWS console portal (web), and with the visual studio plugin.\n\n\n\n\n\nNote\n\n\nIf you want to know more about developing lambda fuctions, please check the previous section.\n\n\n\n\n\nInstall Amazon Lambda Tools\n\nYou will need to install the AWS Lambda tools. Run the following command to install the tools:\n\n\n\n\n\n\n\nOr check if a new version is available in case you have already installed it:\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nWorking with AWS lambda fuctions requires an AWS account, remember that this type of operations may incur a cost.\n\n\n\n\n\n\nDeployment with AWS console portal (web)\n\nStep 1 - Create publish file\n\nNavigate to the application folder, run a terminal and execute the following command:\n\n\n\n\n\n\n\nThe file will be stored in the following path:\n\n\n{Your-Project-Path}\\bin\\Release\\{.Net-Version}\\publish\n\n\nHere’s an example: :\n\n\n\n\n\nFigure 83. Lambda AWS publish path example\n\n\n\nStep 2 - Create the lambda fuction in the AWS Lambda dashboard\n\nTo create the lambda fuction visit the AWS lambda Dashboard.\n\n\n\n\n\nWarning\n\n\nRemember to choose your desired region, service costs may depend on the selected region\n\n\n\n\n\nThen, in the upper right corner of the dashboard, click the Create function button.\n\n\n\n\n\nFigure 84. AWS Lambda dashboard\n\n\nIn the following page, you must provide a function name (1) and choose the appropriate runtime (2) for your project, which in our case is .Net 6.\nThen click in the Create function button (3).\n\n\n\n\n\nFigure 85. Create function configuration\n\n\n\nStep 3 - Upload .zip publish file\n\nWhen we have finished creating our function, we must submit the .zip file that we prepared in step 1:\n\n\n\n\n\nFigure 86. Function configuration\n\n\n\nStep 4 - Add the Lambda Handler\n\nTo add the lambda handler, click the Edit button in the Runtime settings section of the code tab.\n\n\n\n\n\nFigure 87. AWS Lambda dashboard\n\n\nIn the next page, ensure that you have selected the right runtime for your project (1), and then add the Handler (2), which must have the following structure:\n\n\nAssembly::Namespace.ClassName::MethodName\n\n\nIn our example:\n\n\nDevon4Net.Application.Lambda::Devon4Net.Application.Lambda.Functions.CalculatorFunction::FunctionHandler\n\n\n\n\n\nWarning\n\n\nThe handler’s name cannot exceed 128 characters.\n\n\n\n\n\nThen click in the Save button(3).\n\n\n\n\n\nFigure 88. Edit runtime settings\n\n\n\nStep 5 - Test it\n\nYou may test your lambda function by selecting the test tab (1) and providing the function’s input parameters (2) in .JSON format:\n\n\n\n\n\nFigure 89. The AWS Lambda Dashboard’s Test tab\n\n\nOnce the information has been provided, click the Test button in the upper right corner of the page (3).\n\n\nThe output should look like this:\n\n\n\n\n\nFigure 90. Results of AWS Lambda function execution\n\n\n\n\nDeployment with AWS CLI\n\nFor deploying the lambda function using the Amazon Web Services CLI (Command Line Interface) first you will need to install the tool. You can check if you already have it by running the following command in your preferred terminal:\n\n\n\n\n\n\n\nIf you don’t see any output, please refer to the following guide for Installing or updating the latest version of the AWS CLI.\n\n\nStep 1 - Configure your AWS CLI\n\nBefore using the CLI, you will need to configure it so that it can be linked to your aws account. For that, run the following command:\n\n\n\n\n\n\n\nYou will need to input some security credentials that you will be able to find in your Security Credentials section in your AWS Dashboard.\n\n\n\nStep 2 - Create Role with basic policy\n\nCreate the execution role that gives your function permission to access AWS resources.\n\n\nIn the following example, trust-policy.json is a file in the current directory. This trust policy allows Lambda to use the role’s permissions and contains the following data:\n\n\n\n\n\n\n\nTo create an execution role with the AWS CLI and the previous trust policy, use the following command:\n\n\n\n\n\n\n\nTo add permissions to the role, use the attach-policy-to-role command. Start by adding the AWSLambdaBasicExecutionRole managed policy, which adds permissions to write logs to CloudWatch Logs.\n\n\n\n\n\n\n\n\nStep 3 - Create publish file\n\nNavigate to the application folder, run a terminal and execute the following command:\n\n\n\n\n\n\n\nThe file will be stored in the following path:\n\n\n{Your-Project-Path}\\bin\\Release\\{.Net-Version}\\publish\n\n\nHere’s an example: :\n\n\n\n\n\nFigure 91. Lambda AWS publish path example\n\n\n\nStep 4 - Deploy the function\n\nOpen a terminal in the path of your lambda .zip file (result of the previous step). For the next command you will need the following data:\n\n\n\n\n{function-name}: The name you want for the function. e.g AWSCalculator\n\n\n{zip-name}: The name of the zip that contains the publish files. e.g Devon4Net.Application.Lambda.zip\n\n\n{handler}: The handler route of the lambda function folowing the form Assembly::Namespace.ClassName::MethodName. e.g Devon4Net.Application.Lambda::Devon4Net.Application.Lambda.Functions.CalculatorFunction::FunctionHandler\n\n\n{runtime}: The runtime environment for your function to run on. e.g dotnet6\n\n\n{account-id}: The account id from your AWS Dashboard.\n\n\n\n\nTo deploy the function run the following command replacing the previous parameters with your data.\n\n\n\n\n\nWarning\n\n\nThe handler’s name cannot exceed 128 characters.\n\n\n\n\n\n\n\n\n\n\nFor our example, the command will look like this:\n\n\n\n\n\n\n\nYou will see a JSON output with the result of the deployment if everything worked properly. You can also check if the deployment was done correctly by listing your lambda functions:\n\n\n\n\n\n\n\n\nStep 5 - Test the function\n\nTo test the function you can run the invoke command that will receive an input.json file containing the input data for the lambda function, and will output the result in output.json. The input file will look something like this:\n\n\n\n\n\n\n\nFor our example calculator, run following the command in the same directory than the input.json:\n\n\n\n\n\n\n\nIf everything has gone according to plan, your output.json file will look like this:\n\n\n\n\n\n\n\n\n\nDeployment with AWS Toolkit for Visual Studio\n\nFor deploying the lambda function using the AWS Toolkit for Visual Studio first you will need to install the plugin.\n\n\nFor installing it, please refer to the following documentation Install the AWS Toolkit for Visual Studio.\n\n\nStep 1 - Set up your AWS Account in Visual Studio\n\nThe first thing that you have to do, is configure your AWS Credentials. For that you must navigate to:\n\n\nView &gt; AWS Explorer\n\n\n\n\n\nFigure 92. Visual Studio AWS toolkit\n\n\nAdd a new profile for AWS credentials as showing on the image below:\n\n\n\n\n\nFigure 93. Visual Studio AWS toolkit\n\n\nSet the credentials needed:\n\n\n\n\n\nFigure 94. Visual Studio AWS toolkit\n\n\nYou may find the Access Key ID (2) and the Secret Access Key (3) at AWS Dashboard.\n\n\n\nStep 2 - Create publish file\n\nNavigate to the application folder, run a terminal and execute the following command:\n\n\n\n\n\n\n\nThe file will be stored in the following path:\n\n\n{Your-Project-Path}\\bin\\Release\\{.Net-Version}\\publish\n\n\nHere’s an example: :\n\n\n\n\n\nFigure 95. Lambda AWS publish path example\n\n\n\nStep 3 - Create a new function\n\nReturn to the AWS Explorer, right click in AWS Lambda (1) and select the Create New Function option (2)\n\n\n\n\n\nFigure 96. Visual Studio AWS toolkit\n\n\nIn the next screen you must provide the details about the function that you want to upload\n\n\n\n\n\nFigure 97. Visual Studio AWS toolkit\n\n\n\n\nSource Code: Refers to the .zip file that you created in the previous step\n\n\nFunction Name: The name that you want for your function\n\n\nHandler’s name: This parameter must follow the next structure:\n\n\n\n\nAssembly::Namespace.ClassName::MethodName\n\n\n\n\n\nWarning\n\n\nThe handler’s name cannot exceed 128 characters.\n\n\n\n\n\nOnce the information has been provided, click the Next button.\n\n\n\nStep 4 - Create Role with basic policy\n\nIn the next step, we’ll set up a Role.\nChoose an existing role or create one if you don’t have one already.\n\n\n\n\n\n\n\nThen click the Upload button.\n\n\n\nStep 5 - Test the function\n\nNow you can test your lambda function providing the function’s input parameters (1) in JSON format:\n\n\n\n\n\nFigure 98. Visual Studio AWS toolkit\n\n\nOnce the information has been provided, click the Invoke button (2) to run the function.\n\n\nYou can see the Response (3) and the Log output (4)\n\n\n\n\nReferences\n\n\n\nAWS Lambda\n\n\nLambda runtimes\n\n\nUsing Lambda with the AWS CLI\n\n\nAWS Toolkit for Visual Studio\n\n\n\n\n\n\n"}