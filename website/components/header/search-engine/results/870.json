{"type":"doc","filename":"ide.wiki_devonfw-guide_ide.wiki_usage.asciidoc_2.html","anchor":"ide.wiki_devonfw-guide_ide.wiki_usage.asciidoc_2","title":"Admin","breadcrumbs":["devonfw-ide","Usage","Admin"],"text":"Admin\n\nYou can easily customize and configure devonfw-ide for the requirements of your project.\nIn order to do so, you need to create your own project-specific settings git repository and provide the URL to all developers for the setup.\nWith tools such as gitlab, bitbucket or github every developer can easily propose changes and improvements.\nHowever, we suggest that one team member is responsible to ensure that everything stays consistent and works.\nWe will call this person the ide-admin of your project.\n\n\nThe following are the suggested step-by-step instructions how an ide-admin should prepare devonfw-ide for his new project:\n\n\n\n\nFork ide-settings to a git repository specific for your project (e.g. a new project in the gitlab of your production-line instance). In case you are using github, all you need to do is use the Fork button. In other cases simply create a new and empty git repository and clone this to your machine. Then add the default ide-settings as origin, fetch and pull from it:\n\n\n\n\n\n\nNow you should have a full fork as a copy of the settings git repo with all its history that is ready for upstream merges.\n\n\n\nStudy the structure of this git repository to understand where to find which configuration.\n\n\nStudy the configuration and understand that general settings can be tweaked in the toplevel devon.properties file of your settings git repository.\n\n\nConfigure the tools and their versions for your project. Here is an example:\n\n\n\n\n\n\nThis way you will take over control of the tools and their versions for every developer in your project team and ensure that things get reproducible.\n\n\n\nIn case you need a proprietary or unsupported tool, you can study how to include custom tools.\n\n\nIn case you have very restrictive policies about downloading tools from the internet, you can create and configure a software repository for your project or company.\n\n\nSome of the tools (especially the actual IDEs) allow extensions via plugins. You can customize them to your needs for eclipse, VS code, or intelliJ.\n\n\nIn your settings git repository you will find a projects folder. Here you will find configurations files for every git project relevant for your actual project. Feel free to create new projects for your needs and delete the devonfw specific default projects. The projects documentation will explain you how to do this.\n\n\nFor every IDE you will also find an according folder in your settings git repository. Here are the individual configuration settings for that IDE. You can change them by directly editing the according configuration files directly with a text-editor in your settings git repository. However, this is a really complex way and will take you a lot of time to find the right file and property to tweak for your actual need. Instead we suggest to study\nhow to customize IDE specific settings.\n\n\nYou may also create new sub-folders in your settings git repository and put individual things according to your needs. E.g. you could add scripts for greasemonkey or tampermonkey, as well as scripts for your database or whatever may be useful and worth to share in your team. However, to share and maintain knowledge we recommend to use a wiki instead.\n\n\nYou may want to customize the Eclipse spellchecker dictionary for your project and your language.\n\n\n\n\nAll described in the above steps (except the first one) can be used to manage and update the configuration during the project lifecycle.\nHowever, when you have done changes especially in a larger project, please consider the following best-practices to avoid that a large teams gets blocked by a non-functional IDE:\n\n\n\n\nCommit your changes to a feature-branch.\n\n\nFirst test the changes yourself.\n\n\nIf all works as expected, pick a pilot user of the team to test the changes from the feature branch (go to settings folder, git fetch, git checkout -t origin/feature/«name», devon ide update).\n\n\nOnly after that works well for a couple of days, inform the entire team to update.\n\n\n\n\n"}