{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto-devonfw-ide-CobiGen-PoC-E2E.asciidoc","title":"End to End POC Code generation using Entity class","breadcrumbs":[],"text":"End to End POC Code generation using Entity class\n\nThis article helps to create a sample application using CobiGen.\n\n\nPrerequisites\n\nDownload and install devonfw IDE by this tutorial.\n\n\n\nSteps to create a Sample Project using CobiGen\n\nThe HOW_TO is divided in 2 parts:\n\n\n\n\nBE-Backend generator (DB + DAO + services)\n\n\nFE-Frontend generator (Web App Angular + Ionic App)\n\n\n\n\n\n\n\nSo, ready to go! We’re going to start with the BE part.\n\n\nBackend\n\n1.Under your path installation of devonfw, you can find the eclipse-main.bat script. To run it, execute installation_path\\eclipse-main.bat.This will open eclipse.\n\n\n2.Create a project: Navigate in the folder containing the devonfw installation and then to workspaces/main. Right-click and choose \"Open devonfw CMD shell here\". Next, launch this command in the shell:\n\n\n\n\n\n\n\n3.In eclipse, import the project as a maven project as specified in the image below:\n\n\n\n\n\n4.Click FINISH. Now you should have the following 4 projects:\n\n\n\n\n\n5.Create a new SQL file V0002__CreateTables_myapp.sql inside `myapp-core` , under the folder path `/myapp-core/src/main/resources/db/migration/1.0` and insert the following script:\n\n\n\n\n\n\n\nWARNING 1: In this folder there is only one file (0001). You have to add the other files in progressive number order (i.e. 0002)!\nWARNING 2: There are 2 underscores in the name!\n\n\n\n\n\n6.Create another SQL file analogously named V0003__PopulateTables-myapp.sql in the same folder and add following script about the INSERT to populate the table created before. Please note the warnings from the previous step here, as well.\n\n\n\n\n\n\n\n\n\n\n7.We will now create the Entity Class for the code generation. For this, create a package named com.example.domain.myapp.employeemanagement.dataaccess.api in the folder `myapp-core/src/main/java`.\nWARNING: It’s important to follow this naming convention to ensure CobiGen is working properly.\n\n\n\n\n\nNow create a new class named EmployeeEntity in this package and paste the code below to turn it into a JPA Entity.\n\n\n\n\n\n\n\n8.Generate getters and setters for all attributes, as you can see in the image below:\n\n\ngetter &amp; setter\">\ngetter &amp; setter\">\n\n\n9.Now we can use CobiGen to generate code! First, right-click in the package explorer on EmployeeEntity.java → CobiGen  and select Update Template. Next, right-click on EmployeeEntity.java → CobiGen → Generate and tick the boxes as can be seen in the picture:\n\n\n\n\n\n10.Click on Finish to complete the process. The entire BE layer structure including CRUD operation methods was auto generated.\nSome classes are generated in the API part (`myapp-api`), e.g. interfaces, as shown below:\n\n\n\n\n\nOther classes are generated in the core part (`myapp-core`), like implementations, as shown below:\n\n\n\n\n\n11.The last step is to add the cross-domain process, as we are developing the JavaScript client and the server application separately. For this, we need to prepare the server side to accept requests from other domains, covering the following points:\n\n\n\n\nAccept request from other domains.\n\n\nAccept devonfw used headers like X-CSRF-TOKEN or correlationId.\n\n\nBe prepared to receive secured request (cookies).\n\n\n\n\nAdd these two kind of dependencies in the pom.xml of the `myapp-core` folder, at the end of the list of dependencies:\n\n\n\n\n\n\n\n\n\n\n12.Add these properties in your application.properties file, in the myapp-core folder in the resources/config:\n\n\n\n\n\n\n\n\n\n\n13.To check if the BE layer has been generated properly, start the server by right-clicking on `SpringBootApp.java` → run as → Java Application. If it looks like the image below, the BE part is done!\n\n\n\n\n\n\n\n\nOptional step:\n14.To test if the Backend works properly, we perform a REST service test! For this, we use Postman. You can download it here.\n\n\nFirst send a POST request for the body with the URL [source, URL].\n\n\n\n\n\n\n\nUnder Body, insert the JSON containing\n\n\n\n\n\n\n\nClick on send. \"Status:200 OK\" means it worked.\nNext, we create a new request, this time  GET type with the URL\n\n\n\n\n\n\n\nClick on send. If you get \"Status:200 OK\" again and see employee \"John Doe\" as you can see in the image below, the Backend works fine!\n\n\n\n\n\n\nFrontend\n\nLet’s start with the Frontend! We want to create an Angular Web App:\n\n\n1.To generate angular structure, download or clone devon4ng-application-template from\n\n\n\n\n\n\n\n\n\n\nIMPORTANT if you download the zip of the source code, the name of the app MUST BE devon4ng-application-template. Extract it into your devonfw folder, under workspaces/main.\n\n\n2.After downloading the APP, open the application in Eclipse. For this, right click on the left part of Eclipse and click \"Import\"\n\nThen choose \"Projects from Folder or Archive\":\n\nSelect the folder containing the Angular FE Application, under workspaces/main.Click on Finish after all dependencies have been loaded.\n\nNow, you should have a structure like this:\n\n\n\n3.Right click on EmployeeEto.java file in the package com.example.domain.myapp.employeemanagement.logic.api.to, in the BE part (`myapp-api module`). Choose Cobigen → Generate and select the options as seen in the screenshot and click on Finish:\n\n\n\n\n\n4.The entire ANGULAR structure has been auto generated and the generated code was merged into already existing code.\n\n\nee layer\">\n\n\nThe app-routing.module.ts file (in src/app) should correspond to the code below, so copy the code and replace the existing content in your file with this:\n\n\n\n\n\n\n\n5.To make  the Employee Grid in you FE application visible, you have to replace the code in nav-bar.component.html with the code below:\n\n\n\n\n\n\n\n6.Open the devon CMD shell and execute devon npm install in workspaces/main/devon4ng-application-template, which will download all the required libraries.\n\n\n7.Check in the file environment.ts (in src/app/environments) if the server path is correct.\n\n\n\n\n\nThe values PATH, TCP port etc. in application.properties should match the image below. Set the security field to CSRF , if it is not configured this way already\n\n\n\n\n\n\n\n\n\n\n8.For the last steps, the BE server should be running. Then run devon ng and then devon ng serve -o to start the Angular Application, in a CMD shell in your application folder (workspaces/main/devon4ng-application-template).\n\n\n\n\n\n9.If the command execution is successful, the screen shown below will appear and you would be automatically redirected to the URL:\n\n\n\n\n\n\n\n\n\n\nTo log into the web application, you can use the credentials admin for user and for password.\n\n\nNow the ANGULAR WebApp is done!\n\n\n\n\n\n\n"}