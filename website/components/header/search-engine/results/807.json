{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_test-framework-modules.html","anchor":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_core-test-module","title":"Core Test Module","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Test Framework Modules"],"text":"Core Test Module\n\n\nCore Test Module\n\nWhat is Core Test Module\n\n\n\n\n\n\n\nCore Test Module Functions\n\n\n\nTest reports with logs and/or screenshots\n\n\nTest groups/tags\n\n\nData driven approach\n\n\nTest case parallel execution\n\n\nBDD - Gherkin - Cucumber approach\n\n\nRun on independent Operating Systems\n\n\nExternalize test environment (DEV, QA, SIT, PROD)\n\n\nEncrypting sensitive data\n\n\n\n\n\nHow to start?\n\nRead: Framework Test Class\n\n\n\n\nAllure Logger → BFLogger\n\nIn Allure E2E Test Framework you have ability to use and log any additional information crucial for:\n\n\n\n\ntest steps\n\n\ntest exection\n\n\npage object actions, and many more.\n\n\n\n\nWhere to find saved logs\n\nEvery logged information is saved in a separate test file, as a result of parallel tests execution.\n\n\nThe places they are saved:\n\n\n\n\nIn test folder C:\\Allure_Test_Framework\\allure-app-under-test\\logs\n\n\nIn every Allure Test report, logs are always embedded as an attachment, according to test run.\n\n\n\n\n\nHow to use logger:\n\n\n\nStart typing\n\nBFLogger\n\n\n\nThen type . (dot)\n\n\n\n\n\nType of logger:\n\n\n\nBFLogger.logInfo(\"Your text\") - used for test steps\n\n\nBFLogger.logDebug(\"Your text\") - used for non official information, either during test build process or in Page Object files\n\n\nBFLogger.logError(\"Your text\") - used to emphasize critical information\n\n\n\n\n\n\n\n\n\nConsole output:\n\n\n\n\n\n\n\n\n\nAllure Reports\n\n\n\n\n\n\nAllure is a tool designed for test reports.\n\n\nGenerate report - command line\n\nYou can generate a report using one of the following commands:\n\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nA report will be generated into temp folder. Web server with results will start. You can additionally configure the server timeout. The default value is \"3600\" (one hour).\n\n\nSystem property allure.serve.timeout.\n\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nA report will be generated tо directory: target/site/allure-maven/index.html\n\n\nNOTE: Please open index.html file under Firefox. Chrome has some limitations to presenting dynamic content. If you want to open a report with a Chromium based Web Browser, you need to launch it first with --allow-file-access-from-files argument.\n\n\n\nGenerate report - Eclipse\n\nA report is created here allure-app-under-test\\target\\site\\allure-report\\index.html\n\n\nNOTE: Please open index.html file under Firefox. Chrome has some limitations to presenting dynamic content. If you want to open a report with a Chromium based Web Browser, you need to launch it first with --allow-file-access-from-files argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate report - Jenkins\n\nIn our case, we’ll use the Allure Jenkins plugin. When integrating Allure in a Jenkins job configuration, we’ll have direct access to the build’s test report.\n\n\n\n\n\n\n\nThere are several ways to access the Allure Test Reports:\n\n\n\n\nUsing the \"Allure Report\" button on the left navigation bar or center of the general job overview\n\n\nUsing the \"Allure Report\" button on the left navigation bar or center of a specific build overview\n\n\n\n\nAfterwards you’ll be greeted with either the general Allure Dashboard (showing the newest build) or the Allure Dashboard for a specific (older) build.\n\n\n\nAllure dashboard\n\n\n\n\n\n\nThe Dashboard provides a graphical overview on how many test cases were successful, failed or broken.\n\n\n\n\nPassed means, that the test case was executed successfully.\n\n\nBroken means, that there were mistakes, usually inside of the test method or test class. As tests are being treated as code, broken code has to be expected, resulting in occasionally broken test results.\n\n\nFailed means that an assertion failed.\n\n\n\n\n\nDefects\n\nThe defects tab lists out all the defects that occurred, and also descriptions thereof. Clicking on a list item displays the test case which resulted in an error. Clicking on a test case allows the user to have a look at the test case steps, as well as Log files or Screenshots of the failure.\n\n\n\nGraph\n\nThe graph page includes a pie chart of all tests, showing their result status (failed, passed, etc.). Another graph allows insight into the time elapsed during the tests. This is a very useful information to find and eliminate possible bottlenecks in test implementations.\n\n\n\n\n\n\n\n\n\nWhy join Test Cases in groups - Test Suites\n\n\n\n\n\n\nRegresion Suite:\n\nRegression testing is a type of software testing which verifies that software which was previously developed and tested still performs the same way after it was changed or interfaced with another software.\n\n\n\n\nSmoke\n\n\nBusiness vital functionalities\n\n\nFull scope of test cases\n\n\n\n\n\nFunctional Suite:\n\n\n\nSmoke\n\n\nBusiness function A\n\n\nBusiness function B\n\n\n\n\n\nSingle Responsibility Unit:\n\n\n\nSingle page\n\n\nSpecific test case\n\n\n\n\n\n\nHow to build a Test Suite based on tags\n\nStructure of the Test Suite\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n@RunWith(JUnitPlatform.class) - use Junit5 runner\n\n\n@IncludeTags({\"TestsTag1\"}) - search all test files with the tag \"TestsTag1\"\n\n\n@ExcludeTags({\"TagToExclude\"}) - exclude test files with the tag \"TagToExclude\"\n\n\n@SelectPackages(\"com.capgemini.mrchecker.core.groupTestCases.testCases\") - search only test files in \"com.capgemini.mrchecker.core.groupTestCases.testCases\" package\n\n\npublic class TS_Tag1 - the name of the Test Suite is \"TS_Tag1\"\n\n\n\n\nMost commonly used filters to build a Test Suite are ones using:\n\n\n\n\n@IncludeTags({ })\n\n\n@ExcludeTags({ })\n\n\n\n\nExample:\n\n\n\n\n@IncludeTags({ \"TestsTag1\" }) , @ExcludeTags({ }) → will execute all test cases with the tag TestsTag1\n\n\n@IncludeTags({ \"TestsTag1\" }) , @ExcludeTags({ \"SlowTest\" }) → will execute all test cases with tag \"TestsTag1\" although it will exclude from this list the test cases with the tag \"SlowTest\"\n\n\n@IncludeTags({ }) , @ExcludeTags({ \"SlowTest\" }) → It will exclude test cases with the tag \"SlowTest\"\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n@RunWith(WildcardPatternSuiteBF.class) - search for test files under /src/test/java\n\n\n@IncludeCategories({ TestsTag1.class }) - search for all test files with the tag \"TestsTag1.class\"\n\n\n@ExcludeCategories({ }) - exclude test files. In this example, there is no exclusion\n\n\n@SuiteClasses({ \"**/*Test.class\" }) - search only test files, where the file name ends with \"&lt;anyChar/s&gt;Test.class\"\n\n\npublic class TS_Tag1 - the name of the Test Suite is \"TS_Tag1\"\n\n\n\n\nMost commonly used filters to build Test Suite are ones using:\n\n\n\n\n@IncludeCategories({ })\n\n\n@ExcludeCategories({ })\n\n\n\n\nExample:\n\n\n\n\n@IncludeCategories({ TestsTag1.class }) , @ExcludeCategories({ }) → will execute all test cases with the tag TestsTag1.class\n\n\n@IncludeCategories({ TestsTag1.class }) , @ExcludeCategories({ SlowTest.class }) → will execute all test cases with the tag \"TestsTag1.class\" although it will exclude from this list the test cases with the tag \"SlowTest.class\"\n\n\n@IncludeCategories({ }) , @ExcludeCategories({ SlowTest.class }) → will execute all test cases from /src/test/java, although it will exclude from this list the test cases with the tag \"SlowTest.class\"\n\n\n\n\n\nStructure of Test Case\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n@TestsTag1, @TestsSmoke, @TestsSelenium - list of tags assigned to this test case - \"TestsTag1, TestsSmoke, TestSelenium\" annotations\n\n\npublic class FristTest_tag1_Test - the name of the test case is \"FristTest_tag1_Test\"\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n@Category({ TestsTag1.class, TestsSmoke.class, TestSelenium.class }) - list of tags / categories assigned to this test case - \"TestsTag1.class, TestsSmoke.class, TestSelenium.class\"\n\n\npublic class FristTest_tag1_Test - the name of the test case is \"FristTest_tag1_Test\"\n\n\n\n\n\nStructure of Tags / Categories\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\nTag name: TestsTag1 annotation\n\n\n\n\n\n\n\nTag name: TestsSmoke annotation\n\n\n\n\n\n\n\nTag name: TestSelenium annotation\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\nTag name: TestsTag1.class\n\n\n\n\n\n\n\nTag name: TestsSmoke.class\n\n\n\n\n\n\n\nTag name: TestSelenium.class\n\n\n\n\n\n\n\n\n\nHow to run Test Suite\n\nTo run a Test Suite you perform the same steps as you do to run a test case\n\n\nCommand line\n\n\nSince mrchecker-core-module version 5.6.2.1:\n\n\nJUnit5 disallows running suite classes from maven. Use -Dgroups=Tag1,Tag2 and -DexcludeGroups=Tag4,Tag5 to create test suites in maven.\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1:\n\n\n\n\n\n\n\nEclipse\n\n\n\n\n\n\n\n\nData driven approach\n\nData driven approach - External data driven\n\n\nExternal data driven - Data as external file injected in test case\n\n\nTest case - Categorize functionality and severity\n\n\nYou can find more information about data driven  here and here\n\n\nThere are a few ways to define parameters for tests.\n\n\n\nInternal Data driven approach\n\nData as part of test case\n\n\nThe different means to pass in parameters are shown below.\n\n\nSince mrchecker-core-module version 5.6.2.1\n\n\nStatic methods are used to provide the parameters.\n\n\nA method in the test class:\n\n\n\n\n\n\nOR\n\n\n\n\n\n\n\nIn the first case the arguments are directly mapped to the test method parameters. In the second case the array is passed as the argument.\n\n\n\n\n\n\n\n\nA method in a different class:\n\n\n\n\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1\n\n\nParameters that are passed into tests using the @Parameters annotation must be _Object[]_s\n\n\n\nIn the annotation:\n\n\n\n\n\n\n\n\n\n\n\nThe parameters must be primitive objects such as integers, strings, or booleans. Each set of parameters is contained within a single string and will be parsed to their correct values as defined by the test method’s signature.\n\n\n\nIn a method named in the annotation:\n\n\n\n\n\n\n\n\n\n\n\nA separate method can be defined and referred to for parameters. This method must return an Object[] and can contain normal objects.\n\n\n\nIn a class:\n\n\n\n\n\n\n\n\n\n\n\nA separate class can be used to define parameters for the test. This test must contain at least one static method that returns an Object[], and its name must be prefixed with provide. The class could also contain multiple methods that provide parameters to the test, as long as they also meet the required criteria.\n\n\n\n\nExternal Data Driven\n\nData as external file injected in test case\n\n\nSince mrchecker-core-module version 5.6.2.1\n\n\nTests use the annotation @CsvFileSource to inject CSVs file.\n\n\n\n\n\n\n\nA CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it’s just a comma-separated list.\n\n\nClassic CSV\n\n\n\n\n\n\nand CSV file structure\n\n\n\n\n\n\n\n\nCSV with headers\n\n\n\n\n\n\nand CSV file structure\n\n\n\n\n\n\n\n\nCSV with specific column mapper\n\n\n\n\n\n\nand Mapper implementation\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1\n\n\nTests use the annotation @FileParameters to inject CSVs file.\n\n\n\n\n\n\n\nA CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it’s just a comma-separated list.\n\n\n\nClassic CSV\n\n\n\n\n\n\nand CSV file structure\n\n\n\n\n\n\n\n\nCSV with headers\n\n\n\n\n\n\nand CSV file structure\n\n\n\n\n\n\n\n\nCSV with specific column mapper\n\n\n\n\n\n\nand Mapper implementation\n\n\n\n\n\n\n\n\n\nWhat is \"Parallel test execution\" ?\n\nParallel test execution means many \"Test Classes\" can run simultaneously.\n\n\n\"Test Class\", as this is a Junit Test class, it can have one or more test cases - \"Test case methods\"\n\n\n\n\n\n\n\n\nHow many parallel test classes can run simultaneously?\n\nSince mrchecker-core-module version 5.6.2.1\n\n\nJUnit5 supports parallelism natively. The feature is configured using a property file located at src\\test\\resources\\junit-platform.properties.\nAs per default configuration, concurrent test execution is set to run test classes in parallel using the thread count equal to a number of your CPUs.\n\n\n\n\n\n\n\nVisit JUnit5 site to learn more about parallel test execution.\n\n\nPrior to mrchecker-core-module version 5.6.2.1\n\n\nBy default, number of parallel test classes is set to 8.\n\n\nIt can be updated as you please, on demand, by command line:\n\n\n\n\n\n\n\n-Dthread.count=16 - increase number of parallel Test Class execution to 16.\n\n\nOverview\n\nCucumber / Selenium\n\n\nBusiness and IT don’t always understand each other. Very often misunderstandings between business and IT result in the costly failure of IT projects. With this in mind, Cucumber was developed as a tool to support human collaboration between business and IT.\n\n\nCucumber uses executable specifications to encourage a close collaboration. This helps teams to keep the business goal in mind at all times. With Cucumber you can merge specification and test documentation into one cohesive whole, allowing your team to maintain one single source of truth. Because these executable specifications are automatically tested by Cucumber, your single source of truth is always up-to-date.\n\n\n\n\n\n\n\nCucumber supports testers when designing test cases. To automate these test cases, several languages can be used. Cucumber also works well with Browser Automation tools such as Selenium Webdriver.\n\n\nSelenium\n\nSelenium automates browsers and is used for automating web applications for testing purposes. Selenium offers testers and developers full access to the properties of objects and the underlying tests, via a scripting environment and integrated debugging options.\n\n\nSelenium consists of many parts. If you want to create robust, browser-based regression automation suites and tests, Selenium Webdriver is most appropriate. With Selenium Webdriver you can also scale and distribute scripts across many environments.\n\n\n\nStrengths\n\nSupports BDD\n\nThose familiar with Behavior Driven Development (BDD) recognize Cucumber as an excellent open source tool that supports this practice.\n\n\n\nAll in one place\n\nWith Cucumber / Selenium you can automate at the UI level. Automation at the unit or API level can also be implemented using Cucumber. This means all tests, regardless of the level at which they are implemented, can be implemented in one tool.\n\n\n\nMaintainable test scripts\n\nMany teams seem to prefer UI level automation, despite huge cost of maintaining UI level tests compared to the cost of maintaining API or unit tests. To lessen the maintenance of UI testing, when designing UI level functional tests, you can try describing the test and the automation at three levels: business rule, UI workflow, technical implementation.\n\n\nWhen using Cucumber combined with Selenium, you can implement these three levels for better maintenance.\n\n\n\nEarly start\n\nExecutable specifications can and should be written before the functionality is implemented. By starting early, teams get most return on investment from their test automation.\n\n\n\nSupported by a large community\n\nCucumber and Selenium are both open source tools with a large community, online resources and mailing lists.\n\n\n\n\n\nHow to run cucumber tests in Mr.Checker\n\nCommand line / Jenkins\n\n\n\nRun cucumber tests and generate Allure report. Please use this for Jenkins execution. Report is saved under ./target/site.\n\n\n\n\n\n\n\nRun and generate report\n\n\n\n\n\n\n\nRun cucumber tests, generate Allure report and start standalone report server\n\n\n\n\n\n\n\n\n\n\nEclipse IDE\n\n\n\n\n\n\n\n\nTooling\n\nCucumber\n\nCucumber supports over a dozen different software platforms. Every Cucumber implementation provides the same overall functionality, but they also have their own installation procedure and platform-specific functionality. See https://cucumber.io/docs for all Cucumber implementations and framework implementations.\n\n\nAlso, IDEs such as Intellij offer several plugins for Cucumber support.\n\n\n\nSelenium\n\nSelenium has the support of some of the largest browser vendors who have taken (or are taking) steps to make Selenium a native part of their browser. It is also the core technology in countless other browser automation tools, APIs and frameworks.\n\n\n\nAutomation process\n\nWrite a feature file\n\nTest automation in Cucumber starts with writing a feature file. A feature normally consists of several (test)scenarios and each scenario consists of several steps.\n\n\nFeature: Refund item\n\n\nScenario: Jeff returns a faulty microwave\n\n\nGiven Jeff has bought a microwave for $100\n\n\nAnd he has a receipt\n\n\nWhen he returns the microwave\n\n\nThen Jeff should be refunded $100\n\n\nAbove example shows a feature “Refund item” with one scenario “Jeff returns a faulty microwave”. The scenario consists of four steps each starting with a key word (Given, And, When, Then).\n\n\n\nImplementing the steps\n\nNext the steps are implemented. Assuming we use Java to implement the steps, the Java code will look something like this.\n\n\n\n\n\n\n\nCucumber uses an annotation (highlighted) to match the step from the feature file with the function implementing the step in the Java class. The name of the class and the function can be as the developer sees fit. Selenium code can be used within the function to automate interaction with the browser.\n\n\n\nRunning scenarios\n\nThere are several ways to run scenarios with Cucumber, for example the JUnit runner, a command line runner and several third party runners.\n\n\n\nReporting test results\n\nCucumber can report results in several different formats, using formatter plugins\n\n\n\n\nFeatures\n\nFeature files using Gherkin\n\nCucumber executes your feature files. As shown in the example below, feature files in Gherkin are easy to read so they can be shared between IT and business. Data tables can be used to execute a scenario with different inputs.\n\n\n\n\n\n\n\n\nOrganizing tests\n\nFeature files are placed in a directory structure and together form a feature tree.\n\n\nTags can be used to group features based on all kinds of categories. Cucumber can include or exclude tests with certain tags when running the tests.\n\n\n\n\nReporting test results\n\nCucumber can report results in several formats, using formatter plugins.\nNot supported option by Shared Services: The output from Cucumber can be used to present test results in Jenkins or Hudson depending of the preference of the project.\n\n\n\n\n\n\n\n\n\nHOW IS Cucumber / Selenium USED AT Capgemini?\n\nTool deployment\n\nCucumber and Selenium are chosen as one of Capgemini’s test automation industrial tools. We support the Java implementation of Cucumber and Selenium Webdriver. We can help with creating Cucumber, Selenium projects in Eclipse and IntelliJ.\n\n\n\nApplication in ATaaS (Automated Testing as a Service)\n\nIn the context of industrialisation, Capgemini has developed a range of services to assist and support the projects in process and tools implementation.\n\n\nIn this context a team of experts assists projects using test automation.\n\n\nThe main services provided by the center of expertise are:\n\n\n\n\nAdvise on the feasibility of automation.\n\n\nSupport with installation.\n\n\nCoaching teams in the use of BDD.\n\n\n\n\n\n\n\nRun on independent Operation Systems\n\nAs E2E Allure test framework is build on top of:\n\n\n\n\nJava 1.8\n\n\nMaven 3.3\n\n\n\n\nThis guarantees portability to all operating systems.\n\n\nE2E Allure test framework can run on OS:\n\n\n\n\nWindows,\n\n\nLinux and\n\n\nMac.\n\n\n\n\nTest creation and maintenance in E2E Allure test framework can be done with any type of IDE:\n\n\n\n\nEclipse,\n\n\nIntelliJ,\n\n\nWebStorm,\n\n\nVisual Studio Code,\n\n\nmany more that support Java + Maven.\n\n\n\n\n\nSystem under test environments\n\n\n\n\n\n\n\n\nQuality assurance or QA is a way of preventing mistakes or defects in manufactured products and avoiding problems when delivering solutions or services to customers; which ISO 9000 defines as \"part of quality management focused on providing confidence that quality requirements will be fulfilled\".\n\n\nSystem integration testing or SIT is a high-level software testing process in which testers verify that all related systems maintain data integrity and can operate in coordination with other systems in the same environment. The testing process ensures that all sub-components are integrated successfully to provide expected results.\n\n\nDevelopment or Dev testing is performed by the software developer or engineer during the construction phase of the software development life-cycle. Rather than replace traditional QA focuses, it augments it. Development testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.\n\n\nProd If the customer accepts the product, it is deployed to a production environment, making it available to all users of the system.\n\n\n\n\n\n\n\n\n\n\nHow to use system environment\n\nIn Page classes, when you load / start web, it is uncommon to save fixed main url.\n\n\nValue flexibility is a must, when your web application under test, have different main url, dependence on environmnent (DEV, QA, SIT, …​, PROD)\n\n\nInstead of hard coded main url variable, you build your Page classe with dynamic variable.\n\n\nExample of dynamic variable GetEnvironmentParam.WWW_FONT_URL\n\n\n\n\n\n\n\n\nHow to create / update system environment\n\nExternal file with variable values\n\nDynamic variable values are stored under path mrchecker-app-under-test\\src\\resources\\enviroments\\environments.csv.\n\n\nNOTE: As environments.csv is Comma-separated file, please be aware of any edition and then save it under Excel.\n\n\n\n\n\n\n\n\nEncrypting sensitive data\n\nSome types of data you might want to store as environment settings are sensitive in nature (e.g. passwords). You might not want to store them (at least not in their plaintext form) in your repository. To be able to encrypt sensitive data you need to do following:\n\n\n\n\nCreate a secret (long, random chain of characters) and store it under mrchecker-app-under-test\\src\\resources\\secretData.txt. Example: LhwbTm9V3FUbBO5Tt5PiTUEQrXGgWrDLCMthnzLKNy1zA5FVTFiTdHRQAyPRIGXmsAjPUPlJSoSLeSBM\n\n\nExclude the file from being checked into the git repository by adding it to git.ignore. You will need to pass the file over a different channel among your teammates.\n\n\nEncrypt the values before putting them into the environments.csv file by creating following script (put the script where your jasypt library resides, e.g. C:\\MrChecker_Test_Framework\\m2\\repository\\org\\jasypt\\jasypt\\1.9.2):\n\n\n\n\n\n\n\nEncrypt the values by calling\n\n\n\n\n\n\n\nMark the value as encrypted by adding a prefix 'ENC(' and suffix ')' like: ENC(JN3nOFol2GMZoUxR5z2wI2qdipcNH1UD)\n\n\n\n\n\n\n\n\n\n\nBridge between external file nad Page class\n\nTo map values from external file with Page class you ought to use class GetEnvironmentParam.\n\n\nTherefore when you add new variable (row) in environments.csv you might need to add this variable to GetEnvironmentParam.\n\n\n\n\n\n\n\n\n\nRun test case with system environment\n\nTo run test case with system environment, please use:\n\n\n\n\n-Denv=&lt;NameOfEnvironment&gt;\n\n\n&lt;NameOfEnvironment&gt; is taken as column name from file mrchecker-app-under-test\\src\\test\\resources\\enviroments\\environments.csv\n\n\n\n\nCommand Line\n\n\n\n\n\n\n\nEclipse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSystem under test environments\n\n\n\n\n\n\n\n\nQuality assurance or QA is a way of preventing mistakes or defects in the manufactured products and avoiding problems when delivering solutions or services to customers which ISO 9000 defines as \"part of quality management focused on providing confidence that quality requirements will be fulfilled\".\n\n\nSystem integration testing or SIT is a high-level software testing process in which testers verify that all related systems maintain data integrity and can operate in coordination with other systems in the same environment. The testing process ensures that all sub-components are integrated successfully to provide expected results.\n\n\nDevelopment or Dev testing is performed by the software developer or engineer during the construction phase of the software development life-cycle. Rather than replace traditional QA focuses, it augments it. Development testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.\n\n\nProd If the customer accepts the product, it is deployed to a production environment, making it available to all users of the system.\n\n\n\n\n\n\n\n\n\n\nHow to use system environment\n\nIn Page classes, when you load / start web, it is uncommon to save fixed main url.\n\n\nValue flexibility is a must, when your web application under test has different main url, depending on the environmnent (DEV, QA, SIT, …​, PROD)\n\n\nInstead of hard coded main url variable, you build your Page classes with dynamic variable.\n\n\nAn example of dynamic variable GetEnvironmentParam.WWW_FONT_URL\n\n\n\n\n\n\n\n\nHow to create / update system environment\n\nExternal file with variable values\n\nDynamic variable values are stored under  mrchecker-app-under-test\\src\\resources\\enviroments\\environments.csv.\n\n\nNOTE: As environments.csv is a comma-separated file, please be careful while editing and then save it under Excel.\n\n\n\n\n\n\n\n\nEncrypting sensitive data\n\nSome types of data you might want to store as environment settings are sensitive in nature (e.g. passwords). You might not want to store them (at least not in their plaintext form) in your repository. To be able to encrypt sensitive data you need to do following:\n\n\n\n\nCreate a secret (long, random chain of characters) and store it under mrchecker-app-under-test\\src\\resources\\secretData.txt. Example: LhwbTm9V3FUbBO5Tt5PiTUEQrXGgWrDLCMthnzLKNy1zA5FVTFiTdHRQAyPRIGXmsAjPUPlJSoSLeSBM\n\n\nExclude the file from being checked into the git repository by adding it to git.ignore. You will need to pass the file over a different channel among your teammates.\n\n\nEncrypt the values before putting them into the environments.csv file by creating following script (put the script where your jasypt library resides, e.g. C:\\MrChecker_Test_Framework\\m2\\repository\\org\\jasypt\\jasypt\\1.9.2):\n\n\n\n\n\n\n\n\n\n\n\nEncrypt the values by calling\n\n\n\n\n\n\n\n\n\n\n\nMark the value as encrypted by adding a prefix 'ENC(' and suffix ')' like: ENC(JN3nOFol2GMZoUxR5z2wI2qdipcNH1UD)\n\n\n\n\n\n\n\n\n\n\nBridge between external file nad Page class\n\nTo map values from external file with Page class you ought to use class GetEnvironmentParam\n\n\nTherefore when you add new variable (row) in environments.csv you might need to add this variable to GetEnvironmentParam.\n\n\n\n\n\n\n\n\n\nRun test case with system environment\n\nTo run test case with system environment, please use:\n* -Denv=\\&lt;NameOfEnvironment\\&gt;\n* \\&lt;NameOfEnvironment\\&gt; is taken as column name from file mrchecker-app-under-test\\src\\test\\resources\\enviroments\\environments.csv\n\n\nSince mrchecker-core-module version 5.6.2.1\n\n\nCommand Line\n\n\n\n\n\n\n\nEclipse\n\n\n\n\n\n\n\n\n\n\n\nPrior to mrchecker-core-module version 5.6.2.1\n\n\n\nCommand Line\n\n\n\n\n\n\n\nEclipse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}