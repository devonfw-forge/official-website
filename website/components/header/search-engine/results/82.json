{"type":"doc","filename":"devonfw-guide_devon4j.wiki_12-factor-app-devon4j.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_12-factor-app-devon4j.asciidoc","title":"12-factor-app with devon4j","breadcrumbs":["Java","General","12-factor-app with devon4j"],"text":"12-factor-app with devon4j\n\nThis document mainly focuses on discussing how can you create 12 factor app with devon4j. To know more about this 12 factors you can refer here . Twelve factor is mainly focus on creating cloud native applications. These are the guidelines on what factors you need to consider in different stages of application lifecycle.\n\n\n\n\n\n\n\n\nFactor\nAction\n\n\n\n\nCodebase\nOne codebase tracked in revision control, many deploys\nOne codebase should be created with each process or service.\nTwelve factor app says do not share code between application.\nIf you must share code, build library and manage that through dependencies.\nTo create and manage library in spring boot refer here \nTo build your extension in Quarkus refer here\nFor complex monolith application you can consider breaking it into microservices. One of the good article for it is\nhttps://martinfowler.com/articles/break-monolith-into-microservices.html\nThis factor mainly points at having seperate commit history for each service or process in case you are using any submodules consider using submodules in your revision control system as well.\n\n\nDependencies\nExplicitly declare and isolate dependencies\nIn devon4j we can declare dependencies in pom.xml.Do not commit any jar files into code repository i.e do not commit agent-jars into repository instead consider using maven-dependency-plugin to manage it. And to isolate app from environment we can dockerize devon4j application.\nReferences:\nDockerize Spring-boot app refer here.\nDockerize Quarkus app refer\nhere\n\n\nConfig\nStore config in the environment\nHere, configuration means anything which can vary between different deployment such as creadential to external sources, backing services etc. To do such configuration in your java application refere guide here\n\n\nBacking services\nTreat backing services as attached resources\nTo design your services, refer devon4j guide here\n\n\nBuild, release, run\nStrictly separate build and run stages\nRefer guide here for more details.\n\n\nProcesses\nDo not store your states in in-memory cache instead use Redis or Memcached\nRefer guide for stateless programming in devon4j\nhere\n\n\nPort binding\nThe web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.\nThis is achieved in spring boot application as well as Quarkus.\nBoth have embedded tomcat in it by default so we do not need to deploy explicitly and can be run as standalone application.\n\n\nConcurrency\nAs process in application are stateless it will be easy to scale out application based on requirement.\nRefer guide for stateless programming\nhere\nbecause of stateless processes we can scale out easily.\n\n\nDisposability\nQuarkus is designed with container first approach in mind so it has very quick start up time.\nComparatively spring boot application use more memory and have slow start-up. Check if start time of your application is less than or equal to minute or you may want to investigate cause for slower start up of your application. To improve your start up time you can refer here\nFor graceful shutdown of web server in spring boot refer document here\nFor graceful shutdown in Quarkus refer document here\n\n\nDev/prod parity\nWith docker this can be achieved.\nwe should have the right processes like continuous integration and delivery to facilitate bridging this gap further.\n\n\nLogs\nTreat logs as event streams\n12 factor app treats log as event stream and do not consider details like log files to store etc. In practice to achieve this logs can be written to stdout and stderr etc and variables like log_level can be defined in environment variable or configuration management can take care of it.\nIn cloud provider such as AWS, services like AWS cloudwatch are available. AWS cloudwatch is a monitoring service and can be integrated easily in almost all other services. Redirecting application logs is possible from services like EC2 and ECS to cloudwatch. Similarly other cloud provider have different services for monitoring.\nAlso project can choose to redirect this log events to datadog,splunk,ELK etc\n\n\nAdmin processes\nCreate scripts for your admin jobs or consider to create Kubernetes job for this processes.\n\n\n\n\n\n\n\n"}