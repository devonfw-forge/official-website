{"type":"doc","filename":"devonfw-guide_cicdgen.wiki_master-cicdgen.asciidoc_cicdgen-cli.html","anchor":"devonfw-guide_cicdgen.wiki_master-cicdgen.asciidoc_cicdgen-cli","title":"cicdgen CLI","breadcrumbs":["CI/CD","cicdgen","cicdgen CLI"],"text":"cicdgen CLI\n\n\nCICDGEN CLI\n\ncicdgen is a command line interface that helps you with some CICD in a devonfw project. At this moment we can only generate files related to CICD in a project but we plan to add more functionality in a future.\n\n\nInstallation\n\n\n\n\n\n\n\nUsage\n\nGlobal arguments\n\n\n\n--version\n\n\n\n\n\n\n\n--help\n\n\n\n\n\n\n\n\n\n\nCommands\n\nGenerate.\n\nThis command wraps the usage of angular schematics CLI. With this we generate files in a easy way and also print a better help about usage.\n\n\nAvailable schematics that generate the code:\n\n\n\n\ndevon4j\n\n\ndevon4ng\n\n\ndevon4net\n\n\ndevon4node\n\n\n\n\n\n\nExamples\n\n\n\nGenerate all CICD files related to a devon4j project\n\n\n\n\n\n\n\nGenerate all CICD files related to a devon4ng project with docker deployment.\n\n\n\n\n\n\n\nGenerate all CICD files related to a devon4node project with OpenShift deployment.\n\n\n\n\n\n\n\n\n\n\n\n\n\ncicdgen usage example\n\nIn this example we are going to show how to use cicdgen step by step in a devon4ng project.\n\n\n\n\nInstall cicdgen\n\ncicdgen is already included in the devonfw distribution, but if you want to use it outside the devonfw console you can execute the following command:\n\n\n\n\n\n\n\n\nGenerate a new devon4ng project using devonfw ide.\n\nInside a devonfw ide distribution execute the command (devon ng create &lt;app-name&gt;):\n\n\n\n\n\n\n\n\nExecute cicdgen generate command\n\nAs we want to send notifications to MS Teams, we need to create the connector first:\n\n\n\n\n\n\nGo to a channel in teams and click at the connectors button. Then click at the jenkins configure button.\n\n\n\n\n\nPut a name for the connector\n\n\n\n\n\nCopy the name and the Webhook URL, we will use it later.\n\n\n\n\n\n\n\n\n\nWith the values that we get in the previous steps, we will execute the cicdgen command inside the project folder. If you have any doubt you can use the help.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a git repository and upload the code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see, no git init or git commit is required, cicdgen do it for you.\n\n\n\nCreate a multibranch-pipeline in Jenkins\n\n\n\n\nWhen you push the save button, it will download the repository and execute the pipeline defined in the Jenkinsfile. If you get any problem, check the environment variables defined in the Jenkinsfile. Here we show all variables related with Jenkins:\n\n\n\n\n\n\nchrome\n\n\n\n\n\nsonarTool\n\n\n\n\n\nsonarEnv\n\n\n\n\n\nrepositoryId\n\n\n\n\n\nglobalSettingsId\n\n\n\n\n\nmavenInstallation\n\n\n\n\n\ndockerTool\n\n\n\n\n\n\n\n\n\n\nAdd a webhook in GitLab\n\nIn order to run the pipeline every time that you push code to GitLab, you need to configure a webhook in your repository.\n\n\n\n\n\n\n\n\nNow your project is ready to work following a CICD strategy.\n\n\nThe last thing to take into account is the branch naming. We prepare the pipeline in order to work following the git-flow strategy. So all stages of the pipeline will be executed for the branches: develop, release/*, master. For the branches: feature/*, hotfix/*, bugfix/* only the steps related to unit testing will be executed.\n\n\n\n\n"}