{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-monitoring.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-monitoring.asciidoc_health-check","title":"Health-Check","breadcrumbs":["Java","General","Monitoring"],"text":"Health-Check\n\nThe idea of a health check is to prodvide monitoring data about the current health status of your application.\nThis allows to integrate this specific data into the monitoring system used for your IT landscape.\nIn order to keep the monitoring simple and easy to integreate consider using the following best practices:\n\n\n\n\nUse simple and established protocols such as REST instead of JMX via RMI.\n\n\nConsiduer using recent standards such as microprofile-health.\n\n\nConsider to drop access-control for your monitoring interfaces and for security prevent external access to it in your infrastructure (loadbalancers or gateways). Monitoring is only for usage within an IT landscape internally. It does not make sense for externals and end-users to access your app for reading monitoring data from a random node decided by a loadbalancer. Furhter, external access can easily lead to sensitive data exposure.\n\n\nConsider to define different end-points per usage-scenario. So if you want the loadbalancer to ask your app monitoring for availability of each node then create a separate service URL that only provides OK or anything else for failure (NOK, 404, 500, timeout). Do not mix this with a health-check that needs more detailed information.\n\n\nAlso do not forget about basic features such as prodiving the name and the release version of your application.\n\n\nBe careful to automate decisions based on monitoring and health checks. It easily turns out to be stupid if you automatically restart your pod or container because of some monitoring indicator. In the worst case a failure of a central component will cause your health-check to report down for all apps and as a result all your containers will be restarted frequently. Indead of curing problems such decisions will cause much more harm and trouble.\n\n\nAvoid causing reasonable load with your monitoring and health-check itself. In many cases it is better to use log-monitoring or to collect monitoring data from use-cases that happen in your app anyway. If you create dummy read and write requests in your monitoring implementation you will easily turn it into a DOS-attack.\n\n\n\n\nFor spring you can simply integrate app monitoring and health check via spring-boot-actuator.\n\n\nFor quarkus you can simply integrate app monitoring via micrometer or smallrye-metrics and health check via smallrye-health.\n\n\n\n\n\n"}