{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-jdk.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-jdk.asciidoc_garbage-collection","title":"Garbage Collection","breadcrumbs":["Java","General","Java Development Kit"],"text":"Garbage Collection\n\n\n\n\nWarning\n\n\nHey there! Seems like you are still using the documentation of our legacy Java repository. Since it wonâ€™t be maintained anymore, we recommend you to checkout the new Java page here.\n\n\n\n\n\nA key feature of Java is automatic garbage collection (GC).\nOver time different garbage collectors have been implemented within the JVM.\nThe good news is that usually you do not have to care about all this.\nHowever, at some point you might get an OutOfMemoryError or other effects related to GC and heap issues.\nYou should also be aware that when a lot of heap is consumed, a full GC may pause the JVM for some time causing other issues like performance problems or even connection timeouts.\nTherefore, we strongly recommend you to do continous logging of your GC activity in your environments up to production.\nThese GC logging does not cause relevant overhead so it can be enabled 7x24.\nWhenever you might have heap issues or a memory leak, you can simply analyze these GC logs.\nSimply transfer the logs from the environment server to your local machine.\nAs the GC logs do not contain data that is sensitive to your app (regarding GPDR, customer data, etc.) this should be relatively easy to arrange.\nTo analyze these GC logs, we recommend GCViewer.\nIf you are already using devonfw-ide, that integrates all cool developer tools you may need, you can just call this command:\n\n\n\n\n\n\n\nIn the UI of GCViewer, simply open your GC logfile and you will get a visualization of the heap activity over time.\nFor more details see here.\n\n\n\n"}