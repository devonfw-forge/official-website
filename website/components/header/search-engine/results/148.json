{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-jee.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-jee.asciidoc_application-server","title":"Application-Server","breadcrumbs":["Java","General","JEE"],"text":"Application-Server\n\nWe designed everything based on standards to work with different technology stacks and servlet containers.\nHowever, we strongly encourage to use modern and leightweight frameworks such as spring or quarkus.\nYou are free to decide for a JEE application server but here is a list of good reasons for our decision:\n\n\n\n\nUp-to-date\n\nWith spring or quarkus you easily keep up to date with evolving technologies (microservices, reactive, NoSQL, etc.).\nMost application servers put you in a jail with old legacy technology.\nIn many cases you are even forced to use a totally outdated version of java (JVM/JDK).\nThis may even cause severe IT-Security vulnerabilities but with expensive support you might get updates.\nAlso with leightweight open-source frameworks you need to be aware that for IT-security you need to update recently what can cost quite a lot of additional maintenance effort.\n\n\n\nDevelopment speed\n\nWith spring-boot you can implement and especially test your individual logic very fast. Starting the app in your IDE is very easy, fast, and realistic (close to production). You can easily write JUnit tests that startup your server application to e.g. test calls to your remote services via HTTP fast and easy. For application servers you need to bundle and deploy your app what takes more time and limits you in various ways. We are aware that this has improved in the past but also spring continuously improves and is always way ahead in this area. Further, with spring you have your configurations bundled together with the code in version control (still with ability to handle different environments) while with application servers these are configured externally and can not be easily tested during development.\n\n\n\nDocumentation\n\nSpring and also quarkus have an extremely open and active community.\nThere is documentation for everything available for free on the web.\nYou will find solutions to almost any problem on platforms like stackoverflow.\nIf you have a problem you are only a google search away from your solution.\nThis is very much different for proprietary application server products.\n\n\n\nHelpful Exception Messages\n\nEspecially spring is really great for developers on exception messages.\nIf you do something wrong you get detailed and helpful messages that guide you to the problem or even the solution.\nThis is not as great in application servers.\n\n\n\nFuture-proof\n\nSpring has evolved really awesome over time.\nSince its 1.0 release in 2004 spring has continuously been improved and always caught up with important trends and innovations.\nEven in critical situations, when the company behind it (interface21) was sold, spring went on perfectly.\nQuarkus on the other hand is relatively new.\nIt does not have to carry a large legacy history and is therefore most state-of-the-art for modern projects esp. in cloud environments.\nJEE went through a lot of trouble and crisis.\nJust look at the EJB pain stories.\nThis happened often in the past and also recent.\nSee JEE 8 in crisis.\n\n\n\nFree\n\nSpring and quarkus including their ecosystems are free and open-source.\nIt still perfectly integrates with commercial solutions for specific needs.\nMost application servers are commercial and cost a lot of money.\nAs of today the ROI for this is of question.\n\n\n\nCloud-native\n\nQuarkus is designed for cloud-native projects from the start.\nWith spring this is also available via spring-native.\nUsing an application server will effectively prevent you from going to the cloud smoothly.\n\n\n\nFun\n\nIf you go to conferences or ask developers you will see that spring or quarkus is popular and fun.\nIf new developers are forced to use an old application server product they will be less motivated or even get frustrated.\nEspecially in todayâ€™s agile projects this is a very important aspect.\nIn the end you will get into trouble with maintenance on the long run if you rely on a proprietary application server.\n\n\n\n\n\nOf course the vendors of application servers will tell you a different story.\nThis is simply because they still make a lot of money from their products.\nWe do not get paid from application servers nor from spring, quarkus or any other IT product company.\nWe are just developers who love to build great systems.\nA good reason for application servers is that they combine a set of solutions to particular aspects to one product that helps to standardize your IT.\nHowever, devonfw fills exactly this gap for the spring and quarkus ecosystems in a very open and flexible way.\nHowever, there is one important aspect that you need to understand and be aware of:\n\n\nSome big companies decided for a specific application server as their IT strategy.\nThey may have hundreds of apps running with this application server.\nAll their operators and developers have learned a lot of specific skills for this product and are familiar with it.\nIf you are implementing yet another (small) app in this context it could make sense to stick with this application server.\nHowever, also they have to be aware that with every additional app they increase their technical debt.\nSo actively help your customer and consult him to make the right choices for the future.\n\n\n\n\n\n\n"}