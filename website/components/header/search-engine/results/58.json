{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto_ionic-client-generation.asciidoc","title":"Ionic client generation","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","How to"],"text":"Ionic client generation\n\nWe are going to show you how to generate a CRUD Ionic application from an ETO\nusing CobiGen.\n\n\n\n\n\n\n\n\nThis is a short introduction to the Ionic generation. For a deeper tutorial including the generation of the backend, we strongly recommend you to follow this document.\n\n\n\n\n\nPrerequisites\n\nBefore starting, make sure you have the following things already installed on your machine:\n\n\n\n\nIonic: follow the steps described on the Ionic page.\nIt includes the installation of:\n\n\n\nNode.js: We have to use the npm package manager for downloading packages.\n\n\nIonic CLI.\n\n\n\n\n\nCapacitor: Necessary to access to native device features.\n\n\n\n\nIf CobiGen_Templates are not already downloaded, follow the next steps:\n\n\n\n\nRight click on any file in your Eclipse workspace. Select CobiGen → Update Templates…​ from the context menu and now you are able to start the generation.\n\n\nIf you want to adapt the templates, select CobiGen → Adapt Templates…​ from the menu and you should have the CobiGen_Templates as a new project in your Eclipse’s workspace.\n\n\n\n\nAfter following those steps correctly, you should have the latest version of the templates ready to use.\n\n\n\nGeneration\n\nWe are going to generate the CRUD functions into a sample application.\nFirst, clone or download the devon4ng Ionic template in your workspace.\n\n\nAfter that, please create a devon4j project and then start implementing the ETO: you can find an example here.\n\n\nAs you can see, TableEto contains 3 attributes: 2 of them are Long and the third one TableState is an enum that you will find\nhere.\nThe Ionic generation works fine for any Java primitive attribute (Strings, floats, chars, boolean…​) and enums. However, if you want to use your own objects, you should\noverride the toString() method, as explained here.\n\n\nThe attributes explained above will be used for generating a page that shows a list. Each item of that list\nwill show the values of those attributes.\n\n\nFor generating the files:\n\n\n\n\nRight click your ETO file and click on CobiGen &gt; Generate as shown on the figure below.\n\n\n\n\n\n\n\n\n\n\n\nSelect the Ionic increments for generating as shown below. Increments group a set of templates for generating\ndifferent projects.\n\n\n\nIonic List used for generating the page containing the list.\n\n\nIonic devon4ng environments  is for stating the server path.\n\n\nIonic i18n used for generating the different language translations for the `translationService` (currently English and Spanish).\n\n\nIonic routing adds an app-routing.module.ts file to allow navigation similar to the one available in Angular.\n\n\nIonic theme generates the variables.scss file which contains variables to style the application.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy default, the generated files will be placed inside \"devon4ng-ionic-application-template\", next to the root of your project’s folder.\nSee the image below to know where they are generated. For changing the generation path and the name of the application go to CobiGen_Templates/crud_ionic_client_app/cobigen.properties.\n\n\n\n\n\n\n\n\n\n\nNow that we have generated the files, lets start testing them:\n\n\n\n\nFirst change the SERVER_URL of your application. For doing that, modify src/environments/environments.ts, also modify src/environments/environments.android.ts (android) and src/environments/environments.prod.ts (production) if you want to test in different environments.\n\n\nCheck that there are no duplicated imports. Sometimes there are duplicated imports in src/app/app.module.ts.\nThis happens because the merger of CobiGen prefers to duplicate rather than to delete.\n\n\nRun npm install to install all the required dependencies.\n\n\nRun `ionic serve on your console.\n\n\n\n\nAfter following all these steps your application should start. However, remember that you will need your server to be running for access to the list page.\n\n\n\nRunning it on Android\n\nTo run the application in an android emulated device, it is necessary to have Android Studio and Android SDK. After its installation, the following commands have to be run on your console:\n\n\n\n\nnpx cap init \"name-for-the-app (between quotes)\" \"id-for-the-app (between quotes)\"\n\n\nionic build --configuration=android. To use this command, you must add an android build configuration at angular.json\n\n\n\n\n\n\n\n\n\n\n\nnpx cap add android\n\n\nnpx cap copy\n\n\nnpx cap open android\n\n\n\n\nThe last steps are done in Android studio: make the project, make the app, build and APK and run in a device.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}