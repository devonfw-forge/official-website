{"type":"doc","filename":"devonfw-guide_hangar.wiki_hangar.asciidoc_azure-devops-deploying-on-aws-eks-or-azure-aks.html","anchor":"devonfw-guide_hangar.wiki_hangar.asciidoc_setup-azure-devops-workspace","title":"Setup Azure DevOps workspace","breadcrumbs":["CI/CD","devonfw Hangar","Azure DevOps deploying on AWS EKS or Azure AKS"],"text":"Setup Azure DevOps workspace\n\nSetup Azure DevOps project\n\nBy the end of this guide a new project in Azure DevOps will be created.\n\n\n\nPrerequisites\n\n\n\nSign up into Azure DevOps (just follow the section Sign up with a personal Microsoft account).\n\n\nInstall the Azure CLI.\n\n\nCreate an Azure DevOps Personal Access Token (PAT).\n\n\n\n\n\nCreating the Azure DevOps project\n\nThere are two ways of creating an Azure DevOps project:\n\n\n\n\nCreate it manually using the web interface following Microsoft official guide.\n\n\nCreate it in an automated way using the provided script, as shown below.\n\n\n\n\n\n\n\n\n\n\nBoth when done manually and when using the script with -p flag, you will need to choose a process workflow. Learn more about the different options in the official documentation. By default, \"Basic\" workflow is chosen.\n\n\n\n\n\n\nCreating Azure DevOps project using provided script\n\nThe script located at scripts/accounts/azure-devops/create-project.sh enables you to create a new Azure DevOps project or configure an existing one.\n\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExample\n\n./create-project.sh -n \"Hello World\" -d \"This is a sample application\" -o devon-hangar -v public -t myToken -w agile\n\n\n\n\nSetting up a repository on Azure DevOps\n\nBy the end of this guide, a repository on Azure DevOps will be created in an automated way using a script.\n\n\nPrerequisites\n\n\n\nHave an Azure DevOps project already setup and Azure CLI installed and configured. If it is not the case, please go back to corresponding guide.\n\n\nInstall Git.\n\n\n\n\n\nCreating repository using provided script\n\nThe script located at /scripts/repositories/azure-devops/create-repo.sh allows you to either:\n\n\n\n\nCreate an empty repository with just a README file and clone it to your computer into the directory you set. Useful when starting a project from scratch.\n\n\nImport an already existing directory or Git repository into your project giving a path or an URL. Useful for taking to Azure DevOps the development of an existing project.\n\n\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nTypical use cases\n\n\n\n\n\n\n\nThis is non-exhaustive list. Make your own combination of flags if all of the following use cases does not fit your needs.\n\n\n\n\n\nCreating an empty repository\n\n\n\n\n\n\nIn case repository name is not specified, destination directory name will be used.\n\n\n\nCreating an empty repository with Gitflow branching strategy\n\n\n\n\n\n\n\nImporting a remote Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source repository name (in URL) will be used.\n\n\n\nImporting a specific remote Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\nImporting local directory or Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source directory name will be used.\n\n\n\nImporting a specific local Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\n\n\n\n\n\nThis operation is destructive regarding branches on the local repository.\n\n\n\n\n\n\n\n\n\n\n\nSame command could also be used with a local directory, but then using -b and -r would be redundant.\n\n\n\n\n\n\n\n\nBranching strategies\n\nTo ensure the quality of development, it is crucial to keep a clean Git workflow. The following branching strategies are supported (using -s flag):\n\n\nGitflow\n\nThis is not an explanation of Gitflow (there are plenty of them on the web), but the actions performed by the script to help you start using this worflow.\n\n\nBranches\n\n\n\nmaster is the initial (seed) branch.\n\n\ndevelop branch is created from master branch.\n\n\n\n\nAny other branch part the strategy (feature, release, and hotfix branches) will be created by developers during the lifecycle of the project.\n\n\n\n\nPolicies\n\nIn Azure DevOps it is possible to protect important branches against bad practices using branch policies.\n\n\nThe following branch policies are applied to master and develop branches:\n\n\n\n\nRequire a minimum number of reviewers: ON\n\n\n\nMinimum number of reviewers: 1\n\n\nAllow requestors to approve their own changes: ON\n\n\nProhibit the most recent pusher from approving their own changes: OFF\n\n\nAllow completion even if some reviewers vote to wait or reject: OFF\n\n\nWhen new changes are pushed: Reset all approval votes (does not reset votes to reject or wait)\n\n\n\n\n\nCheck for linked work items: OFF\n\n\nCheck for comment resolution: REQUIRED\n\n\nLimit merge types: OFF\n\n\n\n\nThe above policies are defined in a configuration file located at /scripts/repositories/common/config/strategy.cfg. Feel free to adapt it to your needs.\n\n\n\n\n\n\n\n\nThis is the bare minimum standard for any project. We do not prohibit the most recent pusher from approving their own changes, although being more than recommendable, because if we do, it will block the auto-approval of Pull Requests generated during pipelines creation on the following guides.\n\n\n\n\n\nYou can find more information about branch policies in the official documentation.\n\n\n\n\n\n\n\n"}