{"type":"doc","filename":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_extending-solicitor.html","anchor":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_java-extensions","title":"Java Extensions","breadcrumbs":[],"text":"Java Extensions\n\nIt is also possible to extend the functionality of Solicitor within an extension by implementing Spring Beans\nwhich implement certain interfaces. As the resources contained in the extension are included into Solicitors  classpath those beans\nmight be discovered through the Spring component scan mechanism and thus be activated.\n\n\n\n\n\n\n\n\nThe Spring components scanning mechanisms by default searches only in package com.devonfw.tools.solicitor (and subpackages). You either need to define the extension classes in these packages or create a specific configuration class in this package which has an\nappropriate @ComponentScan annotation which points to your packages.\n\n\n\n\n\n\n\n\n\n\n\nExtending Solicitor via Java is an advanced topic. Only the Interfaces given below should be used. Even those should\nbe regarded as unstable and might change without notice. For any details on the interfaces see the Solicitor source code and corresponding Javadoc.\n\n\n\n\n\nExtension Interfaces\n\ncom.devonfw.tools.solicitor.componentinfo.ComponentInfoAdapter\n\nA spring bean implementing this interface might provide ComponentInfo/LicenseInfo data for ApplicationComponents identified\nby their packageUrl. (The buildin implementation of this interface is reading such component info from scancode result files\nfrom the local file system, see Experimental Scancode Integration.) Alternative implementations might e.g. get this information\nfrom a corporate server or even a public service available on the internet.\n\n\n\ncom.devonfw.tools.solicitor.lifecycle.SolicitorLifecycleListener\n\nSpring beans implementing this interface will be called at certain points in the Solicitor processing lifecycle. See the Javadoc for details. Implementations should preferably use com.devonfw.tools.solicitor.lifecycle.AbstractSolicitorLifecycleListener as base class which contains NOOP functionality for all methods which might be overridden as required.\n\n\n\n\n\n\n"}