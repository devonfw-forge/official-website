{"type":"doc","filename":"devonfw-guide_devon4j.wiki_coding-conventions.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_coding-conventions.asciidoc_naming","title":"Naming","breadcrumbs":["Java","General","Coding Conventions"],"text":"Naming\n\nBesides general Java naming conventions, we follow the additional rules listed here explicitly:\n\n\n\n\nAlways use short but speaking names (for types, methods, fields, parameters, variables, constants, etc.).\n\n\nStrictly avoid special characters in technical names (for files, types, fields, methods, properties, variables, database tables, columns, constraints, etc.). In other words only use Latin alpahnumeric ASCII characters with the common allowed technical separators for the accordign context (e.g. underscore) for technical names (even excluding whitespaces).\n\n\nFor package segments and type names prefer singular forms (CustomerEntity instead of CustomersEntity). Only use plural forms when there is no singular or it is really semantically required (e.g. for a container that contains multiple of such objects).\n\n\nAvoid having duplicate type names. The name of a class, interface, enum or annotation should be unique within your project unless this is intentionally desired in a special and reasonable situation.\n\n\nAvoid artificial naming constructs such as prefixes (I*) or suffixes (*IF) for interfaces.\n\n\nUse CamelCase even for abbreviations (XmlUtil instead of XMLUtil)\n\n\nAvoid property/field names where the second character is upper-case at all (e.g. 'aBc'). See #1095 for details.\n\n\nNames of Generics should be easy to understand. Where suitable follow the common rule E=Element, T=Type, K=Key, V=Value but feel free to use longer names for more specific cases such as ID, DTO or ENTITY. The capitalized naming helps to distinguish a generic type from a regular class.\n\n\n\n\n\n"}