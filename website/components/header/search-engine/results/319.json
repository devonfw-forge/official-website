{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.cors","title":"Devon4Net.Infrastructure.Cors","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.Cors\n\nAllows CORS settings for the devon4Net application.\nConfiguration may be used to configure several domains.\nWeb clients (for example, Angular) must follow this rule to avoid performing AJAX calls to another domain.\n\n\nCross-Origin Resource Sharing (CORS) is an HTTP-header-based mechanism that allows a server to specify any origin (domain, scheme, or port) outside of its own from which a browser should allow resources to be loaded. CORS also makes use of a process in which browsers send a \"preflight\" request to the server hosting the cross-origin resource to ensure that the server will allow the actual request. During that preflight, the browser sends headers indicating the HTTP method as well as headers that will be used in the actual request.\n\n\nYou may find out more by going to Microsoft CORS documentation\n\n\nConfiguration\n\nComponent setup is done in the appsettings.{environment}.json file using the following structure:\n\n\n\n\n\n\n\nYou may add as many policies as you like following the JSON format. for example:\n\n\n\n\n\n\n\nIn the following table all the configuration fields are described:\n\n\n\n\n\n\n\n\nProperty\nDescription\n\n\nCorsPolicy\nName of the policy\n\n\nOrigins\nThe originâ€™s url that you wish to accept.\n\n\nHeaders\nPermitted request headers\n\n\nMethods\nAllowed Http methods\n\n\nAllowCredentials\nSet true to allow the exchange of credentials across origins\n\n\n\n\n\nSetting up in Devon\n\nFor setting it up using the Devon4NetApi template just configure it in the appsettings.{environment}.json file.\n\n\nYou can enable CORS per action, per controller, or globally for all Web API controllers in your application:\n\n\n\n\nAdd this annotation in the Controller Class you want to use CORS policy\n\n\n\n\n\n\nAs an example, consider this implementation on the EmployeeController class\n\n\n\n\n\n\n\nThe example above enables CORS for all the controller methods.\n\n\n\nIn the same way, you may enable CORS on any controller method:\n\n\n\n\n\n\nThe example above enables CORS for the GetEmployee and Delete method.\n\n\n\n\n\n\nSetting up in other projects\n\nUsing the Package Manager Console, install the the next package on your solution:\n\n\n\n\n\n\n\nAdd the following lines of code to Progam.cs:\n\n\n\n\n\n\n\nAdd the default configuration shown in the configuration section.\n\n\nYou can enable CORS per action, per controller, or globally for all Web API controllers in your application:\n\n\n\n\nAdd this annotation to the controller class that will be using the CORS policy.\n\n\n\n\n\n\nWhere \"SamplePolicy\" is the name you give the Policy in the appsettings.{environment}.json.\n\n\nThe example above enables CORS for all the controller methods.\n\n\n\nIn the same way, you may enable any CORS-policy on any controller method:\n\n\n\n\n\n\nThe example above enables CORS for the GetSample and Delete method.\n\n\n\n\n\n\nTips\n\n\n\nIf you specify the CORS in the appsettings.{environment}.json configuration file as empty array, a default CORS-policy will be used with all origins enabled:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnly use this policy in development environments\n\n\n\n\n\nThis default CORS-policy is defined as \"CorsPolicy,\" and it should be enabled on the Controller Class as a standard Policy:\n\n\n\n\n\n\n\n\n\nif you want to disable the CORS check use the following annotation on any controller method:\n\n\n\n\n\n\n\n\n\n\n\nIf you set the EnableCors attribute at more than one scope, the order of precedence is:\n\n\n\nAction\n\n\nController\n\n\nGlobal\n\n\n\n\n\n\n\n\n\n"}