{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto_create-external-plugin.asciidoc","title":"Introduction to CobiGen external plug-ins","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","How to"],"text":"Introduction to CobiGen external plug-ins\n\nSince September of 2019, a major change on CobiGen has taken place. CobiGen is written in Java code and previously, it was very hard for developers to create new plug-ins in other languages.\n\n\nCreating a new plug-in means:\n\n\n\n\nBeing able to parse a file in that language.\n\n\nCreate a human readable model that can be used to generate templates (by retrieving properties from the model).\n\n\nEnable merging files, so that user’s code does not get removed.\n\n\n\n\nFor the Java plug-in it was relatively easy. As you are inside the Java world, you can use multiple utilities or libraries in order to get the AST or to merge Java code. With this new feature, we wanted that behaviour to be possible for any programming language.\n\n\nGeneral intuition\n\nBelow you will find a very high level description of how CobiGen worked in previous versions:\n\n\n\n\n\n\n\nBasically, when a new input file was sent to CobiGen, it called the input reader to create a model of it (see here an example of a model). That model was sent to the template engine.\n\n\nAfterwards, the template engine generated a new file which had to be merged with the original one. All this code was implemented in Java.\n\n\nOn the new version, we have implemented a handler (ExternalProcessHandler) which connects through TCP/IP connection to a server (normally on localhost:5000). This server can be implemented in any language (.Net, Node.js, Python…​) it just needs to implement a REST API defined here. The most important services are the input reading and merging:\n\n\n\n\n\n\n\nCobiGen acts as a client that sends requests to the server in order to read the input file and create a model. The model is returned to the template engine so that it generates a new file. Finally, it is sent back to get merged with the original file.\n\n\n\nHow to create new external plug-in\n\nThe creation of a new plug-in consists mainly in three steps:\n\n\n\n\nCreation of the server (external process).\n\n\nCreation of a CobiGen plug-in.\n\n\nCreation of templates.\n\n\n\n\nServer (external process)\n\nThe server can be programmed in any language that is able to implement REST services endpoints. The API that needs to implement is defined with this contract. You can paste the content to https://editor.swagger.io/ for a better look.\n\n\nWe have already created a NestJS server that implements the API defined above. You can find the code here which you can use as an example.\n\n\nAs you can see, the endpoints have the following naming convention: processmanagement/todoplugin/nameOfService where you will have to change todo to your plug-in name (e.g. rustplugin, pyplugin, goplugin…​)\n\n\nWhen implementing service getInputModel which returns a model from the input file there are only two restrictions:\n\n\n\n\nA path key must be added. Its value can be the full path of the input file or just the file name. It is needed because in CobiGen there is a batch mode, in which you can have multiple input objects inside the same input file. You do not need to worry about batch mode for now.\n\n\nOn the root of your model, for each found key that is an object (defined with brackets [{}]), CobiGen will try to use it as an input object. For example, this could be a valid model:\n\n\n\n\n\n\n\n\n\nFor this model, CobiGen would use as input objects all the classes and interfaces defined. On the templates we would be able to do model.classes[0].identifier to get the class name. These input objects depend on the language, therefore you can use any key.\n\n\nIn order to test the server, you will have to deploy it on your local machine (localhost), default port is 5000. If that port is already in use, you can deploy it on higher port values (5001, 5002…​). Nevertheless, we explain later the testing process as you need to complete the next step before.\n\n\n\n\n\n\n\n\nYour server must accept one argument when running it. The argument will be the port number (as an integer). This will be used for CobiGen in order to handle blocked ports when deploying your server. Check this code to see how we implemented that argument on our NestJS server.\n\n\n\n\n\n\nCobiGen plug-in\n\nYou will have to create a new CobiGen plug-in that connects to the server. But do not worry, you will not have to implement anything new. We have a CobiGen plug-in template available, the only changes needed are renaming files and setting some properties on the pom.xml. Please follow these steps:\n\n\n\n\nGet the CobiGen plug-in template from here. It is a template repository (new GitHub feature), so you can click on \"Use this template\" as shown below:\n\n\n\n\n\n\n\nName your repo as cobigen-name-plugin where name can be python, rust, go…​ In our case we will create a nest plug-in. It will create a repo with only one commit which contains all the needed files.\n\n\nClone your just created repo and import folder cobigen-todoplugin as a Maven project on any Java IDE, though we recommend you devonfw ;)\n\n\n\n\n\n\n\nRename all the todoplugin folders, files and class names to nameplugin. In our case nestplugin. In Eclipse you can easily rename by right clicking and then refactor → rename:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe recommend you to select all the checkboxes\n\n\n\n\n\n\n\n\n\n\n\n\nRemember to change in src/main/java and src/test/java all the package, files and class names to use your plug-in name. The final result would be:\n\n\n\n\n\n\n\nNow we just need to change some strings, this is needed for CobiGen to register all the different plugins (they need unique names). In class TodoPluginActivator (in our case NestPluginActivator), change all the todo to your plug-in name. See below the 3 strings that need to be changed:\n\n\n\n\n\n\n\nFinally, we will change some properties from the pom.xml of the project. These properties define the server (external process) that is going to be used:\n\n\n\nInside pom.xml, press Ctrl + F to perform a find and replace operation. Replace all todo with your plugin name:\n\n\n\n\n\n\n\nWe are going to explain the server properties:\n\n\n\nartifactId: This is the name of your plug-in, that will be used for a future release on Maven Central.\n\n\nplugin.name: does not need to be changed as it uses the property from the artifactId. When connecting to the server, it will send a request to localhost:5000/{plugin.name}plugin/isConnectionReady, that is why it is important to use an unique name for the plug-in.\n\n\nserver.name: This defines how the server executable (.exe) file will be named. This .exe file contains all the needed resources for deploying the server. You can use any name you want.\n\n\nserver.version: You will specify here the server version that needs to be used. The .exe file will be named as {server.name}-{server.version}.exe.\n\n\nserver.url: This will define from where to download the server. We really recommend you using NPM which is a package manager we know it works well. We explain here how to release the server on NPM. This will download the .exe file for Windows.\n\n\nserver.url.linux: Same as before, but this should download the .exe file for Linux systems. If you do not want to implement a Linux version of the plug-in, just use the same URL from Windows or MacOS.\n\n\nserver.url.macos: Same as before, but this should download the .exe file for MacOS systems. If you do not want to implement a MacOS version of the plug-in, just use the same URL from Linux or Windows.\n\n\n\n\n\n\n\n\n\n\n\n\nTesting phase\n\nNow that you have finished with the implementation of the server and the creation of a new CobiGen plug-in, we are going to explain how you can test that everything works fine:\n\n\n\n\nDeploy the server on port 5000.\n\n\nRun mvn clean test on the CobiGen-plugin or run the JUnit tests directly on Eclipse.\n\n\n\nIf the server and the plug-in are working properly, some tests will pass and other will fail (we need to tweak them).\n\n\nIf every test fails, something is wrong in your code.\n\n\n\n\n\nIn order to fix the failing tests, go to src/test/java. The failing tests make use of sample input files that we added in sake of example:\n\n\n\n\n\n\n\n\n\nReplace those files (on src/test/resources/testadata/unittest/files/…​) with the correct input files for your server.\n\n\n\nReleasing\n\nNow that you have already tested that everything works fine, we are going to explain how to release the server and the plug-in.\n\n\nRelease the server\n\nWe are going to use NPM to store the executable of our server. Even though NPM is a package manager for JavaScript, it can be used for our purpose.\n\n\n\n\nGet the CobiGen server template from here. It is a template repository (new GitHub feature), so you can click on \"Use this template\" as shown below:\n\n\n\n\n\n\n\nName your repo as cobigen-name-server where name can be python, rust, go…​ In our case we will create a nest plug-in. It will create a repo with only one commit which contains all the needed files.\n\n\nClone your just created repo and go to folder cobigen-todo-server. It will just contain two files: ExternalProcessContract.yml is the OpenAPI definition which you can modify with your own server definition (this step is optional), and package.json is a file needed for NPM in order to define where to publish this package:\n\n\n\n\n\n\n\n\n\nThose are the default properties. This would push a new package cobigen-todo-server on the devonfw organization, with version 1.0.0. We have no restrictions here, you can use any organization, though we always recommend devonfw.\n\n\n\n\n\n\n\n\nRemember to change all the todo to your server name.\n\n\n\n\n\n\n\nAdd your executable file into the cobigen-todo-server folder, just like below. As we said previously, this .exe is the server ready to be deployed.\n\n\n\n\n\n\n\nFinally, we have to publish to NPM. If you have never done it, you can follow this tutorial. Basically you need to login into NPM and run:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo release Linux and MacOS versions of your plug-in, just add the suffix into the package name (e.g. @devonfw/cobigen-todo-server-linux)\n\n\n\n\n\nThat’s it! You have published the first version of your server. Now you just need to modify the properties defined on the pom of your CobiGen plug-in. Please see next section for more information.\n\n\n\nReleasing CobiGen plug-in\n\n\n\nChange the pom.xml to define all the properties. You can see below a final example for nest:\n\n\n\n\n\n\n\nDeploy to Maven Central.\n\n\n\n\n\n\nTemplates creation\n\nAfter following above steps, we now have a CobiGen plug-in that connects to a server (external process) which reads your input files, returns a model and is able to merge files.\n\n\nHowever, we need a key component for our plug-in to be useful. We need to define templates:\n\n\n\n\nFork our CobiGen main repository, from here and clone it into your PC. Stay in the master branch and import into your IDE cobigen-templates\\templates-devon4j. Set the Java version of the project to 1.8 if needed.\n\n\nCreate a new folder on src/main/templates, this will contain all your templates. You can use any name, but please use underscores as separators. In our case, we created a folder crud_typescript_angular_client_app to generate an Angular client from a TypeORM entity (NodeJS entity).\n\n\n\n\n\n\n\nInside your folder, create a templates folder. As you can see below, the folder structure of the generated files starts here (the sources). Also we need a configuration file templates.xml that should be on the same level as templates/ folder. For now, copy and paste a templates.xml file from any of the templates folder.\n\n\n\n\n\n\n\nStart creating your own templates. Our default templates language is Freemarker, but you can also use Velocity. Add the extension to the file (.ftl) and start developing templates! You can find useful documentation here.\n\n\nAfter creating all the templates, you need to modify context.xml which is located on the root of src/main/templates. There you need to define a trigger, which is used for CobiGen to know when to trigger a plug-in. I recommend you to copy and paste the following trigger:\n\n\n\n\n\n\n\nChange templateFolder to your templates folder name. id you can use any, but it is recommendable to use the same as the template folder name. type is the TRIGGER_TYPE we defined above on the NestPluginActivator class. On matcher just change the value: ([^\\.]+).entity.ts means that we will only accept input files that contain anyString.entity.ts. This improves usability, so that users only generate using the correct input files. You will find more info about variableAssignment here.\n\n\nFinally, is time to configure templates.xml. It is needed for organizing templates into increments, please take a look into this documentation.\n\n\n\n\nTesting templates\n\n\n\nWhen you have finished your templates you will like to test them. On the templates-devon4j pom.xml remove the SNAPSHOT from the version (in our case the version will be 3.1.8). Run mvn clean install -DskipTests on the project. We skip tests because you need special permissions to download artifacts from our Nexus. Remember the version that has just been installed:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe always recommend using the devonfw console, which already contains a working Maven version.\n\n\n\n\n\n\n\nNow we have your last version of the templates ready to be used. We need to use that latest version in CobiGen. We will use the CobiGen CLI that you will find in your cloned repo, at cobigen-cli/cli. Import the project into your IDE.\n\n\nInside the project, go to src/main/resources/pom.xml. This pom.xml is used on runtime in order to install all the CobiGen plug-ins and templates. Add there your latest templates version and the previously created plug-in:\n\n\n\n\n\n\n\nAfterwards, run mvn clean install -DskipTests and CobiGen will get your plug-ins. Now you have three options to test templates:\n\n\n\nUsing Eclipse run as:\n\n\n\nInside Eclipse, you can run the CobiGen-CLI as a Java application. Right click class CobiGenCLI.java → run as → run configurations…​ and create a new Java application as shown below:\n\n\n\n\n\n\n\nThat will create a CobiGenCLI configuration where we can set arguments to the CLI. Let’s first begin with showing the CLI version, which should print a list of all plug-ins, including ours.\n\n\n\n\n\n\n\n\n\n\n\n\nIf that worked, now you can send any arguments to the CLI in order to generate with your templates. Please follow this guide that explains all the CLI commands.\n\n\n\n\n\nModify the already present JUnit tests on the CLI project: They test the generation of templates from multiple plug-ins, you can add your own tests and input files.\n\n\nUse the CLI jar to execute commands:\n\n\n\nThe mvn clean install -DskipTests command will have created a Cobigen.jar inside your target folder (cobigen-cli/cli/target). Open the jar with any unzipper and extract to the current location class-loader-agent.jar, cobigen.bat and cg.bat:\n\n\n\n\n\n\n\nNow you can run any CobiGen CLI commands using a console. This guide explains all the CLI commands.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndevon4net CobiGen Guide\n\nOverview\n\nIn this guide we will explain how to generate a new WebAPI project from an OpenAPI 3.0.0 specification. This  means that we are going to use a “contract first” strategy. This is going to be possible due to these type of files that contain all the information about entities, operations, etc…\n\n\nIn order to make it work we are using CobiGen, a powerful tool for generating source code. CobiGen allows users to generate all the structure and code of the components, helping to save a lot of time otherwise wasted on repetitive tasks.\n\n\n\nGetting things ready\n\ndevonfw-IDE\n\nFirst, we will install the devonfw-IDE. It is a tool that will setup your IDE within minutes. Please follow the install guide here.\n\n\n\ndevon4net Templates\n\nWe are going to use the template of devon4net as a base to generate all the code, so what we have to do now is to download said template using the following steps.\n\n\nFirst of all you have to set up all the environment for .NET, you can do this using the following tutorial. Next we are going to create a new folder where we want to have the WebAPI project, lastly we are going to open the terminal there.\n\n\nType the following:\n\n\n\n\n\n\n\nand then:\n\n\n\n\n\n\n\n\nOpenAPI File\n\nIn order to let CobiGen generate all the files, we first have to make some modifications to our OpenAPI file.\n\n\nIt is obligatory to put the “x-rootpackage” tag to indicate where CobiGen will place the generated files as well as the \"x-component\" tags for each component, keep in mind that due to CobiGen’s limitations each component must have its own entity.\n\n\nYou can read more information about how to configure your OpenAPI file and a working example here.\n\n\n\n\nGenerating files\n\nCobiGen allow us to generate the files in two different ways. One of them is using Eclipse which it can be done by using the its graphical interface. The other way to generate the code is using the CobiGen CLI tool.\n\n\nGenerating files through Eclipse\n\nIn order to generate the files using Eclipse we need to follow some simple steps.\n\n\nFirst we are going to import our basic devon4net WebAPI Project into Eclipse. to do so open Eclipse with the “eclipse-main.bat” file that can be found in the devon distribution root folder. Once we are inside of Eclipse we go to File &gt; Open projects from file system…​ and, under \"Directory\", search for your project.\n\n\n\n\n\n\n\nNext we copy our OpenAPI file into the root folder of the project.\n\n\n\n\n\n\n\nAnd then we right click on OpenAPI file and then select CobiGen &gt; Generate…​ It will display a window like this:\n\n\n\n\n\n\n\nTo select all .NET features choose CRUD devon4net Server otherwise you can select only those that interest you.\n\n\n\n\n\n\n\nOnes you select all the files that you want to generate, click on the “Finish” button to generate all the source code.\n\n\n\nGenerating files through CobiGen CLI\n\nIn order to generate the files using the CobiGen CLI it is needed to do the following steps:\n\n\n\n\nGo to devonfw distribution folder\n\n\nRun console.bat, this will open a console.\n\n\nGo to the folder you downloaded the devon4net template and your yml file.\n\n\nRun the command:\n\n\n\n\n\n\n\nA list of increments will be printed so that you can start the generation. It has to be selected CRUD devon4net Server increment.\n\n\n\n\n\n\nConfiguration\n\nData base\n\nCobiGen is generating an empty context that has to be filled with manually in order to be able to work with the database. The context can be found in [Project_Name]/Devon4Net.WebAPI.Implementation/Domain/Database/CobigenContext.cs.\n\n\n\n\n\n\n\n\nRun the application\n\nAfter the configuration of the database, open a terminal in path: [Project_Name]/Devon4Net.Application.WebAPI and then type:\n\n\n\n\n\n\n\nThis will deploy our application in our localhost with the port 8082, so when you click here (https://localhost:8082/swagger) you can see, in swagger, all the services and the data model.\n\n\n\n\n\n\n\n"}