{"type":"doc","filename":"devonfw-guide_devon4node.wiki_samples-step-by-step.asciidoc.html","anchor":"devonfw-guide_devon4node.wiki_samples-step-by-step.asciidoc_create-the-application","title":"Create the application","breadcrumbs":["NodeJS","devon4node applications","Create the employee sample application step by step"],"text":"Create the application\n\nFirst steps (optional)\n\nIf this is the first time that you are using NestJS or devon4node, you need some packages installed globally in your machine:\n\n\n\n\nNest CLI\n\n\n\n\n\n\nThis will provide you the nest command.\n\n\n\ndevon4node schematics\n\n\n\n\n\n\nThis will provide you the devon4node code generators.\n\n\n\n\n\nYarn is our preferred package manager. However, in this case we have used npm because the folder where npm global packages are installed is added to the PATH by default, while yarn’s is not. You can use yarn global add if you add the yarn’s bin folder to the PATH manually (use yarn global bin to get the bin folder path)\n\n\n\nCreate the application skeleton\n\nTo create a devon4node application, you must run the nest new command. If you use it without any extra parameter you will create a NestJS application. In order to generate a devon4node application, you need to run the following command:\n\n\n\n\n\n\n\nWhen asked for package manager, you must choose yarn.\n\n\nThe output should be something like:\n\n\n\n\n\n\n\nNow you have a clean base application to start building. To do that, you can choose the pieces that you need, some provided by devon4node code generators, others not, but you must always follow the devon4node key principles and coding conventions.\n\n\n\nConfiguration Module\n\nThere are many options to manage the application configuration. NestJS provides a module, but out prefered way is to use our own configuration module. The fastest way to include the configuration module into your project is using the following command:\n\n\n\n\n\n\n\nThe output:\n\n\n\n\n\n\n\n\nDatabase\n\nIn the NodeJS ecosystem there are many alternatives to connect to the database. You can use the drivers directly or use a ORM, but our recommendation is to use TypeORM.\n\n\ndevon4node provides a generator to integrate into your project TypeORM. You only need to execute the command:\n\n\n\n\n\n\n\nThen, you must select the database when asked. In this example we will use SQLite.\n\n\nThe output:\n\n\n\n\n\n\n\nNow, you have your project already configured to work with TypeORM.\n\n\n\nSecurity\n\nTo secure your application against common attacks, you only have to execute the following command:\n\n\n\n\n\n\n\nThe output:\n\n\n\n\n\n\n\nThis installs in your application helmet, and enables helmet and CORS\n\n\n\nOpenAPI\n\nTo generate OpenAPI (aka swagger) documentation based in your code, you only need to execute:\n\n\n\n\n\n\n\nThe output:\n\n\n\n\n\n\n\n\nAuthentication\n\nTo know all the details about authenticaiton in a devon4node (or NestJS) application, you can follow this guide.\n\n\nIn order to improve the productivity, devon4node has a code generator to add into your project everything described in that guide:\n\n\n\n\n\n\n\nThe output should something similar to:\n\n\n\n\n\n\n\n\nCreate the employee CRUD\n\nGenerate a CRUD into your project is fast and easy, your only need to execute the following command:\n\n\n\n\n\n\n\nThe output should something similar to:\n\n\n\n\n\n\n\nThis generate the entity, DTOs, controllers and services to expose the CRUD for an empty entity, so now we need to customize it to add the properties, secure the endpoints as described before and improve the default generated OpenAPI documentation.\n\n\n\n\nFill the entity (src/app/employees/model/entities/employee.entity.ts) with the properties and ORM decorators.\n\nListing 114. src/app/employees/model/entities/employee.entity.ts\n\n\n\n\n\n\nFill the DTOs with the properties, the validators and the transformations.\n\nListing 115. src/app/employees/model/dtos/create-employee.dto.ts\n\n\n\n\n\nThe @Expose() decorator is important, if you forget it the transformation pipe will ignore it. It works in that way in order to ignore extra fields that are not defined in the DTO.\n\n\n\nsecure endpoints:\n\nIn order to require authentication to your enpoints, you only need to add the AuthGuard guard as shown below:\n\n\nListing 116. src/app/employees/controllers/employees.controller.ts\n\n\n\n\n\nNow, you need to provide a valid Bearer JWT token in order to use the create endpoint. Also, to require a specific role to use an endpoint, you need to use the provided RolesGuard and specify the allowed roles by using the @Roles decorator:\n\n\nListing 117. src/app/employees/controllers/employees.controller.ts\n\n\n\n\n\n\nAdd swagger metadata\n\nBy default, devon4node installs the @nestjs/swagger plugin. With that plugin, most of the OpenAPI documentation will be generated automatically, but you can provide more information with decorators:\n\n\nListing 118. src/app/employees/controllers/employees.controller.ts\n\n\n\n\n\nAlso, you can add to the OpenAPI documentation the secured endpoints:\n\n\nListing 119. src/app/employees/controllers/employees.controller.ts\n\n\n\n\n\nAs the findAll returns a complex type, the plugin can’t infer the return type properly. To document properly the return type of the findAll you can use the @nestjs/swagger decorators:\n\n\nListing 120. src/app/employees/controllers/employees.controller.ts\n\n\n\n\n\n\nGenerate database migrations\n\nAs you’re building a new application you also need to create the database tables. TypeORM provides a mechanism to generate the database migrations based on your entities:\n\n\n\n\n\n\n\nThe output will be something similar to:\n\n\nListing 121. src/migration/1655725262254-CreateTables.ts\n\n\n\n\n\nThe number in the name is a timestamp, so may change in your application.\n\n\nNow, you can populate the database with the initial data:\n\n\n\n\n\n\n\nand fill in with the following code:\n\n\nListing 122. src/migration/1655725316517-CreateTables.ts\n\n\n\n\n\n\nStart the application: yarn start:dev\n\n\n\n\n\n\n\nCheck the swagger endpoint: http://localhost:3000/v1/api\n\n\n\n\n\n\n\nMake petitions to the employee CRUD: http://localhost:3000/v1/employees\n\n\n\n\n\n\n\n\n\n\n\n\n"}