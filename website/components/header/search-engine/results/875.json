{"type":"doc","filename":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_working-with-decision-tables.html","anchor":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_extended-comparison-syntax","title":"Extended comparison syntax","breadcrumbs":["Tools","Solicitor User Guide","Working with Decision Tables"],"text":"Extended comparison syntax\n\nBy default any condtions given in the fields of decision tables are simple textual comparisons: The condition\nis true if the property of the model is identical to the given value in the XLS (or CSV) sheet.\n\n\nDepending on the configuration of the rule templates for some fields, an extended syntax might be available. For those fields the following syntax applies:\n\n\n\n\nIf the given value of the XLS (or CSV) field starts with the prefix NOT: then the outcome of the remaining condition is logically negated, i.e. this field condition is  true if the rest of the condition is NOT fulfilled.\n\n\nA suffix of (REGEX) indicates that the remainder of the field defines a Java Regular Expression. For the condition to become true the whole property needs to match the given regular expression.\n\n\nThe prefix RANGE: indicates that the remainder of the field defines\na Maven Version Range. Using this makes only sense on the artifact version property.\n\n\nIf no such prefix is detected, then the behavior is identical to the normal (verbatim) comparison logic\n\n\n\n\nFields which are subject to this extended syntax are marked explicitly in the following section.\n\n\n\n\n\n\n\n\nThe former prefix notation of REGEX: is deprecated and should no longer be used. See List of Deprecated Features.\n\n\n\n\n\n\n\n"}