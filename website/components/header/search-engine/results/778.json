{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_migration-from-junit4-to-junit5.html","anchor":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_migration-guide","title":"Migration guide","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Migration from JUnit4 to JUnit5"],"text":"Migration guide\n\nJunit4 to Junit5 migration guide\n\nmrchecker-core-module version 5.6.2.1 features the upgrade of Junit4 to Junit5. Consequently, the Junit4 features are now obsolete and current test projects require migration\nin order to use the latest revision of MrChecker. This site provides guidance on the migration.\n\n\nReferences:\nJunit5 User Guide - https://junit.org/junit5/docs/current/user-guide/#overview\n\n\nPOM\n\nThe project pom.xml file needs to be adjusted in the first place. An exemplary POM file for download can be found here: https://github.com/devonfw/mrchecker/blob/develop/template/pom.xml\n\n\n\nTest Annotations\n\nJunit5 redefines annotations defining a test flow. The annotations need to be adjusted as per the following table.\n\n\n\n\n\n\n\n\nRule, ClassRule, TestRule and TestMethod\n\nJunit4 @Rule and @ClassRule annoations as well as TestRule and TestMethod interfaces have been replaced\nwith the Junit5 extension mechanism (https://junit.org/junit5/docs/current/user-guide/#extensions).\nDuring the migration to Junit5, all the instances of the mentioned types need to be rewritten according to the Junit5 User Guide.\nThe extension mechanism is far more flexible than the Junit4 functionality based on rules.\n\n\nNote: as per Junit5 API spec: ExpectedExceptionSupport,&nbsp;ExternalResourceSupport,&nbsp;VerifierSupport\nprovide native support of the correspoinding Junit4 rules.\n\n\nExtension registration example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTestRule (TestWatcher and ExternalResource) to Extension (TestWatcher and AfterAllCallback) example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage, BasePageAutoRegistration and PageFactory classes\n\nPage class is a new MrChecker class. It was introduced to provide common implemenation for its subpages in specific MrChecker modules.\nIn order to receive test lifecycle notifications, particular Pages need to be registered by calling addToTestExecutionObserver() method.\nTo facilitate this process, PageFactory class was designed and it’s usage is a recommended way of creating Page objects for tests.\nAlthough in MrChecker based on Junit4, the registration process was done in a specific BasePage constructor, it’s been considered error prone and reimplemented.\nFurthermore, to reduce migration cost BasePageAutoRegistration classes are available in MrChceker modules. They use the old way of registration.\nGiven that three ways of migration are possible.\n\n\nMigration with PageFactory class example (RECOMMENDED):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMigration with calling addToTestExecutionObserver() method example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMigration with BasePageAutoRegistration class example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest suites\n\nTest suite migration example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRunning tests from Maven:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConcurrency\n\nJunit5 provides native thread count and parallel execution control in contrast to Junit4 where it was controlled by Maven Surefire plugin.\nTo enable concurrent test execution, junit-platform.properties file needs to placed in the test/resources directory of a project.\n\n\nExemplary file contents:\n\n\n\n\n\n\n\nA ready-to-use file can be found here.\n\n\nMrChecker supports only concurrent test class execution.\n@ResourceLock can be used to synchronize between classes if needed:\n\n\n\n\n\n\n\n\nCucumber\n\nIf Cucumber is used in a project, it is neccessary to change a hook class.\nAn exemplary hook source file for download can be found here.\n\n\n\nData driven tests\n\nJunit5 implements new approach to data driven tests by various data resolution mechanisms.\n\n\nAn example of method source parameters migration version one:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of method source parameters migration version two:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of method source in another class parameters migration:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProviding parameters directly in annotations has no analogy in Junit5 and needs to be replaced with e.g. method source:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of csv parameters source with no header line migration:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of csv parameters source with the header line migration:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of csv parameters source with object mapping migration step1:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn example of csv parameters source with object mapping migration step 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsetUp() and tearDown()\n\nBaseTest.setUp() and BaseTest.tearDown() methods are now not abstract and need no implementation in subclasses. @Override when a custom implemenatation is needed.\n\n\n\n\n\n\n"}