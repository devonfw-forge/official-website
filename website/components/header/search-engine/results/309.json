{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.grpc","title":"Devon4Net.Infrastructure.Grpc","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.Grpc\n\nAs you may know at this point in Grpc communication two parties are involved: the client and the server. The server provides an implementation of a service that the client can access. Both have access to a file that acts as a contract between them, this way each of them can be written in a different language. This file is the protocol buffer.\n\n\nTo learn more you can read \"Grpc Template\" and \"How to use Grpc\" in devon documentation or forward to gRPC official site.\n\n\nConfiguration\n\nGrpc server\n\nThe server does not need any type of specific configuration options other than the certificates, headers or other components that need to be used in the same project.\n\n\n\nGrpc Client\n\nOn the other hand, the client needs the following configuration on the appsettings.{environment}.json file:\n\n\n\n\n\n\n\n\n\nEnableGrpc: Boolean to enable the use of Grpc component.\n\n\nUseDevCertificate: Boolean to bypass validation of client certificate. Only for development purposes.\n\n\nGrpcServer: Grpc server host and port number in the form of Host:Port\n\n\nMaxReceiveMessageSize: Maximum size of message that can be received by the server in MB.\n\n\nRetryPatternOptions: Options for the retry pattern applied when communicating with the server.\n\n\n\nMaxAttempts: Maximum number of communication attempts.\n\n\nInitialBackoffSeconds: Initial delay time for next try in seconds. A randomized delay between 0 and the current backoff value will determine when the next retry attempt is made.\n\n\nMaxBackoffSeconds: Maximum time in seconds that work as an upper limit on exponential backoff growth.\n\n\nBackoffMultiplier: The backoff time will be multiplied by this number in its growth.\n\n\nRetryableStatus: Status of the requests that may be retried.\n\n\n\n\n\n\n\nStatus\nCode\n\n\nOK\n0\n\n\nCancelled\n1\n\n\nUnknown\n2\n\n\nInvalidArgument\n3\n\n\nDeadlineExceeded\n4\n\n\nNotFound\n5\n\n\nAlreadyExists\n6\n\n\nPermissionDenied\n7\n\n\nUnauthenticated\n0x10\n\n\nResourceExhausted\n8\n\n\nFailedPrecondition\n9\n\n\nAborted\n10\n\n\nOutOfRange\n11\n\n\nUnimplemented\n12\n\n\nInternal\n13\n\n\nUnavailable\n14\n\n\nDataLoss\n0xF\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up in Devon\n\nGrpc Server\n\nFor setting up a Grpc server in a devon project you will need to first create the service that implements the contract specified in the proto file. Below an example of service is shown:\n\n\n\n\n\n\n\nThis previous example of service will be extending the following protocol buffer (.proto file):\n\n\n\n\n\n\n\nOnce you have all your services created you will need to add them as Grpc services on your server. All of the services marked with the GrpcDevonService attribute will be automatically added, but you need to specify the assembly names where they are implemented. For that you can modify the following lines in the Program.cs file:\n\n\n\n\n\n\n\nSetupGrpcServices method will accept a list of assembly names so feel free to organize your code as desired.\n\n\n\nGrpc Client\n\nIn the client side, you will need to add the configuration with your own values on the appsettings.{environment}.json file, for that copy the configuration JSON shown in the previous part and add your own values.\n\n\nEverything is ready if you are using the template. So next step will be use the GrpcChanel via dependency injection and use the service created before as shown:\n\n\n\n\n\n\n\n\n\nSetting up in other projects\n\nGrpc Server\n\nFor setting up a Grpc server in other projects you will need to install the component running the following command in the Package Manager Console, or using the Package Manager in Visual Studio:\n\n\n\n\n\n\n\nThis will install all the packages the component needs to work properly. Navigate to your Program.cs file and add the following lines to configure the component.\n\n\n\n\n\n\n\nYou will need to add the assembly names for the services you created in the following line, so they can be automatically deployed to your server:\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease refer to \"Grpc template\" and \"How to use Grpc\" documentation to learn more.\n\n\n\n\n\n\nGrpc Client\n\nFor setting up a Grpc client in other projects you will need to install the component running the following command in the Package Manager Console, or using the Package Manager in Visual Studio:\n\n\n\n\n\n\n\nNow set the configuration in the appsettings.{enviroment}.json file as follows:\n\n\n\n\n\n\n\nNavigate to your Program.cs file and add the following lines to configure the component:\n\n\n\n\n\n\n\nFollowing this steps will allow you to use GrpcChannel via dependency injection in your classes, so you can call any procedure through Grpc communication.\n\n\n\n\n\n"}