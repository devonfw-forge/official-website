{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-avoid-cross-site-request-forgery-xsrf-or-csrf-attacks","title":"How to: Avoid cross-site request forgery (XSRF or CSRF) attacks","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Avoid cross-site request forgery (XSRF or CSRF) attacks\n\nEvery time you authenticate into a web app, your browser becomes trusted for an amount of time to that specific site. This way you can use the application without having to authenticate yourself each time you want to do an operation that requires authorization. This is achieved normally by providing authentication tokens that last a determinate amount of time.\n\n\nYour browser includes in each request a token issued by the app at the moment of authentication, the app verifies it and then sends back the response. A cross-site request forgery is a type of attack where a malicious site can use your authentication token to issue requests through your browser.\n\n\nThis is done, without you even noticing and it works because browser requests automatically include all session cookies. So if the request is done from another site with all these cookies (including your authentication cookie) it wont be different from you actually doing the request.\n\n\nFor example, you enter the site vulnerable-bank.com and forget to log out after doing all of your operations. Now you are surfing the net and enter the site malicious-site.com this site has a hidden script that performs the following request:\n\n\n\n\n\n\n\nAs all the session cookies are included in the request, the site will be allowed to process the transaction without you even noticing.\n\n\nThe most common way to prevent this vulnerability is by making use of anti forgery tokens. This token is placed in the headers and is issued with the request. The malicious-site cannot\n\n\nConfiguration\n\nTo configure Anti-Forgery protection in a devon4net project, you must set UseXsrf property in devonfw configuration section to true. You will find this section in appsettings.json:\n\n\n\n\n\n\n\nSetting this property to true will allow you to use IAntiforgery interface through the service provider and dependency injection in your project.\n\n\n\nUse\n\nIn the devon4net Web API Templaate you will be able to find an example of controller using this protection. You can inject the IAntiforgery interface in the controller constructor like so:\n\n\n\n\n\n\n\nNow you can access its methods to manage this special token. For creating one we can use GetAndStoreTokens(HttpContext httpContext) method available on IAntiforgery, and store it in the cookies as shown below:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nVisit the documentation about this interface to find more information about IAntiforgery methods.\n\n\n\n\n\nThis will be done through a GET request. Now we can vaklidate this token in a controller thanks to the attribute [ValidateAntiForgeryToken]:\n\n\n\n\n\n\n\n\nTesting\n\nWe will be using Postman to test the use of the controller, as you can see in the next figure, if we try to access the end-point protected by the antiforgery token validation we get an error:\n\n\n\n\n\nFigure 25. HelloSecured end-point error\n\n\nThat is beacuse no valid token in XSRF-TOKEN header is specified. Lets access the end-point we created to provide an XSRF token:\n\n\n\n\n\nFigure 26. Get XSRF token end-point\n\n\nNow that we have the token we can specify it in the request header as shown in the next figure:\n\n\n\n\n\nFigure 27. HelloSecured end-point access\n\n\n\nReferences\n\nHere are some interesting references to continue learning about this topic:\n\n\n\n\nCross Site Request Forgery (CSRF) - Owasp\n\n\nCross Site Request Forgery Prevention Cheat Sheet - Owasp\n\n\nPrevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core - Microsoft Docs\n\n\nIAntiforgery Interface - Microsoft Docs\n\n\n\n\n\n\n"}