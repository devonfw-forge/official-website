{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.aws.secrets","title":"Devon4Net.Infrastructure.AWS.Secrets","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.AWS.Secrets\n\nSecrets Manager allows you to replace hardcoded credentials, such as passwords, in your code with an API call to Secrets Manager to retrieve the secret programmatically.\nBecause the secret no longer exists in the code, it cannot be compromised by someone examining your code.\nYou can also set Secrets Manager to automatically rotate the secret for you on a predefined schedule.\nThis allows you to replace long-term secrets with short-term ones, lowering the risk of compromise significantly.\n\n\nConfiguration\n\nThe following configuration is for AWS in general and can be done in appsettings.{environment}.json file as follows:\n\n\n\n\n\n\n\n\n\nUseSecrets: Boolean that indicates if AWS Secrets Manager is being used.\n\n\nUseParameterStore: Boolean to indicate if AWS Parameter Store is being used.\n\n\nCredentials: Credentials for connecting with AWS.\n\n\n\nProfile: A collection of settings is called a profile. This would be the name for the current settings.\n\n\nRegion: AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you.\n\n\nAccessKeyId: Access key ID portion of the keypair configured to access your AWS account.\n\n\nSecretAccessKey: Secret access key portion of the keypair configured to access your AWS account.\n\n\n\n\n\n\n\n\nKey Classes\n\nWe have to ways to work with this component. One of them is to inject the AwsSecretsHandler and use its methods, and the other way to use the component is using the Configuration Builder.\n\n\nHandler\n\nThe IAwsSecretsHandler interface  and AwsSecretsHandler implementation provides you with some asynchronous operations like the following:\n\n\n\n\n\n\n\n\n\nReturns\nMethod\nDescription\n\n\nTask&lt;IReadOnlyList&lt;SecretListEntry&gt;&gt;\nGetAllSecrets(CancellationToken cancellationToken)\nRetreives all secrets list.\n\n\nTask&lt;T&gt;\nGetSecretString&lt;T&gt;(string secretId)\nRetrieves a string secret from Secrets Manager by its Id.\n\n\nTask&lt;byte[]&gt;\nGetSecretBinary(string secretId)\nRetrieves a binary secret from Secrets Manager by its Id.\n\n\nTask&lt;GetSecretValueResponse&gt;\nGetSecretValue(GetSecretValueRequest request, CancellationToken cancellationToken = default)\nRetrieves the contents of the encrypted fields SecretString or SecretBinary from the specified version of a secret, whichever contains content.\n\n\n\n\nTo use it inject the class AwsSecretsHandler provided with the package or create an instance. The handler instance will need the awsCredentials and the regionEndpoint.\n\n\nThere is no configuration class for the component so you will need to do something similar to the following in your startup project if you want to use it via depencency injection:\n\n\n\n\n\n\n\n\nConfiguration Builder\n\nThe AwsSecretsConfigurationBuilder allows you to configure the component in a different way, by including all the paremeters in the configuration builder, you can do it as follows:\n\n\n\n\n\n\n\n\n\nSet up in devon\n\nSome templates have already all he packages referenced so you wonâ€™t need to install anything. If that is not the case, you can install it as explained in Set up in other projects.\n\n\n\n\n\n\n\n\nRead the template documentation to learn more about it.\n\n\n\n\n\n\nSet up in other projects\n\nFor setting it up in other projects you will need to install the package:\n\n\n\n\n\n\n\nAnd then you can start using via dependency injection or by creating instances as shown in the Configuration section.\n\n\n\nReferences\n\n\n\nSecrets Manager User Guide\n\n\nSecrets Manager API Reference\n\n\n\n\n\n\n\n"}