{"type":"doc","filename":"devonfw-guide_devon4net.wiki_howto.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_how-to-create-a-new-devon4net-project","title":"How to: Create a new devon4net project","breadcrumbs":[".net","How To section","How to use devon4net"],"text":"How to: Create a new devon4net project\n\nIn this part, you will learn you how to easily create a new project using devon4net libraries and start working on it. You can create a variety of applications thanks to the different templates available. There are also multiple ways to create a new project, we will show you the most common ways.\n\n\n\n\n\nNote\n\n\nThe configuration characteristics are not covered in this document. Please feel free to read the documentation for each component to discover how they work and the configuration options available.\n\n\n\n\n\nCommand Line Interface (CLI)\n\nThis is the fastest and most efficient way. You will be installing and starting a project thanks to the template available in the NuGet Gallery using CLI. For this part you will need to have .NET 6.0 SDK installed. You can run the following command to check your version:\n\n\n\n\n\n\n\nIf you don’t get any response please follow the installation guide provided by Microsoft to install the latest version of .Net SDK for your OS.\n\n\nStep 1 - Install the Template\n\nOpen your favourite terminal (Windows/Linux/macOS) and run the command showed below to install the latest version of the the devon4net web API template:\n\n\n\n\n\n\n\nWe recommend you updating the template to the latest version. However, using the following option, you can select the version of your interest:\n\n\n\n\n\n\n\nNow you will have the template available in your Visual Studio 2022. Just type devon4net in the search bar when creating a new project!\n\n\n\n\n\nFigure 17. Devon4Net API template in VS2022\n\n\n\nStep 2 - Create a new project\n\nTo create a new project run the following command:\n\n\n\n\n\n\n\nThis will create a project with the default name in the actual directory. If you want to specify the desired name and output directory you can specify the following options:\n\n\n\n\n\n\n\nYou can do it also choosing the template when creating a new project in Visual Studio 2022 as shown in figure 1, and configuring the name and output directory as shown in figure 2.\n\n\n\n\n\nFigure 18. Devon4Net API template in VS2022\n\n\n\nStep 3 - Run it\n\nAfter running it with Kestrel you will be able to access to the swagger index.html and try the API in the following xref:devonfw-guide/devon4net.wiki_ https://localhost:8085/swagger/index.html\n\n\n\n\nCreate it from scratch in Visual Studio 2022\n\nThis method is a little more time consuming, but it allows for a more customized configuration and project structure. You will be using Visual Studio 2022 to create the project and add everything you need by hand.\n\n\nStep 1 - Create a new project\n\nCreate a new ASP.NET Core Web API project using the template provided by Visual Studio. You can type api in the search bar and select it as shown in figure 3.\n\n\n\n\n\nFigure 19. ASP.NET Core Web API template in VS2022\n\n\nOnce you go through all the initial configuration process, choosing a name, location and so on; you will find your project as shown in the next image.\n\n\n\n\n\nFigure 20. Default ASP.NET Core Web API template structure\n\n\nYou can delete both WeatherForecastController.cs and WeatherForecast.cs as they are an example in the template but we recommend you keeping them so you can try the API when done with all the steps.\n\n\n\nStep 2 - Add the NuGet reference\n\nTo install the NuGet package for the API Configuration we will use the Visual Studio package manager console. To open it, go to View &gt; Other Windows &gt; Package Manager Console as shown in the figure below.\n\n\n\n\n\nFigure 21. Package Manager Console location in menu\n\n\nNow you can run the following command. It will take a minute to download and install all the packages:\n\n\n\n\n\n\n\nOnce its done, you should be able to see the dependency in the Package Dependencies of the project.\n\n\n\nStep 3 - Set up your project\n\nNow you will need to add some configuration in the Program.cs. The following lines will initialize the configuration for the WebHostBuilder and configure the components that were imported with the NuGet installation respectively, making use of extensions methods for the ServiceCollection and WebHostBuilder classes:\n\n\n\n\n\n\n\nNow you’ll need to configure the middlewares included with the following line:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nDon’t forget to import the package to be able to use this methods!\n\n\n\n\n\nIt is not necessary, but we recommend to also setup the logger so you can keep track of the trace running:\n\n\n\n\n\n\n\nThe Program.cs will end up looking like this:\n\n\n\n\n\n\n\n\nStep 4 - Configure components\n\nThe lines added on the previous step will need some configuration in the appsettings.json:\n\n\n\n\n\n\n\nAnd also in the appsettings.Development.json:\n\n\n\n\n\n\n\n\n\nUnable to start devon4net template on macOS or older Windows Versions\n\nIf you try to execute the devon4net template on macOS or an earlier version of Windows, such as Windows 7, you will receive the following error message:\n\n\n\n\n\n\n\nBecause these operating systems lack ALPN(Application-Layer Protocol Negotiation) functionality, Kestrel does not handle HTTP/2 with TLS.\n\n\nTo resolve this, navigate to 'appsettings.json' and change the Kestrel configuration as seen below:\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nHTTP/2 without TLS should only be used during app development. Production apps should always use transport security.\n\n\n\n\n\n\nReferences\n\nHere are some interesting references to continue learning about this topic:\n\n\n\n\nInstall .NET on your OS - Microsoft Docs\n\n\n.NET CLI overview - Microsoft Docs\n\n\ndotnet new --install option - Microsoft Docs\n\n\ndotnet new - Microsoft Docs\n\n\n\n\n\n\n"}