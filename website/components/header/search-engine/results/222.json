{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-structure-classic.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-structure-classic.asciidoc_deployment","title":"Deployment","breadcrumbs":["Java","Spring","Classic project structure"],"text":"Deployment\n\n\n\nMake jar not war\n\n\n\n— Josh Long\n\n\n\nFirst of all it is important to understand that the above defined modules aim to make api, core, and batch reusable artifacts, that can be used as a regular maven dependency.\nOn the other hand to build and deploy your application you want a final artifact that is containing all required 3rd party libraries.\nThis artifact is not reusable as a maven dependency.\nThat is exactly the purpose of the server module to build and package this final deployment artifact.\nBy default we first build a regular WAR file with maven in your server/target directory (*-server-«version».war) and in a second step create a bootified WAR out of this (*-server-bootified.war).\nThe bootified WAR file can then be started standalone (java -jar «filename».war).\nHowever, it is also possible to deploy the same WAR file to a servlet container like tomcat or jetty.\nAs application servers and externally provided servlet containers are not recommendet anymore for various reasons (see JEE), you may also want to create a bootified JAR file instead.\nAll you need to do in that case is to change the packaging in your server/pom.xml from war to jar.\n\n\n\n"}