{"type":"doc","filename":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_usage.html","anchor":"devonfw-guide_solicitor.wiki_master-solicitor.asciidoc_project-configuration-file","title":"Project Configuration File","breadcrumbs":["Tools","Solicitor User Guide","Usage"],"text":"Project Configuration File\n\nThe project configuration of Solicitor is done via a configuration file in\nJSON format. This configuration file defines the engagements and applications master data, configures the readers for importing component and license information, references the business rules to be applied and defines the exports to be done.\n\n\nThe config file has the following skeleton:\n\n\n\n\n\n\n\n\n\n1\nThe leading data defines the engagement master data, see Header and Engagement Master Data\n\n\n2\napplications  defines the applications within the engagement and configures the readers to import the component/license information, see Applications\n\n\n3\nrules references the rules to apply to the imported data, see Business Rules\n\n\n4\nwriters configures how the processed data should be exported, see Writers and Reporting\n\n\n5\nadditionalWriters defines optional additional project specific writers without overwriting already defined writers, see Writers and Reporting\n\n\n\n\n\n\n\n\n\n\nThe following section describes all sections of the Solicitor configuration file format. Often the configuration of writers and especially rules will be identical for projects. To facilitate the project specific configuration setup Solicitor internally provides a base configuration which contains reasonable defaults for the rules and writers section. If the project specific configuration file omits the rules and/or writers sections then the corresponding settings from the base configuration will be taken. For details see Default Base Configuration.\n\n\n\n\n\n\n\n\n\n\n\nIf locations of files are specified within the configuration files as relative\npathnames then this is always evaluated relative to the current working directory (which\nmight differ from the location of the configuration file). If some file location\nshould be given relative to the location of the configuration file this might be done\nusing the special placeholder ${cfgdir} as described in the following.\n\n\n\n\n\nPlaceholders within the configuration file\n\nWithin certain parts of the configuration file (path and filenames) special placeholders might be used to parameterize the configuration. These areas are explicitely marked in the following\ndescription.\n\n\nThese placeholders are available:\n\n\n\n\n${project} - A simplified project name (taking the engagement name,\nremoving all non-word characters and converting to lowercase).\n\n\n${cfgdir} -  If the config file was loaded from the filesystem this denotes the directory where the config file resides, .  otherwise. This can be used to reference locations relative to the location of the config file.\n\n\n\n\n\nHeader and Engagement Master Data\n\nThe leading section of the config file defines some metadata and the engagement master data.\n\n\n\n\n\n\n\n\n\n1\nversion of the config file format (currently needs to be 1)\n\n\n2\nis a free text comment (no further function at the moment)\n\n\n3\nthe engagement name (any string)\n\n\n4\nthe engagement type; possible values: INTERN, EXTERN\n\n\n5\nname of the client (any string)\n\n\n6\nthe go-to-market-model; possible values: LICENSE\n\n\n7\ndoes the contract explicitely allow OSS? (boolean)\n\n\n8\nis the companies OSS policy followed? (boolean)\n\n\n9\ndoes the customer provide the OSS? (boolean)\n\n\n\n\n\nApplications\n\nWithin this section the different applications (=deliverables) of the engagement are defined. Furtheron for each application at least one reader needs to be defined which imports the component and license information.\n\n\n\n\n\n\n\n\n\n1\nThe name of the application / deliverable (any string)\n\n\n2\nVersion identifier of the application (any string)\n\n\n3\nURL of the source repo of the application (string; should be an URL)\n\n\n4\nprogramming ecosystem (any string; e.g. Java8; Android/Java, iOS / Objective C)\n\n\n5\nmultiple readers might be defined per application\n\n\n6\nthe type of reader; for possible values see Reading License Information with Readers\n\n\n7\nlocation of the source file to read (ResourceLoader-URL)\n\n\n8\nusage pattern; possible values: DYNAMIC_LINKING, STATIC_LINKING, STANDALONE_PRODUCT\n\n\n9\nrepoType: Repository to download the sources from: currently possible values: maven, npm; if omitted then \"maven\" will be taken as default\n\n\n10\nplaceholder patterns might be used here\n\n\n\n\nThe different readers are described in chapter Reading License Information with Readers\n\n\n\nBusiness Rules\n\nBusiness rules are executed within a Drools rule engine.\nThey are defined as a sequence of rule templates and corresponding XLS (or CSV) files which together represent decision tables.\n\n\n\n\n\n\n\n\n\n1\ntype of the rule; only possible value: dt which stands for \"decision table\"\n\n\n2\nif set to true the processing of this group of rules will be skipped if the XLS/CSV with table\ndata (given by ruleSource) does not exist; if set to false a missing XLS/CSV table will result\nin program termination\n\n\n3\nlocation of the tabular decision table data. This might either point directly to the XLS or CSV file\nor only give the resource name without suffix. In this case Solictor will dynamically test for existing\nresources by appending suffixes xls and csv.\n\n\n4\nlocation of the drools rule template to be used to define the rules together with the decision table data\n\n\n5\nid of the group of rules; used to reference it e.g. when doing logging\n\n\n6\nsome textual description of the rule group\n\n\n7\nflag to control which level of deprecation (see Feature Deprecation) applies to this rule group; optional and only applicable if deprecationDetails is also defined.\n\n\n8\noptional value; if set then the use of the defined decision table is deprecated; the\ngiven string will be given as part of the log message\n\n\n9\nplaceholder patterns might be used here\n\n\n\n\nWhen running, Solicitor will execute the rules of each rule group separately and in the order\ngiven by the configuration. Only if there are no more rules to fire in a group Solicitor will\nmove to the next rule group and start firing those rules.\n\n\nNormally a project will only customize (part of) the data of the decision tables and thus will only change the ruleSource and the data in the XLS/CSV.\nAll other configuration (the different templates and processing order) is part of the Solicitor application itself and should not be changed by end users.\n\n\nSee Working with Decision Tables and Standard Business Rules for further information on the business rules.\n\n\n\nWriters and Reporting\n\nThe writer configuration defines how the processed data will be exported and/or reported.\n\n\n\n\n\n\n\n\n\n1\ntype of writer to be selected; possible values: xls, velo\n\n\n2\npath to the template to be used\n\n\n3\nlocation of the output file\n\n\n4\nsome textual description\n\n\n5\nreference to SQL statements used to transform the internal data model to data tables used for reporting\n\n\n6\nplaceholder patterns might be used here\n\n\n\n\nIf a writers section is defined in the project configuration then it will replace the writer configuration given in the\nbuiltin default configuration.\nIf you want to just add additional project specific writers then you might define them in the (optional)\nadditionalWriters section of the project configuration file. These get processed\nadditionally to the default writers. The section additionalWriters has the same attributes as the standard writers configuration.\n\n\n\n\n\n\n\nFor details on the writer configuration see Reporting and Creating output documents.\n\n\n\n\n"}