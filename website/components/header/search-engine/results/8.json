{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-i18n.asciidoc","title":"Internationalization","breadcrumbs":["Java","Spring","Guides"],"text":"Internationalization\n\nInternationalization (I18N) is about writing code independent from locale-specific information.\nFor I18N of text messages we are suggesting\nmmm native-language-support.\n\n\nIn devonfw we have developed a solution to manage text internationalization. devonfw solution comes into two aspects:\n\n\n\n\nBind locale information to the user.\n\n\nGet the messages in the current user locale.\n\n\n\n\nBinding locale information to the user\n\nWe have defined two different points to bind locale information to user, depending on user is authenticated or not.\n\n\n\n\nUser not authenticated: devonfw intercepts unsecured request and extract locale from it. At first, we try to extract a language parameter from the request and if it is not possible, we extract locale from Ã€ccept-language` header.\n\n\nUser authenticated. During login process, applications developers are responsible to fill language parameter in the UserProfile class. This language parameter could be obtain from DB, LDAP, request, etc. In devonfw sample we get the locale information from database.\n\n\n\n\nThis image shows the entire process:\n\n\n\n\n\n\n\n\nGetting internationalizated messages\n\ndevonfw has a bean that manage i18n message resolution, the ApplicationLocaleResolver. This bean is responsible to get the current user and extract locale information from it and read the correct properties file to get the message.\n\n\nThe i18n properties file must be called ApplicationMessages_la_CO.properties where la=language and CO=country. This is an example of a i18n properties file for English language to translate devonfw sample user roles:\n\n\nApplicationMessages_en_US.properties\n\n\n\n\n\n\n\nYou should define an ApplicationMessages_la_CO.properties file for every language that your application needs.\n\n\nApplicationLocaleResolver bean is injected in AbstractComponentFacade class so you have available this bean in logic layer so you only need to put this code to get an internationalized message:\n\n\n\n\n\n\n\n\n\n\n\n"}