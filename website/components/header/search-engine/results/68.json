{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_maven-build-integration.html","anchor":"devonfw-guide_cobigen.wiki_cobigen-maven_configuration.asciidoc","title":"Maven Build Integration","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","Maven Build Integration"],"text":"Maven Build Integration\n\nFor maven integration of CobiGen you can include the following build plugin into your build:\n\n\nListing 156. Build integration of CobiGen\n\n\n\n\n\nAvailable goals\n\n\n\n\ngenerate: Generates contents configured by the standard non-compiled configuration folder. Thus generation can be controlled/configured due to an location URI of the configuration and template or increment ids to be generated for a set of inputs.\n\n\n\n\nAvailable phases are all phases, which already provide compiled sources such that CobiGen can perform reflection on it. Thus possible phases are for example package, site.\n\n\nProvide Template Set\n\nFor generation using the CobiGen maven plug-in, the CobiGen configuration can be provided in two different styles:\n\n\n\n\nBy a configurationFolder, which should be available on the file system whenever you are running the generation. The value of configurationFolder should correspond to the maven file path syntax.\n\nListing 157. Provide CobiGen configuration by configuration folder (file)\n\n\n\n\n\n\nBy maven dependency, whereas the maven dependency should stick on the same conventions as the configuration folder. This explicitly means that it should contain non-compiled resources as well as the context.xml on top-level.\n\nListing 158. Provide CobiGen configuration by maven dependency (jar)\n\n\n\n\n\nWe currently provide a generic deployed version of the templates on the devonfw-nexus for Register Factory (&lt;artifactId&gt;cobigen-templates-rf&lt;/artifactId&gt;) and for the devonfw itself (&lt;artifactId&gt;cobigen-templates-devonfw&lt;/artifactId&gt;).\n\n\n\n\n\n\nBuild Configuration\n\nUsing the following configuration you will be able to customize your generation as follows:\n\n\n\n\n&lt;destinationRoot&gt; specifies the root directory the relative destinationPath of CobiGen templates configuration should depend on. Default ${basedir}\n\n\n&lt;inputPackage&gt; declares a package name to be used as input for batch generation. This refers directly to the CobiGen Java Plug-in container matchers of type package configuration.\n\n\n&lt;inputFile&gt; declares a file to be used as input. The CobiGen maven plug-in will try to parse this file to get an appropriate input to be interpreted by any CobiGen plug-in.\n\n\n&lt;increment&gt; specifies an increment ID to be generated. You can specify one single increment with content ALL to generate all increments matching the input(s).\n\n\n&lt;template&gt; specifies a template ID to be generated. You can specify one single template with content ALL to generate all templates matching the input(s).\n\n\n&lt;forceOverride&gt; specifies an overriding behavior, which enables non-mergeable resources to be completely rewritten by generated contents. For mergeable resources this flag indicates, that conflicting fragments during merge will be replaced by generated content. Default: false\n\n\n&lt;failOnNothingGenerated&gt; specifies whether the build should fail if the execution does not generate anything.\n\n\n\n\nListing 159. Example for a simple build configuration\n\n\n\n\n\n\nPlugin Injection Since v3\n\nSince version 3.0.0, the plug-in mechanism has changed to support modular releases of the CobiGen plug-ins. Therefore, you need to add all plug-ins to be used for generation. Take the following example to get the idea:\n\n\nListing 160. Example of a full configuration including plugins\n\n\n\n\n\n\nA full example\n\n\n\nA complete maven configuration example\n\n\n\n\n\n\n\n\n\n\n\n\n"}