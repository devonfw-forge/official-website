{"type":"doc","filename":"devonfw-guide_devon4j.wiki_decision-between-Spring-and-Quarkus.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_decision-between-spring-and-quarkus.asciidoc_quarkus","title":"Quarkus","breadcrumbs":["Java","General","Decision between Spring and Quarkus"],"text":"Quarkus\n\nQuarkus main information:\n\nQuarkus is a full-stack, Kubernetes-native Java framework made for JVMs.\nWith its container-first-philosophy and its native compilation with GraalVM, Quarkus optimizes Java for containers with low memory usage and fast startup times.\n\n\nQuarkus achieves this in the following ways:\n\n\n\n\nFirst Class Support for GraalVM\n\n\nBuild Time Metadata Processing: As much processing as possible is done at build time, so your application will only contain the classes that are actually needed at runtime. This results in less memory usage, and also faster startup time, as all metadata processing has already been done.\n\n\nReduction in Reflection Usage: Quarkus tries to avoid reflection as much as possible in order to reduce startup time and memory usage.\n\n\nNative Image Pre Boot: When running in a native image, Quarkus pre-boots as much of the framework as possible during the native image build process.\nThis means that the resulting native image has already run most of the startup code and serialized the result into the executable, resulting in an even faster startup-time.\n\n\n\n\nThis gives Quarkus the potential for a great platform for serverless cloud and Kubernetes environments.\nFor more information about Quarkus and its support for devonfw please refer to the Quarkus introduction guide.\n\n\nAlthough Quarkus has been released to a stable release in early 2021, it has been already used in multiple big projects successfully showing its potential to implement cloud native services with low resource consumption matching the needs of scalability and resilience in cloud native environments.\nWith major stakeholders behind the open source community like Red Hat, its development and growth from its kickoff to the current state is very impressive and really shows the market needs and focus.\nAnother big advantage of Quarkus is that it started on a green field and therefore did not need to circumvent main pillars of the spring framework like reflection, being able to take clean and up-to-date design decisions not needing to cope with legacy issues.\nNonetheless, there is a experimental support also for some spring libraries already available in Quarkus, which make switching from spring to Quarkus much more easier if needed.\nWe also provide a guide for Spring developers who want to adopt or try Quarkus for their (next) projects as it really has some gamechanging advantages over Spring.\n\n\n\nPros:\n\n\n\nfast turn-around cycles for developers: Save changes in your Java code and immediately test the results without restarting or waiting\n\n\nfaster start-up and less memory footprint:\nWhen building your app as native-images via GraalVM it gets highly optimized. As a result it starts up lightning fast and consumes much less memory.\nThis is a great advantage for cloud deployment as well as for sustainability.\nYou can find a performance comparison between Spring and Quarkus here.\n\n\nclean and lean: As Quarkus was born as cloud-native framework it is very light-weight and does not carry much history and legacy.\n\n\n\n\n\nCons:\n\n\n\nless flexible:\nQuarkus is less flexible compared to spring or in other words it is more biased and coupled to specific implementations. However, the implementations just work and you have less things to choose and worry about.\nHowever, in case you want to integrate a specific or custom library you may hit limitations or lose support for native-images especially when that library is based on reflection.\nTherefore, check your requirements and technology stack early on when making your choice.\n\n\nless established:\nSince Quarkus was born in 2019 it is modern but also less established. It will be easier to get developers for spring but we already consider Quarkus mature and established enought for building production ready apps.\n\n\n\n\n\n\n"}