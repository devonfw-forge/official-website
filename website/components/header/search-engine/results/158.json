{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-jpa.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-jpa.asciidoc_embeddable","title":"Embeddable","breadcrumbs":["Java","General","Java Persistence API"],"text":"Embeddable\n\nAn embeddable Object is a way to group properties of an entity into a separate Java (child) object. Unlike with implement relationships the embeddable is not a separate entity and its properties are stored (embedded) in the same table together with the entity. This is helpful to structure and reuse groups of properties.\n\n\nThe following example shows an Address implemented as an embeddable class:\n\n\n\n\n\n\n\nAs you can see an embeddable is similar to an entity class, but with an @Embeddable annotation instead of the @Entity annotation and without primary key or modification counter.\nAn Embeddable does not exist on its own but in the context of an entity.\nAs a simplification Embeddables do not require a separate interface and ETO as the bean-mapper will create a copy automatically when converting the owning entity to an ETO.\nHowever, in this case the embeddable becomes part of your api module that therefore needs a dependency on the JPA.\n\n\nIn addition to that the methods equals(Object) and hashCode() need to be implemented as this is required by Hibernate (it is not required for entities because they can be unambiguously identified by their primary key). For some hints on how to implement the hashCode() method please have a look here.\n\n\nUsing this AddressEmbeddable inside an entity class can be done like this:\n\n\n\n\n\n\n\nThe @Embedded annotation needs to be used for embedded attributes. Note that if in all columns of the embeddable (here Address) are null, then the embeddable object itself is also null inside the entity. This has to be considered to avoid NullPointerExceptionâ€™s. Further this causes some issues with primitive types in embeddable classes that can be avoided by only using object types instead.\n\n\n\n"}