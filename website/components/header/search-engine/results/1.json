{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_spring_guide-spring-configuration.asciidoc","title":"Configuration","breadcrumbs":["Java","Spring","Guides"],"text":"Configuration\n\nInternal Application Configuration\n\nThere usually is a main configuration registered with main Spring Boot App, but differing configurations to support automated test of the application can be defined using profiles (not detailed in this guide).\n\n\nSpring Boot Application\n\nFor a complete documentation, see the Spring Boot Reference Guide.\n\n\nWith spring-boot you provide a simple main class (also called starter class) like this:\ncom.devonfw.mtsj.application\n\n\n\n\n\n\n\nIn an devonfw application this main class is always located in the &lt;basepackage&gt; of the application package namespace (see package-conventions). This is because a spring boot application will automatically do a classpath scan for components (spring-beans) and entities in the package where the application main class is located including all sub-packages. You can use the @ComponentScan and @EntityScan annotations to customize this behaviour.\n\n\nIf you want to map spring configuration properties into your custom code please see configuration mapping.\n\n\n\nStandard beans configuration\n\nFor basic bean configuration we rely on spring boot using mainly configuration classes and only occasionally XML configuration files. Some key principle to understand Spring Boot auto-configuration features:\n\n\n\n\nSpring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies and annotated components found in your source code.\n\n\nAuto-configuration is non-invasive, at any point you can start to define your own configuration to replace specific parts of the auto-configuration by redefining your identically named bean (see also exclude attribute of @SpringBootApplication in example code above).\n\n\n\n\nBeans are configured via annotations in your java code (see dependency-injection).\n\n\nFor technical configuration you will typically write additional spring config classes annotated with @Configuration that provide bean implementations via methods annotated with @Bean. See spring @Bean documentation for further details. Like in XML you can also use @Import to make a @Configuration class include other configurations.\n\n\nMore specific configuration files (as required) reside in an adequately named subfolder of:\n\n\nsrc/main/resources/app\n\n\n\nBeanMapper Configuration\n\nIn case you are still using dozer, you will find further details in bean-mapper configuration.\n\n\n\nSecurity configuration\n\nThe abstract base class BaseWebSecurityConfig should be extended to configure web application security thoroughly.\nA basic and secure configuration is provided which can be overridden or extended by subclasses.\nSubclasses must use the @Profile annotation to further discriminate between beans used in production and testing scenarios. See the following example:\n\n\nListing 19. How to extend BaseWebSecurityConfig for Production and Test\n\n\n\n\n\nSee WebSecurityConfig.\n\n\n\nWebSocket configuration\n\nA websocket endpoint is configured within the business package as a Spring configuration class. The annotation @EnableWebSocketMessageBroker makes Spring Boot registering this endpoint.\n\n\n\n\n\n\n\n\n\nExternal Application Configuration\n\napplication.properties files\n\nHere is a list of common properties provided by the Spring framework.\n\n\nFor a general understanding how spring-boot is loading and boostrapping your application.properties see spring-boot external configuration.\n\n\nThe following properties files are used in devonfw application:\n\n\n\n\nsrc/main/resources/application.properties providing a default configuration - bundled and deployed with the application package. It further acts as a template to derive a tailored minimal environment-specific configuration.\n\n\nsrc/main/resources/config/application.properties providing additional properties only used at development time (for all local deployment scenarios). This property file is excluded from all packaging.\n\n\nsrc/test/resources/config/application.properties providing additional properties only used for testing (JUnits based on spring test).\n\n\n\n\nFor other environments where the software gets deployed such as test, acceptance and production you need to provide a tailored copy of application.properties. The location depends on the deployment strategy:\n\n\n\n\nstandalone run-able Spring Boot App using embedded tomcat: config/application.properties under the installation directory of the spring boot application.\n\n\ndedicated tomcat (one tomcat per app): $CATALINA_BASE/lib/config/application.properties\n\n\ntomcat serving a number of apps (requires expanding the wars): $CATALINA_BASE/webapps/&lt;app&gt;/WEB-INF/classes/config\n\n\n\n\nIn this application.properties you only define the minimum properties that are environment specific and inherit everything else from the bundled src/main/resources/application.properties. In any case, make very sure that the classloader will find the file.\n\n\n\nDatabase Configuration\n\nThe configuration for spring and Hibernate is already provided by devonfw in our sample application and the application template. So you only need to worry about a few things to customize.\n\n\nDatabase System and Access\n\nObviously you need to configure which type of database you want to use as well as the location and credentials to access it. The defaults are configured in application.properties that is bundled and deployed with the release of the software. The files should therefore contain the properties as in the given example:\n\n\n\n\n\n\n\nFor further details about database.hibernate.hbm2ddl.auto please see here. For production and acceptance environments we use the value validate that should be set as default. In case you want to use Oracle RDBMS you can find additional hints here.\n\n\nIf your application supports multiples database types, set spring.profiles.active=XXX in src/main/resources/config/application.properties choose database of your choice. Also, one has to set all the active spring profiles in this application.properties and not in any of the other application.properties.\n\n\n\nDatabase Logging\n\nAdd the following properties to application.properties to enable logging of database queries for debugging purposes.\n\n\n\n\n\n\n\n\n\n\nSecurity\n\nPassword Encryption\n\nIn order to support encrypted passwords in spring-boot application.properties all you need to do is to add jasypt-spring-boot as dependency in your pom.xml (please check for recent version here):\n\n\n\n\n\n\n\nThis will smoothly integrate jasypt into your spring-boot application. Read this HOWTO to learn how to encrypt and decrypt passwords using jasypt.\n\n\nNext, we give a simple example how to encypt and configure a secret value.\nWe use the algorithm PBEWITHHMACSHA512ANDAES_256 that provides strong encryption and is the default of jasypt-spring-boot-starter.\nHowever, different algorithms can be used if perferred (e.g. PBEWITHMD5ANDTRIPLEDES).\n\n\n\n\n\n\n\nOf course the master-password (masterpassword) and the actual password to encrypt (secret) are just examples.\nPlease replace them with reasonable strong passwords for your environment.\nFurther, if you are using devonfw-ide you can make your life much easier and just type:\n\n\n\n\n\n\n\nSee jasypt commandlet for details.\n\n\nNow the entire line after the OUTPUT block is your encrypted secret.\nIt even contains some random salt so that multiple encryption invocations with the same parameters (ARGUMENTS) will produce a different OUTPUT.\n\n\nThe master-password can be configured on your target environment via the property jasypt.encryptor.password. As system properties given on the command-line are visible in the process list, we recommend to use an config/application.yml file only for this purpose (as we recommended to use application.properties for regular configs):\n\n\n\n\n\n\n\nAgain masterpassword is just an example that your replace with your actual master password.\nNow you are able to put encrypted passwords into your application.properties and specify the algorithm.\n\n\n\n\n\n\n\nThis application.properties file can be version controlled (git-opts) and without knowing the masterpassword nobody is able to decrypt this to get the actual secret back.\n\n\nTo prevent jasypt to throw an exception in dev or test scenarios you can simply put this in your local config (src/main/config/application.properties and same for test, see above for details):\n\n\n\n\n\n\n\n\n\n\nMapping configuration to your code\n\nIf you are using spring-boot as suggested by devon4j your application can be configured by application.properties file as described in configuration.\nTo get a single configuration option into your code for flexibility, you can use\n\n\n\n\n\n\n\nNow, in your application.properties you can add the property:\n\n\n\n\n\n\n\nYou may even use @Value(\"${my.property.name:my-default-value}\") to make the property optional.\n\n\nNaming conventions for configuration properties\n\nAs a best practice your configruation properties should follow these naming conventions:\n\n\n\n\nbuild the property-name as a path of segments separated by the dot character (.)\n\n\nsegments should get more specific from left to right\n\n\na property-name should either be a leaf value or a tree node (prefix of other property-names) but never both! So never have something like foo.bar=value and foo.bar.child=value2.\n\n\nstart with a segment namespace unique to your context or application\n\n\na good example would be «myapp».billing.service.email.sender for the sender address of billing service emails send by «myapp».\n\n\n\n\n\nMapping advanced configuration\n\nHowever, in many scenarios you will have features that require more than just one property.\nInjecting those via @Value is not leading to good code quality.\nInstead we create a class with the suffix ConfigProperties containing all configuration properties for our aspect that is annotated with @ConfigurationProperties:\n\n\n\n\n\n\n\nOf course this is just an example to demonstrate this feature of spring-boot.\nIn order to send emails you would typically use the existing spring-email feature.\nBut as you can see this allows us to define and access our configuration in a very structured and comfortable way.\nThe annotation @ConfigurationProperties(prefix = \"myapp.billing.service\") will automatically map spring configuration properties starting with myapp.billing.service via the according getters and setters into our BillingServiceConfigProperties.\nWe can easily define defaults (e.g. 25 as default value for myapp.billing.service.smtp.port).\nAlso Email or Smtp could be top-level classes to be reused in multiple configurations.\nOf course you would also add helpful JavaDoc comments to the getters and classes to document your configuration options.\nFurther to access this configuration, we can use standard dependency-injection:\n\n\n\n\n\n\n\nFor very generic cases you may also use Map&lt;String, String&gt; to map any kind of property in an untyped way.\nAn example for generic configuration from devon4j can be found in\nServiceConfigProperties.\n\n\nFor further details about this feature also consult Guide to @ConfigurationProperties in Spring Boot.\n\n\n\nGenerate configuration metadata\n\nYou should further add this dependency to your module containing the *ConfigProperties:\n\n\n\n\n\n\n\nThis will generate configuration metadata so projects using your code can benefit from autocompletion and getting your JavaDoc as tooltip when editing application.properites what makes this approach very powerful.\nFor further details about this please read A Guide to Spring Boot Configuration Metadata.\n\n\n\n\n\n\n\n"}