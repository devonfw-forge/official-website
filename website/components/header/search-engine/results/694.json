{"type":"doc","filename":"devonfw-guide_hangar.wiki_hangar.asciidoc_azure-devops-deploying-on-aws-eks-or-azure-aks.html","anchor":"devonfw-guide_hangar.wiki_hangar.asciidoc_azure-devops-deploying-on-aws-eks-or-azure-aks","title":"Azure DevOps deploying on AWS EKS or Azure AKS","breadcrumbs":[],"text":"Azure DevOps deploying on AWS EKS or Azure AKS\n\nSetup Azure DevOps project\n\nBy the end of this guide a new project in Azure DevOps will be created.\n\n\n\nPrerequisites\n\n\n\nSign up into Azure DevOps (just follow the section Sign up with a personal Microsoft account).\n\n\nInstall the Azure CLI.\n\n\nCreate an Azure DevOps Personal Access Token (PAT).\n\n\n\n\n\nCreating the Azure DevOps project\n\nThere are two ways of creating an Azure DevOps project:\n\n\n\n\nCreate it manually using the web interface following Microsoft official guide.\n\n\nCreate it in an automated way using the provided script, as shown below.\n\n\n\n\n\n\n\n\n\n\nBoth when done manually and when using the script with -p flag, you will need to choose a process workflow. Learn more about the different options in the official documentation. By default, \"Basic\" workflow is chosen.\n\n\n\n\n\n\nCreating Azure DevOps project using provided script\n\nThe script located at scripts/accounts/azure-devops/create-project.sh enables you to create a new Azure DevOps project or configure an existing one.\n\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExample\n\n./create-project.sh -n \"Hello World\" -d \"This is a sample application\" -o devon-hangar -v public -t myToken -w agile\n\n\n\n\nSetting up a repository on Azure DevOps\n\nBy the end of this guide, a repository on Azure DevOps will be created in an automated way using a script.\n\n\nPrerequisites\n\n\n\nHave an Azure DevOps project already setup and Azure CLI installed and configured. If it is not the case, please go back to corresponding guide.\n\n\nInstall Git.\n\n\n\n\n\nCreating repository using provided script\n\nThe script located at /scripts/repositories/azure-devops/create-repo.sh allows you to either:\n\n\n\n\nCreate an empty repository with just a README file and clone it to your computer into the directory you set. Useful when starting a project from scratch.\n\n\nImport an already existing directory or Git repository into your project giving a path or an URL. Useful for taking to Azure DevOps the development of an existing project.\n\n\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nTypical use cases\n\n\n\n\n\n\n\nThis is non-exhaustive list. Make your own combination of flags if all of the following use cases does not fit your needs.\n\n\n\n\n\nCreating an empty repository\n\n\n\n\n\n\nIn case repository name is not specified, destination directory name will be used.\n\n\n\nCreating an empty repository with Gitflow branching strategy\n\n\n\n\n\n\n\nImporting a remote Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source repository name (in URL) will be used.\n\n\n\nImporting a specific remote Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\nImporting local directory or Git repository\n\n\n\n\n\n\nIn case repository name is not specified, source directory name will be used.\n\n\n\nImporting a specific local Git repository branch as source for a new repository with Gitflow branching strategy\n\n\n\n\n\n\nThis will create master (and develop since a branching strategy is specified) from the &lt;source branch&gt;, removing any other branch (including &lt;source branch&gt;).\n\n\n\n\n\n\n\n\nThis operation is destructive regarding branches on the local repository.\n\n\n\n\n\n\n\n\n\n\n\nSame command could also be used with a local directory, but then using -b and -r would be redundant.\n\n\n\n\n\n\n\n\nBranching strategies\n\nTo ensure the quality of development, it is crucial to keep a clean Git workflow. The following branching strategies are supported (using -s flag):\n\n\nGitflow\n\nThis is not an explanation of Gitflow (there are plenty of them on the web), but the actions performed by the script to help you start using this worflow.\n\n\nBranches\n\n\n\nmaster is the initial (seed) branch.\n\n\ndevelop branch is created from master branch.\n\n\n\n\nAny other branch part the strategy (feature, release, and hotfix branches) will be created by developers during the lifecycle of the project.\n\n\n\n\nPolicies\n\nIn Azure DevOps it is possible to protect important branches against bad practices using branch policies.\n\n\nThe following branch policies are applied to master and develop branches:\n\n\n\n\nRequire a minimum number of reviewers: ON\n\n\n\nMinimum number of reviewers: 1\n\n\nAllow requestors to approve their own changes: ON\n\n\nProhibit the most recent pusher from approving their own changes: OFF\n\n\nAllow completion even if some reviewers vote to wait or reject: OFF\n\n\nWhen new changes are pushed: Reset all approval votes (does not reset votes to reject or wait)\n\n\n\n\n\nCheck for linked work items: OFF\n\n\nCheck for comment resolution: REQUIRED\n\n\nLimit merge types: OFF\n\n\n\n\nThe above policies are defined in a configuration file located at /scripts/repositories/common/config/strategy.cfg. Feel free to adapt it to your needs.\n\n\n\n\n\n\n\n\nThis is the bare minimum standard for any project. We do not prohibit the most recent pusher from approving their own changes, although being more than recommendable, because if we do, it will block the auto-approval of Pull Requests generated during pipelines creation on the following guides.\n\n\n\n\n\nYou can find more information about branch policies in the official documentation.\n\n\n\n\n\n\n\nSetup AWS account IAM for deployment in EKS\n\nThe scope of this section is to prepare an AWS account to be ready for deploying in AWS EKS. By the end of this guide, a new IAM user belonging to a group with the required permissions will be created.\n\n\nPreparing environment\n\nFirst of all, install AWS CLI and Python for your OS.\n\n\n\nPrerequisites\n\n\n\nAn AWS account with IAM full access permission.\n\n\n\n\nAlternative\n\nIn case you do not have an account or permission to create new IAM users, request it to your AWS administrator asking for the following policies being attached. Then go to [check-iam-user-permissions].\n\n\nRequired managed policies\n\n\n\n\n\n\n\nRequired custom policies\n\nFind them on /scripts/accounts/aws/eks-custom-policies.json.\n\n\n\n\n\nCreating IAM user using provided script\n\nThe script located at /scripts/accounts/aws/create-user.sh will automatically create a user, also enrolling it in a newly created group with the required policies attached.\n\n\nIn case you do not have an AWS access key (needed to authenticate through API), follow this guide to create it.\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nIf the \"DevOps\" group does not exist, it will be created.\n\n\n\n\n\n\n\n\n\n\n\nRequired policies for using EKS are located at /scripts/accounts/aws/eks-managed-policies.txt and /scripts/accounts/aws/eks-custom-policies.json\n\n\n\n\n\n\nAfter execution\n\nOn success, the newly created user access data will be shown as output:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is mandatory to store the access key ID and the secret access key securely at this point, as they will not be retrievable again.\n\n\n\n\n\n\n\nCheck IAM user permissions\n\nThe script located at /scripts/accounts/aws/verify-account-policies.sh will check that the necessary policies were attached to the IAM user.\n\n\nUsage\n\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\n\n\n\n\n\nAt least one policies flag (-p, -f or -c) is required.\n\n\n\n\n\n\nExample\n\n\n\n\n\n\nAfter execution, provided policies will be shown preceded by an OK or FAILED depending on the attachment status.\n\n\n\n\n\n\n\n\nRequired policies for using EKS are located at /scripts/accounts/aws/eks-managed-policies.txt and /scripts/accounts/aws/eks-custom-policies.json\n\n\n\n\n\n]]\n== Configure AWS CLI \nOnce you have been provided with an IAM user with the required policies attached, setup the AWS CLI using the following command:\n\n\n\n\n\n\n\nFill the prompted fields with your data:\n\n\n\n\n\n\n\nNow you have AWS CLI ready to use.\n\n\n\n\n\n\nSetting up a Build pipeline on Azure DevOps\n\nIn this section we will create a build pipeline for compiling project code. This pipeline will be configured to be triggered every time there is a commit to the Azure DevOps repository, regardless of which branch it is made on.\n\n\nThe creation of the pipeline will follow the project workflow, so a new branch named feature/build-pipeline will be created and the YAML file for the pipeline will be pushed to it.\n\n\nThen, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in -b flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using -w flag.\n\n\nThe script located at /scripts/pipelines/azure-devops/pipeline_generator.sh will automatically create this new branch, create a build pipeline based on a YAML template appropriate for the project programming language or framework, create the Pull Request and, if it is possible, merge this new branch into the specified branch.\n\n\nPrerequisites\n\nThis script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with git pull).\n\n\n\n== Creating the pipeline using provided script\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n\n\nThe config file for the build pipeline is located at /scripts/pipelines/azure-devops/templates/build/build-pipeline.cfg.\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExamples\n\nQuarkus project\n\nQuarkus native project\n\n\n\n\n\n\n\nQuarkus project using JVM\n\n\n\n\n\n\n\n\nNode.js project\n\n\n\n\n\n\n\nAngular project\n\n\n\n\n\n\n\nPython project\n\n\n\n\n\n\n\nFlutter project\n\n\n\n\n\n\n\n\n\n\n\nSetting up a Test pipeline on Azure DevOps\n\nIn this section we will create a test pipeline on Azure DevOps for running project test cases. This pipeline will be configured in order to be triggered every time the build pipeline is executed successfully on a commit, and consumes the artifact produced by the build pipeline.\n\n\nThe creation of this pipeline will follow the project workflow, so a new branch named feature/test-pipeline will be created and the YAML file for the pipeline will be pushed to it.\n\n\nThen, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in -b flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using -w flag.\n\n\nThe script located at /scripts/pipelines/azure-devops/pipeline_generator.sh will automatically create new branch, create a test pipeline based on a YAML template appropriate for the project programming language or framework, create the Pull Request, and if it is possible, merge this new branch into the specified branch.\n\n\nPrerequisites\n\n\n\nThis script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with git pull).\n\n\n[Optional] Having some knowledge about the application, in particular knowing if, when tested, it produces a log file or some other blob (e.g. performance profiling data) interesting to be kept as an artifact.\n\n\n\n\n\n== Creating the pipeline using provided script\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n\n\nThe config file for the test pipeline is located at /scripts/pipelines/azure-devops/templates/test/test-pipeline.cfg.\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExamples\n\nQuarkus project\n\nQuarkus native project\n\n\n\n\n\n\n\nQuarkus project using JVM\n\n\n\n\n\n\n\n\nNode.js project\n\n\n\n\n\n\n\nAngular project\n\n\n\n\n\n\n\nPython project\n\n\n\n\n\n\n\nFlutter project\n\n\n\n\n\n\n\n\n\n\nSetting up a SonarQube instance in AWS\n\nThe scope of this section is to deploy an AWS EC2 instance running SonarQube for further usage from a CI pipeline. A set of scripts and a Terraform recipe have been created in order to assist you in the launch of a SonarQube instance with an embedded database.\n\n\nGetting Started\n\nPrerequisites\n\n\n\nInstall Terraform.\n\n\nInstall AWS CLI.\n\n\nHave a SSH keypair for the SonarQube instance. You can use an existing one or create a new one with the following command:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis will create a public key, directly stored in AWS (current region only), and a private key stored in the sonarqube.pem file, that will be necessary if you ever need to access the instance, so be sure you store it securely.\n\n\n\n\n\n\nRelevant files\n\n\n\nmain.tf contains declarative definition written in HCL of AWS infrastructure.\n\n\nsetup_sonarqube.sh script to be run on EC2 instance that installs and deploys a container running SonarQube.\n\n\nvariables.tf contains variable definition for main.tf.\n\n\nterraform.tfvars contains values (user-changeable) for the variables defined in variables.tf.\n\n\nterraform.tfstate contains current state of the created infrastructure. Should be stored securely.\n\n\nset-terraform-variables.sh assists user in setting the values of terraform.tfvars.\n\n\n\n\n\n\nUsage\n\nFirst, you need to initialize the working directory containing Terraform configuration files (located at /scripts/sonarqube) and install any required plugins:\n\n\n\n\n\n\n\nThen, you may need to customize some input variables about the environment. To do so, you can either edit terraform.tfvars file or take advantage of the set-terraform-variables script, which allows you to create or update values for the required variables, passing them as flags. As a full example:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnless changed, the keypair name expected by default is sonarqube.\n\n\n\n\n\nFinally, deploy SonarQube instance:\n\n\n\n\n\n\n\n\n\n\n\n\n\nterraform apply command performs a plan and actually carries out the planned changes to each resource using the relevant infrastructure provider’s API. You can use it to perform changes on the created resources later on. Remember to securely store terraform.tfstate file, otherwise you will not be able to perform any changes, including detroying them, from Terraform. More insights here.\n\n\n\n\n\nIn particular, this will create an Ubuntu-based EC2 instance in AWS and deploy a Docker container running SonarQube.\n\n\nYou will get the public IP address of the EC2 instance as output. Take note of it, you will need it later on.\n\n\nAfter a few minutes, you will be able to access SonarQube web interface on http://sonarqube_public_ip:9000 (replace with actual IP) with the following credentials:\n\n\n\n\nUsername:   admin\n\n\nPassword:   admin\n\n\n\n\n\n\n\n\n\n\nChange the default password promptly.\n\n\n\n\n\n\nAppendix: Destroy SonarQube instance\n\nAs long as you keep the terraform.tfstate file generated when creating the SonarQube instance, you can easily destroy it and all associated resources by executing:\n\n\n\n\n\n\n\n\n\n\nSetting up a Quality pipeline on Azure DevOps\n\nIn this section we will create a quality pipeline for analyzing project code with SonarQube. This pipeline will be configured in order to be triggered every time the test pipeline is executed successfully on a commit, and consumes the artifact produced by the build pipeline.\n\n\nThe creation of this pipeline will follow the project workflow, so a new branch named feature/quality-pipeline will be created and the YAML file for the pipeline will be pushed to it.\n\n\nThen, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in -b flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using -w flag.\n\n\nThe script located at /scripts/pipelines/azure-devops/pipeline_generator.sh will automatically create this new branch, create a quality pipeline based on a YAML template appropriate for the project programming language or framework, create the Pull Request, and if it is possible, merge this new branch into the specified branch.\n\n\nPrerequisites\n\n\n\nThis script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with git pull).\n\n\nGenerate a SonarQube token (just follow the section \"Generating a token\").\n\n\n\n\n\n== Creating the pipeline using provided script\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n\n\nThe config file for the quality pipeline is located at /scripts/pipelines/azure-devops/templates/quality/quality-pipeline.cfg.\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExamples\n\nQuarkus project\n\n\n\n\n\n\n\nNode.js project\n\n\n\n\n\n\n\nAngular project\n\n\n\n\n\n\n\nPython project\n\n\n\n\n\n\n\nFlutter project\n\n\n\n\n\n\n\n\n\n\n\nSetup Container Image Registry\n\nThe scope of this section is to setup/create a container image registry or repository (depending on provider) on Docker Hub, AWS or Azure for allowing the pipeline that will package the application to push the resulting container image. By the end of this guide, we will get as an output the container repository URI, and, for some providers, the credentials for accessing the registry.\n\n\nA container image name generically has the following format:\n\n\n\n\n&lt;registry-url&gt;/&lt;namespace&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n&lt;registry-url&gt;: Container registry URL based on registry provider.\n\n\n&lt;namespace&gt;: Namespace within which the image is located.\n\n\n&lt;image-name&gt;: Repository/image name which can be from one level to n-level deep (depending on provider).\n\n\n&lt;tag&gt;: Some alphanumeric tag which is given as identifier.\n\n\n\n\n\n\n\n\nDocker Hub\n\nPrerequisites\n\n\n\nDocker Hub account is required to access Docker Hub Registry. You can create one here.\n\n\n\n\n\nCreating an image repository\n\n\n\nLogin on Docker Hub website.\n\n\nGo to Repositories tab and click on \"Create Repository\".\n\n\nProvide Name and Visibility for the repository and click \"Create\" button.\n\n\n\n\n\nImage Format\n\n\n\n\n\n\n\nFor referencing an image in Docker Hub, you don’t have to specify the &lt;registry-url&gt; since it is the default on Docker.\nIMPORTANT: Docker Hub does not support multi-level image names.\n\n\n\n\n\n\n\n&lt;namespace&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n&lt;namespace&gt;: Username or Organization on Docker Hub.\n\n\n&lt;image-name&gt;: Previously chosen repository name.\n\n\n&lt;tag&gt;: Some alphanumeric tag which is given as identifier.\n\n\n\n\n\n\n\nExamples\n\n\n\ndevonfw/my-thai-star-angular:latest\n\n\ndevonfw/my-thai-star-java:1.5\n\n\ndevonfw/devon4quarkus-reference:2.0\n\n\n\n\n\n\n\nAWS Elastic Container Registry\n\nPrerequisites\n\n\n\nAn AWS account.\n\n\nAWS CLI installed.\n\n\n\n\n\nCreating an image repository namespace\n\n\n\nGet the AWS Account ID by executing aws sts get-caller-identity.\n\n\nLogin to AWS ECR with the following command (an example &lt;region&gt; would be eu-west-1):\n\n\n\n\n\n\n\n\n\n\n\nCreate a repository namespace with the following command:\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n\n\n\n\n\n\nImage Format\n\n\n\n&lt;registry-url&gt;/&lt;namespace&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n&lt;registry-url&gt;: &lt;aws-account-id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n\n\n&lt;namespace&gt;: Previously chosen repository name.\n\n\n&lt;image-name&gt;: Freely chosen project/image-name given by the user.\n\n\n&lt;tag&gt;: Some alphanumeric tag which is given as identifier.\n\n\n\n\n\n\n\nThat is:\n\n\n\n\n&lt;aws-account-id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository-name&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n\nExamples\n\n\n\n1000000001.dkr.ecr.eu-west-1.amazonaws.com/devonfw/my-thai-star-angular:latest\n\n\n1000100001.dkr.ecr.us-east-1.amazonaws.com/devonfw/my-thai-star/angular:1.5\n\n\n1000200001.dkr.ecr.ap-south-1.amazonaws.com/devonfw/quarkus/sample/devon4quarkus-reference:2.0\n\n\n\n\n\n\n\nAzure Container Registry\n\nPrerequisites\n\n\n\nAn Azure account with active subscription.\n\n\nAn Azure resource group.\n\n\nAzure CLI installed.\n\n\n\n\n\nCreating an image registry\n\n\n\nLogin to Azure using az login.\n\n\nSet the Azure Subscription using az account set --subscription &lt;mySubscription&gt;.\n\n\nCreate a registry with the following command:\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n\n\n\n\n\n\n\nEnable user and password authentication on the registry with the following command:\n\n\n\n\n\n\n\n\n\n\nAny authentication option that produces as a result a long-term user and password is valid. The least troublesome one follows.\n\n\n\n\n\n\n\n\n\n\n\n\nRetrieve credentials for accessing the registry with the following command:\n\n\n\n\n\n\n\n\n\n\nImage Format\n\n\n\n&lt;registry-url&gt;/&lt;namespace&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n&lt;registry-url&gt;: &lt;registry-name&gt;.azurecr.io\n\n\n&lt;namespace&gt;/&lt;image-name&gt;: Freely chosen project/image-name given by the user.\n\n\n&lt;tag&gt;: Some alphanumeric tag which is given as identifier.\n\n\n\n\n\n\n\nThat is:\n\n\n\n\n&lt;registry-name&gt;.azurecr.io/&lt;namespace&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n\nExamples\n\n\n\ndevonacr.azurecr.io/devonfw/my-thai-star-angular:latest\n\n\ndevonacr.azurecr.io/devonfw/my-thai-star/angular:1.5\n\n\ndevonacr.azurecr.io/devonfw/quarkus/sample/devon4quarkus-reference:2.0\n\n\n\n\n\n\n\nGoogle Cloud Artifact Registry\n\nPrerequisites\n\n\n\nA Google Cloud project already setup\n\n\nArtifact Repository API enabled for the project\n\n\nGCloud CLI installed and configured\n\n\n\n\n\nCreating an Artifact Registry image repository\n\n\n\nLogin to GCloud using gcloud auth login.\n\n\nCreate a container image repository with the following command:\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n\n\n\n\n\n\n\nEnable access to your Artifact Registry repository from your local Docker client using:\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n\n\n\n\n\n\nImage Format\n\n\n\n&lt;location&gt;-docker.pkg.dev/&lt;project-id&gt;/&lt;repository&gt;/&lt;image-name&gt;:&lt;tag&gt;\n\n\n\n&lt;location&gt;: Regional or multi-regional location of the repository.\n\n\n&lt;project-id&gt;: Google Cloud project ID.\n\n\n&lt;repository&gt;: Previously chosen repository name.\n\n\n&lt;image-name&gt;: Freely chosen project/image-name given by the user.\n\n\n&lt;tag&gt;: Some alphanumeric tag which is given as identifier.\n\n\n\n\n\n\n\nExamples\n\n\n\neurope-southwest1-docker.pkg.dev/poc-cloudnative-capgemini/testdockerrepo/imagendetest:v1\n\n\nus-east5-docker.pkg.dev/projecttest/repo123/helloworld:latest\n\n\n\n\n\n\n\nProvider Documentation\n\n\n\nDocker Hub\n\n\nAWS ECR\n\n\nAzure ACR\n\n\n\n\n\n\n\nSetting up a Package pipeline on Azure DevOps\n\nIn this section we will create a package pipeline to build and push a container image of the project application into the specified container registry. This pipeline will be configured in order to be triggered every time quality pipeline is executed successfully on a commit for release/* and develop branches, requiring manual launch for other branches but still enforcing that quality pipeline has passed. It consumes the artifact produced by the build pipeline.\n\n\nThe creation of the pipeline will follow the project workflow, so a new branch named feature/package-pipeline will be created and the YAML file for the pipeline will be pushed to it.\n\n\nThen, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in -b flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using -w flag.\n\n\nThe script located at /scripts/pipelines/azure-devops/pipeline_generator.sh will automatically create this new branch, create a package pipeline based on a YAML template, create the Pull Request and, if it is possible, merge this new branch into the specified branch.\n\n\nPrerequisites\n\nThis script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with git pull).\n\n\n\n== Creating the pipeline using provided script\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n\n\nThe config file for the package pipeline is located at /scripts/pipelines/azure-devops/templates/package/package-pipeline.cfg.\n\n\n\n\n\n\nFlags\n\n\n\n\n\n\n\nExamples\n\nQuarkus project\n\n"}