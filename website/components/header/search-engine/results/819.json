{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_tutorials.html","anchor":"devonfw-guide_mrchecker.wiki_who-is-mrchecker_tutorials_basic-tutorials_basic-tests_example-01-ab-test-control.asciidoc_page-class","title":"E2E Tutorials","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Tutorials"],"text":"Page Class\n\nCreate a Page class for AB Testing page. Override all the required methods:\n\n\n\n\n\n\n\n\nHow to use Enum?\n\nSimilarly as in environmental variables case, create an enum for storing values of subURLs:\n\n\n\n\n\n\n\nInstead of mapping data from an external file, you can store and access them directly from the enum class:\n\n\n\n\n\n\n\n\nSelector\n\nIn this test case you need selector for only one page element:\n\n\n\n\n\n\n\n\nPage methods\n\nYou need two methods for performing page actions:\n\n\n\n\n\n\n\n\nElemental Selenium Page Class\n\nTo return new Elemental Selenium Page object, implement its class. You only need to write basic methods to check if the page is loaded. There is no need to interact with objects on the site:\n\n\n\n\n\n\n\n\nTest Class\n\nCreate a Test class and write a @Test method to execute the scenario:\n\n\n\n\n\n\n\n\nAssert\n\nAsserts methods are used for creating test pass or fail conditions. The optional first parameter is a message which will be displayed in the test failure description.\n\n\n\n\nassertTrue(boolean condition) - test passes if condition returns true\n\n\nassertFalse(boolean condition) - test passes if condition returns false\n\n\n\n\nAlso, add the @BeforeClass method to open the tested page:\n\n\n\n\n\n\n\n@BeforeClass method executes only once before all other\n@Test cases in the class. There is also a possibility to create a\n@AfterClass method which is performed also once after all @Test cases.\n\n\nYou don’t need to implement @setUp and @tearDown methods because they’re already in TheInternetBaseTest class which you extend.\n\n\n\nCategories\n\nYou can group tests in categories. It’s useful when running many tests at once. Use this parameter:\n\n\n\n\n\n\n\nThen create an interface representing each category. Example:\n\n\n\n\n\n\n\nTo run a test from specified category create Test Suite class:\n\n\n\n\n\n\n\nYou can run a Test Suite as a JUnit test.\n\n\n\n\n\n\n\nIn this test case, the goal is to pass username and password authorization and login to the next page.\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick on Basic Auth link\n\n\nOpen pop-up login window\n\n\nEnter valid username and password\n\n\nOpen next subpage and verify if the user logged in successfully.\n\n\n\n\nPage Class\n\nCreate a page class which represents Basic Auth subpage after proper login.\n\n\n\n\n\n\n\nOverride all the required methods:\n\n\n\n\n\n\n\nIn order to verify a login, create a selector to access the visible message.\n\n\n\n\n\n\n\nAlso, create a method to access the pop-up login window and enter user credentials:\n\n\n\n\n\n\n\n\n\nRobot class\n\nCreating a Robot object allows performing basic system actions such as pressing keys, moving the mouse or taking screenshots. In this case, it’s used to paste login and password text from the clipboard using 'Ctrl + V' shortcut, go to the next field using 'Tab' key and submit by clicking 'Enter'.\n\n\n\nToolkit\n\nStatic class Toolkit can perform basic window actions such as scrolling to a specified position or moving context between components. In this case, it’s used to set clipboard content to username and password value.\n\n\n\n\n\n\n\nWeb drivers like Selenium perform actions much faster than the normal user. This may cause unexpected consequences e.g. some elements may not be loaded before the driver wants to access them. To avoid this problem you can use Thread.sleep(long millis) to wait given time and let browser load wanted component.\n\n\nBEWARE: Using Thread.sleep(long millis) is not the recommended approach. Selenium driver gives methods to wait for a specified element to be enabled or visible with a timeout parameter. This is a more stable and effective way. Also, method waitForPageLoaded() will not solve that issue because it only waits for the ready state from the browser while some javascript actions might be performed after that.\n\n\nTest Class\n\nCreate a Test class and write a @Test method to execute the scenario. Save parameters as class fields:\n\n\n\n\n\n\n\nassertEquals(Object expected, Object actual) - test passes if parameters are equal .\n\n\nAlternative scenario:\n\nThere is also a possibility to log in with credentials as a part of URL: http://login:password@the-internet.herokuapp.com/basic_auth\n\n\nAnother page class method:\n\n\n\n\n\n\n\nAnother test class method:\n\n\n\n\n\n\n\nAfter running test class as a JUnit test, both test cases will be performed.\n\n\nThis test goal is to check the dimensions of broken images on the subpage.\n\n\n\n\n\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Broken Image link and go to Broken Image subpage\n\n\nGet the 3 images' dimensions and compare them with expected values\n\n\n\n\n\n\nPage Class\n\nIn this case, create an array of selectors to access images by index number:\n\n\n\n\n\n\n\n\nTest Class\n\nCreate @Test and @BeforeClass methods. Save expected images' dimensions in class fields:\n\n\n\n\n\n\n\nThe test will pass if every image had the correct width and height.\n\n\nThis case goal is to find out how to create stable selectors.\n\n\nIn the browser’s developer mode, you can see how the page is built. Notice, that buttons' IDs change after click and values in the table haven’t got unique attributes, which might be helpful in order to find them.\n\n\n\n\n\n\n\nDOM - Document Object Model\n\nHTML DOM is a model of the page created by the browser. The page could be represented as the tree of objects. Read more.\n\n\nTo create locators you can use element attributes such as id, class name etc.\n\n\nIt this case, since there are no unique attributes, the best approach is to use HTML document structure and identify page elements by their place in an object hierarchy.\n\n\n\n\n\n\n\n\nJsoup Helper\n\nJsoup Helper is the tool which helps to parse HTML document and get searched values. This is especially useful when values are organized in a generic structure such as a table.\n\n\nJsoupHelper.findTexts(By selector) - this method returns text content of a table as a list of Strings\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Challenging DOM link and go to Challenging DOM subpage\n\n\nGet and save table values\n\n\nClick the first button\n\n\nGet table values again\n\n\nCompare table values before and after button click\n\n\n\n\n\n\n\n\n\nBecause values in the table don’t change, the test should pass if object locators are solid.\n\n\nIn this example, you will learn how to test checkboxes on the page.\n\n\n\n\n\n\n\nA checkbox is a simple web element which can be selected or unselected by clicking on it.\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Checkboxes link and go to Checkboxes page\n\n\nTest if the first checkbox is unchecked\n\n\nSelect the first checkbox\n\n\nTest if the first checkbox is checked\n\n\nTest if the second checkbox is checked\n\n\nUnselect second checkbox\n\n\nTest if the second checkbox is unchecked\n\n\n\n\n\nPage Class\n\nBecause both checkboxes are in one form, it’s possible to locate them by one selector and then access each individual one by index.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheckBox\n\nCheckBox class contains a method to perform actions on checkboxes such as setting and unsetting or verifying if the specified box is checked.\nUse method elementCheckbox(By selector) to create CheckBox Object.\n\n\n\nTest Class\n\n\n\n\n\n\nAfter running Test Class both @Test cases will be performed. Before each one, overrode setUp method will be executed.\n\n\nThis case will show how to test changing website content.\n\n\n\n\n\n\n\nAfter refreshing page (F5) a few times, a new element should appear:\n\n\n\n\n\n\n\nThen, after another couple of refreshes, it should disappear.\n\n\nYou can check in developer mode that Gallery element does not exist in HTML document either, until appearing on the page. The element is created by Javascript.\n\n\n\n\n\n\n\n\n\n\n\n\nSteps:\n\n\n\n\nLoad The Internet Main Page\n\n\nClick Disappearing Elements link and go to that subpage\n\n\nCheck if Menu Buttons exist on the page\n\n\nRefresh the page until a new element appears\n\n\nCheck if Gallery Button exists\n\n\nCheck if the number of buttons equals the expected value\n\n\nRefresh the page until an element disappears\n\n\nCheck if Gallery Button does not exist\n\n\nCheck if the number of buttons is smaller than before\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nfindElementQuietly(By selector) works similar as findElementDynamics(By selector) but won’t throw an exception if an element wasn’t found. In this case, the searched WebElement will have a NULL value.\n\n\n\nTest Class\n\n\n\n\n\n\nassertNull(Objetc object) - test passes if Object returns NULL\nassertNotNull(Objetc object) - test passes if Object does not return NULL\n\n\nThis case shows how to move draggable elements on the page.\nimage::images/example13.png[]\n\n\nTry to move A to B position and see what happens. Also, open browser developer mode and see how the DOM changes.\n\n\n\n\n\n\n\nThe page can easily be broken. You can try to do so and check how the page structure changed in browser developer mode.\n\n\n\n\n\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Drag and Drop link and open subpage\n\n\nCheck if the Drag and Drop message is visible\n\n\nCheck if element A is in container A and B in container B\n\n\nMove element A to position B\n\n\nCheck if element A is in container B and B in container A\n\n\nMove element B to position A\n\n\nAgain check if element A is in container A and B in container B\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nSince HTML5, normal Selenium drag-and-drop action stopped working, thus it’s necessary to execute Javascript which performs the drag-and-drop. To do so, create a JavascriptExecutor object, then read the script from a file drag_and_drop_helper.js and execute it with additional arguments using method executeScript(String script).\n\n\nAn example drag-and-drop solution:\n\n\n\n\n\n\n\nDrag and Drop helper file:\n\n\n\n\n\n\n\n\nTest Class\n\n\n\n\n\n\nThis example shows how to select an element from the dropdown list.\n\n\n\n\n\n\n\nCheck in the developer mode how a Dropdown List’s content has been organized.\n\n\n\n\n\n\n\nNotice that the Dropdown Options have different attributes, such as \"disabled\" or \"selected\".\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick the Dropdown link and go to the subpage\n\n\nSelect first dropdown Option\n\n\nCheck if Option 1 is selected\n\n\nSelect second dropdown Option\n\n\nCheck if Option 2 is selected\n\n\n\n\n\nPage Class\n\n\n\n\n\n\n\nDropdownListElement class\n\nDropdownListElement is MrChecker’s class, which contains methods for performing the dropdown list of actions:\n\n\n\n\n\n\n\n\nTest Class\n\n\n\n\n\n\nThis case shows how to compare dynamic content.\n\n\n\n\n\n\n\nNote that after site refresh, some of the content is different. You can see in the browser’s developer mode how the text and image sources are being changed.\n\n\n\n\n\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Dynamic Content link and load subpage\n\n\nSave page images sources and descriptions before the refresh\n\n\nRefresh page\n\n\nSave page images sources and it’s descriptions after refresh\n\n\nCompare page content before and after refresh and verify if it’s different\n\n\n\n\n\nPage Class\n\n\n\n\n\n\n\nListElements\n\nListElements is MrChecker collection which can store WebElement Objects. Constructing ListElements with cssSelector allows you to store every element on the page which fits  the selector. Example methods:\n\n\n\n\n\n\n\n\nTest Class\n\n\n\n\n\n\nIn the test method, during differences verification, the goal is to compare every element from the first and second list and find first diversity.\n\n\nThis example shows how to test a page with dynamically loading content. Some elements don’t load during page loading, but  during JavaScript execution.\n\n\n\n\n\n\n\nGo to Example 1:\n\n\n\n\n\n\n\nClick \"start\" and see what happens:\n\n\n\n\n\n\n\nWhen loading ends, you should see the following message:\n\n\n\n\n\n\n\nIn the developer mode, you can see that the element with the \"Hello World!\" message exists in page DOM but it’s not displayed. However, the loading bar does not exist there - it’s created by JavaScript. The script is also visible in developer mode:\n\n\n\n\n\n\n\nAfter clicking the \"Start\" button, the element \"Loading\" is created by the script, and the \"Start\" button becomes invisible. When loading ends, \"Hello World\" message is  displayed and the loading bar is hidden. Follow the changes the in developer mode:\n\n\n\n\n\n\n\nGo to example 2:\nFrom a user perspective, there is no difference in page functioning. However, in this case the element with the \"Hello World!\" message does not exist on the page before clicking \"Start\". It’s created by the script.\n\n\n\n\n\n\n\nAfter clicking \"Start\", the element with the loading bar is been created.\n\n\n\n\n\n\n\nAfter a certain time, the loading bar becomes invisible, and then the script creates \"Hello World!\" element and displays it.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\n\nWebDriverWait\n\nThis class performs waiting for actions using Selenium Web Driver:\n\n\n\n\nWebDriverWait(WebDriver driver, long timeOutInSeconds) - constructor, first parameter takes WebDriver, in a second you can specify a timeout in seconds.\nFluentWait method:\n\n\nuntil(Function&lt;? super T, V&gt; isTrue) - waits until condition function given as parameter returns expected value. If waiting time reaches timeout, it throws timeoutException.\n\n\n\n\nMrChecker implements various condition functions in the ExpectedConditions class :\n\n\n\n\nvisibilityOfElementLocated(By selector) - returns WebElement if it’s visible\n\n\ninvisibilityOfElementLocated(By selector) - returns true if Element under given selector is invisible\n\n\n\n\nWebDriver also has methods which wait for some conditions:\n\n\n\n\nwaitForElement(By selector)\n\n\nwaitForElementVisible(By selector)\n\n\nwaitUntilElementClickable(By selector)\n\n\n\n\nIt’s possible to write your own condition function e.g.:\n\n\n\n\n\n\n\nOr as a lambda expression:\n\n\n\n\n\n\n\n\nTest Class\n\nCase 1 steps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Dynamic Loading link and go to a subpage with examples\n\n\nCheck if the page is loaded and \"Dynamically Loaded Page Elements\" header is visible\n\n\nClick Example 1 link and load site\n\n\nVerify if the \"Start\" button is visible\n\n\nClick \"Start\"\n\n\nWait for the loading bar to disappear and check if the displayed message is as it should be\n\n\nGo back to Dynamic Loading page\n\n\n\n\nCase 2 steps:\n\n\n\n\nCheck if the page is loaded and \"Dynamically Loaded Page Elements\" header is visible\n\n\nClick Example 2 link and load site\n\n\nVerify if the \"Start\" button is visible\n\n\nClick \"Start\"\n\n\nWait for the loading bar to disappear\n\n\nWait for the message to appear and check if it is as it should be\n\n\nGo back to Dynamic Loading page\n\n\n\n\n\n\n\n\n\nPerform both cases running Test Class as JUnit Test.\n\n\nWARNING: In this example, there is a visible loading bar signalizing that content is loading.On many websites elements are created by scripts without clear communique. This may cause problems with test stability. When your tests aren’t finding page elements, try to add wait functions with a short timeout.\n\n\n\n\n\n\n\nThis case shows how to perform mouse actions and test modal windows.\n\n\nAfter you move the mouse cursor out of the website, you should see a new window appearing:\n\n\n\n\n\n\n\nCheck in the browser’s developer mode if this window exists in Page DOM\n\n\n\n\n\n\n\nBefore you move the mouse out, the window exists, but it’s not displayed.\n\n\nWhen the mouse is moved, JavaScript changes display attribute. It also hides window after clicking \"Close\".\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\n\nAttributes\n\nElements on pages have attributes like \"id\", \"class\", \"name\", \"style\" etc. In order to check them, use method getAttribute(String name). In this case attribute \"style\" determinates if the element is displayed.\n\n\n\nRobot\n\nRobot class can perform mouse movement. Method mouseMove(int x, int y) moves the remote mouse to given coordinates.\n\n\n\nManage Timeouts\n\nmanage().timeouts() methods allows you to change WebDriver timeouts values such as:\n\n\n\n\npageLoadTimeout(long time, TimeUnit unit) - the amount of time to wait for a page to load before throwing an exception\n\n\nsetScriptTimeout(long time, TimeUnit unit) - the amount of time to wait for finish execution of a script before throwing an exception\n\n\nimplicitlyWait(long time, TimeUnit unit) - the amount of time the driver should wait when searching for an element if it is not immediately present. After that time, it throws an exception.\n\n\n\n\nChanging timeouts can improve test stability but can also make them run slower.\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick Exit Intent link and load subpage\n\n\nCheck if the page is loaded and \"Exit Intent\" message is visible\n\n\nVerify if Modal Window is hidden\n\n\nMove mouse out of the viewport\n\n\nCheck if Modal Window is visible\n\n\nVerify if Modal Window title is correct\n\n\nClick 'close' button\n\n\nAgain verify if Modal Window is hidden\n\n\n\n\n\n\n\n\n\nRemember not to move mouse manually during test execution.\n\n\n\n\n\n\n\nThis example shows how to check if file downloads properly.\n\n\nAfter clicking on one of these links, a specific file should be downloaded to your computer.\n\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nClick on the File Download link and open subpage\n\n\nClick on \"some-file.txt\" download link and download file\n\n\nCheck if the file exists in the appropriate folder\n\n\nDelete the file\n\n\nCheck if the file doesn’t exist in the folder\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nUse FluentWait class and create an expected condition using a lambda expression to wait until the file downloads.\n\n\nTo perform operations on files, use java File class. To get a file name, find it in download URL.\n\n\n\nTest Class\n\n\n\n\n\n\n\n\n\n\n\nThis case shows how to pass through the standard authentication page.\n\n\nWhen you enter the correct credentials, you should see the next page:\n\n\n\n\n\n\n\nIf user data is wrong, an appropriate message appears:\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nInputTextElement\n\nUse methods from this class to perform actions on text fields:\n\n\n\n\nclearInputText() - remove all text from selected input field\n\n\nsetInputText(String text) - enter given text\n\n\n\n\n\nLabelElement\n\n\n\nString getText() method returns visible text from label\n\n\n\n\n\n\nTestClass\n\nPrepare six test cases:\n\n\n\n\nTry to login with empty user data and check if the error message appears\n\n\nTry to login with empty username and valid password and check if the error message appears\n\n\nTry to login with a valid username and empty password and check if the error message appears\n\n\nTry to login with invalid username and invalid password and check if the error message appears\n\n\nTry to login with a valid username and valid password and check if success login message appears, then log out\n\n\nTry to login with a valid username and valid password and check if success login message appears, then log out and check if success logout message is displayed\n\n\n\n\nBefore all tests: Open The Internet Main Page\n\n\nBefore each case: Click on the Form Authentication link and open login page\n\n\nAfter each case: Go back to The Internet Main Page\n\n\n\n\n\n\n\nAfter running Test Class, cases might be performed in a different order.\n\n\n\n\n\n\n\nThis example shows how to approach elements dynamically appearing after the user’s action.\n\n\nMove the mouse over an image to see the additional label.\n\n\n\n\n\n\n\nLabels exist in page DOM all the time but their display attributes change. In this case, there is no JavaScript. Elements' visibility is managed by CSS.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nActions\n\nActions class contains methods used to execute basic user actions such as mouse moving and clicking or keys sending. Action or actions series will be performed after calling perform() method.\n\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nGo to Hovers page\n\n\nMove mouse over random image\n\n\nCheck if displayed text is equal to expected.\n\n\n\n\n\n\n\n\n\nBecause in this case the tested content is being chosen randomly, each test run could check a different element.\n\n\n\n\n\n\n\nThis case shows how to test pop-up JS alerts.\n\n\nAfter clicking one of the buttons, an adequate alert should appear.\n\n\n\n\n\n\n\nPerformed action will be displayed under \"Result\" label.\n\n\nIn developer mode, you can view JavaScript which creates alerts.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nalert()\n\nUsing switchTo() method you can change processed content. switchTo().alert() allows performing actions on appearing alerts such as accepting, dismissing or entering keys.\n\n\n\n\nTest Class\n\nBefore all tests: Open The Internet Main Page and go to JavaScript Alert page\n\n\n\n\nClick JS Alert button, accept alert and check if Result message returns performed an action\n\n\nClick JS Confirm button, accept alert and check if Result message returns performed action\n\n\nClick JS Confirm button, dismiss alert and check if Result message returns performed action\n\n\nClick JS Prompt button, write random text, accept alert and check if Result message returns performed action with written text\n\n\nClick JS Prompt button, dismiss the alert and check if Result message returns performed action\n\n\n\n\nAfter each case: Refresh Page\n\n\nAfter all tests:  Navigate back to The Internet Main Page\n\n\n\n\n\n\n\n\n\n\n\n\nThis simple case shows how to test key pressing\n\n\nThis site uses JavaScript to read the key pressed and display its value.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nGo to Key Presses site\n\n\nPress a key\n\n\nCheck if a displayed message contains the pressed key\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis simple example shows how operate on many browser tabs\n\n\nWhen you click the link, a new website will be opened in the second tab.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nYou also need a second page class for New Window Page. Implement only the required methods.\n\n\n\n\n\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nGo to Multiple Windows Page\n\n\nClick the link\n\n\nCheck if a new page is opened in the second tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis simple case shows how to approach redirecting links.\n\n\nAfter clicking on the link, you will be redirected to Status Codes Page.\n\n\n\n\n\n\n\n\nPage Class\n\nRedirect Link Page\n\n\n\n\n\n\n\nStatus Codes Page\n\n\n\n\n\n\n\n\nTest Class\n\nSteps:\n\n\n\n\nOpen The Internet Main Page\n\n\nGo to Redirection Page\n\n\nClick the link\n\n\nCheck if Status Codes Page is loaded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis case shows how to move horizontal slider.\n\n\nYou can move the slider by dragging it with a mouse or using arrow keys. The page uses a simple script to get slider position and display set value.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nHorizontal Slider Element\n\nThis class implements methods wich can perform actions on slider:\n\n\nCreate Slider Object using method:\n\n\n\n\ngetDriver().elementHorizontalSlider(By sliderContainerSelector, By sliderSelector, By valueSelector, BigDecimal minRange, BigDecimal maxRange, BigDecimal step)\n\n\n\n\nAnd use:\n\n\n\n\nBigDecimal getMaxRange()\n\n\nBigDecimal getMinRange()\n\n\nBigDecimal getCurrentSliderValue()\n\n\nsetSliderPositionTo(BigDecimal position, int method) - moves slider to a given position. If the position is not valid, it changes it to the nearest proper value. Second parameter determinates movement method: 0 - Keyboard, 1 - Mouse\n\n\nBigDecimal verifyAndCorrectPositionValue(BigDecimal position) - returns nearest correct position\n\n\n\n\n\n\nTest Class\n\nBefore all tests: Open The Internet Main Page\n\n\nBefore each case:\n\n\n\n\nGo to Horizontal Slider Page\n\n\nCheck if the slider is visible\n\n\nSave start, middle and end position\n\n\n\n\nCase 1 - Moving with the keyboard:\n\n\n\n\nMove slider to start position, and check if the current position equals the beginning value\n\n\nMove the slider to middle position, and check if the current position equals the middle value\n\n\nMove slider to end position, and check if the current position equals the end value\n\n\nTry to move slider before start position, and check if the current position equals the beginning value\n\n\nTry to move slider after end position, and check if the current position equals the end value\n\n\nTry to move the slider to an improperly defined position between start and middle, and check if the current position equals the corrected value\n\n\nTry to move the slider to an improperly defined random position, and check if the current position equals the corrected value\n\n\nMove the slider back to start position, and check if the current position equals the beginning value\n\n\n\n\nCase 2 - Moving with a mouse: Repeat each Case 1 step using a mouse instead of keyboard\n\n\n\n\n\n\n\n\n\n\n\n\nThis example shows how to sort and read data from tables.\n\n\nAfter clicking on a column header, the data will be sorted descending and after another click sorted ascending by selected attribute. Watch how both tables' content changes on page DOM. Sorting is performed by JavaScript functions.\n\n\n\n\n\n\n\n\nPage Class\n\n\n\n\n\n\nFinding values\n\nUsing proper selectors, save elements such as tables and their columns' headers as Web Element Lists. Afterwards, you can get the desired element finding it by index (e. g. table or column number). To get column values, use JsoupHelper and to check if the column is sorted get its class attribute.\n\n\n\n\nTest Class\n\nBefore all tests: Open The Internet Main Page\n\n\nBefore each case: Go to Sortable Data Tables Page\n\n\nCase 1:\n\n\n\n\nChoose a random table\n\n\nSort first column \"Last Name\" in ascending order\n\n\nCheck if column header class contains \"headerSortDown\"\n\n\nSave column content to the List\n\n\nCreate List copy and sort it\n\n\nCompare sorted values and values from the table\n\n\n\n\nCase 2:\n\n\n\n\nChoose a random table\n\n\nSort second column \"First Name\" in descending order\n\n\nCheck if column header class contains \"headerSortUp\"\n\n\nSave column content to the List\n\n\nCreate List copy and sort it then reverse it\n\n\nCompare reversed sorted values and values from the table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis example shows how to process HTTP status codes returned by page\n\n\nWhen you click status code link, you will be redirected to the subpage which returns the proper HTTP status code. In order to check what code was returned:\n\n\n\n\nOpen developer tools\n\n\nGo to Network tab\n\n\nClick request name\n\n\nFind a code number in Headers section\n\n\n\n\n\n\n\n\n\n\nPage Class\n\nAdd new methods to existing Status Codes Home Page Class\n\n\n\n\n\n\n\nCreate a page class for status codes subpages as well. In the class constructor specify which code number should be returned.\n\n\n\n\n\n\n\n\nTest Class\n\nBefore all tests: Open The Internet Main Page, go to Status Codes page\n\n\nSteps:\n\n\nFor each status code\n\n\n\n\nClick code link\n\n\nCheck if the page is loaded with an expected code number\n\n\nCheck if the displayed code number equals the expected number\n\n\nGo back to Status Codes Home Page\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Steps\n\nPage Object\n\nYour Product Under Test will be the following website: http://the-internet.herokuapp.com/\n\n\nAt first, create an Object to represent The Internet Main Page:\n\n\n\n\n\n\n\nEach class which extends BasePage class must override three methods:\n\n\n\n\npublic boolean isLoaded() - returns true if the page is loaded and false if not\n\n\npublic void load() - loads the page\n\n\npublic String pageTitle() - returns page title\n\n\n\n\n\n\n\n\n\n\nEnvironment Variables\n\nIn Page classes, when you load/start web, it is uncommon to save fixed main URL.\n\n\nInstead of hardcoded main URL variable, you build your Page class with a dynamic variable.\n\n\nHow to create / update system environment\n\nDynamic variable values are stored under path \\src\\resources\\enviroments\\environments.csv.\n\n\n\n\n\n\n\nBy default, the environment takes value from DEV column.\n\n\nAccess to the external file variables\n\nCreate a class GetEnvironmentParam to map values from an external file with Page class:\n\n\n\n\n\n\n\nWhen you add a new row to environments.csv also add a new variable to GetEnvironmentParam class.\n\n\nIn Page class access environmental variable using this method:\n\n\n\n\n\n\n\n\n\n\nSelectors\n\nCreate selectors\n\nCreate a selector for every interactable element on a webpage using By type. Find elements and it’s attributes using browser developer mode (F12).\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement methods\n\nThen use these selectors to create Objects and perform actions on page elements:\n\n\n\n\n\n\n\nThese methods create a Button object for every link on The Internet Page and click it to redirect on a different subpage.\n\n\n\n\nElements types\n\nMrChecker includes Object types for various elements existing on webpages such as Button, TextBox etc. There is also WebElement class and getDriver().findElementDynamic(By selector) method for creating webpage objects dynamically and performing basic actions:\n\n\nInstead of using static types you can use:\n\n\n\n\n\n\n\nOr perform actions without creating a variable:\n\n\n\n\n\n\n\n\nThe Internet Base Test\n\nTest Class\n\nCreate Test class and override methods:\n\n\n\n\npublic void setUp() - executes before each test\n\n\npublic void tearDown() - executes after each test\n\n\n\n\n\n\n\n\n\nlogStep(String message) method doesn’t exist yet so you should create it:\n\n\n\n\n\n\n\nWrite a method for loading The Internet Page and checking if it is properly opened:\n\n\n\n\n\n\n\nThis Test class can’t be launched because it doesn’t contain any @Test methods. It’s been created only for supporting other Test classes.\n\n\n\n\nBFLogger\n\nBFLogger is a default MrChecker logging tool. Use it to communicate important information from test execution. There are three basic logging methods:\n\n\n\n\nlogInfo(String message) - used for test steps\n\n\nlogDebug(String message) - used for non-official information, either during the test build process or in Page Object files\n\n\nlogError(String message) - used to emphasize critical information\n\n\n\n\nLogs will be visible in the console and in the log file under path: MrChecker_Test_Framework\\workspace\\project-folder\\logs\n\n\n\n\n\nE2E Tutorials\n\n\nMrChecker E2E tutorials\n\nIn order to learn more about MrChecker structure, start from Project Organisation section and then check out our fantastic tutorials:\n\n\nHow to create a basic test in MrChecker\n\nExample: Booking a table\n\nAs an example to test we will use MyThaiStar booking page.\nIn order to book a table, do the following steps:\n\n\n\n\nOpen MyThaiStar Book Table Page\n\n\nEnter booking data: Date and time, Name, Email and number of Table guests\n\n\nClick Accept terms\n\n\nClick Book table\n\n\nDisplay confirmation box and send booking\n\n\nCheck if the booking was successful.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can go through these steps manually and doublecheck the result.\n\n\n\nHow to prepare a test\n\n1. Create BookTablePage class\n\nYou will need a class which will represent MyThaiStart booking page.\nFill the required methods with the following code:\n\n\n\n\n\n\n\ngetDriver() method allows accessing Selenium Web Driver which performs actions on the webpage.\n\n\nAs this page class represents the MyThaiStar booking page, you have to set up selectors for web elements required in the test case. In the example you have to create selectors for elements we’ll interact with:\n\n\n\n\nDate and time input field\n\n\nName input field\n\n\nEmail input field\n\n\nTable guests input field\n\n\nAccept terms checkbox\n\n\nBook table button\n\n\n\n\nSelectors will be implemented as fields.\n\n\nExample of the selector for Date and time input field:\n\n\n\n\n\n\n\nThe input field’s name \"bookingDate\" was found by using the developer console in Google Chrome. How to prepare an everlasting selector?\n\n\n\n\n\n\n\nThis selector can be used to create a WebElement object of the said input field. Therefore, you will create a new method and call it \"enterTimeAndDate\".\n\n\n\n\n\n\n\nNow you can create other selectors and objects and methods for every element on the webpage:\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use those methods in order to create a new method to go through the whole booking process:\n\n\n\n\n\n\n\n\n2. Create ConfirmBookPage class\n\nAs you can see, this method returns another page object that has not yet been created. This step is required, as the booking information that you would like to check is on another webpage. This means that you will have to create another page class and call it ConfirmBookPage:\n\n\n\n\n\n\n\n\n\n\n\n\nAfter the click on Send button - the green confirmation dialogue appears with the message \"Table successfully booked\":\n\n\n\n\n\n\n\nTo be able to check if the booking was successful, you should go back to the BookTablePage class and add one more method in order to check if the green box was displayed:\n\n\n\n\n\n\n\n\n3. Create BookTableTest class\n\nAt this point you can start creating a test class:\n\n\n\n\n\n\n\n\n4. Write the first test\n\nYou can prepare our first test method using the methods from page classes\n\n\n\n\n\n\n\n\n5. Run the test\n\nRun the test by right-clicking on the test method → Run as → JUnit test.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}