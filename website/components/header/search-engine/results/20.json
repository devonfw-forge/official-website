{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-jms.asciidoc","title":"Messaging","breadcrumbs":["Java","Spring","Guides"],"text":"Messaging\n\nMessaging in Java is done using the JMS standard from JEE.\n\n\nProducts\n\nFor messaging you need to choose a JMS provider such as:\n\n\n\n\nRabbitMQ\n\n\nActiveMQ\n\n\nOracle Advanced Queuing (esp. if you already use Oracle RDBMS)\n\n\n\n\n\nReceiver\n\nAs a receiver of messages is receiving data from other systems it is located in the service-layer.\n\n\nJMS Listener\n\nA JmsListener is a class listening and consuming JMS messages. It should carry the suffix JmsListener and implement the MessageListener interface or have its listener method annotated with @JmsListener. This is illustrated by the following example:\n\n\n\n\n\n\n\n\n\nSender\n\nThe sending of JMS messages is considered as any other sending of data like kafka messages or RPC calls via REST using service-client, gRPC, etc.\nThis will typically happen directly from a use-case in the logic-layer.\nHowever, the technical complexity of the communication and protocols itself shall be hidden from the use-case and not be part of the logic layer.\nWith spring we can simply use JmsTemplate to do that.\n\n\n\n\n\n\n"}