{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-service-client.asciidoc","title":"Service Client","breadcrumbs":["Java","Spring","Guides"],"text":"Service Client\n\nThis guide is about consuming (calling) services from other applications (micro-services). For providing services, see the Service-Layer Guide. Services can be consumed by the client or the server. As the client is typically not written in Java, you should consult the according guide for your client technology. In case you want to call a service within your Java code, this guide is the right place to get help.\n\n\nMotivation\n\nVarious solutions already exist for calling services, such as RestTemplate from spring or the JAX-RS client API. Furthermore, each and every service framework offers its own API as well. These solutions might be suitable for very small and simple projects (with one or two such invocations). However, with the trend of microservices, the invocation of a service becomes a very common use-case that occurs all over the place. You typically need a solution that is very easy to use but supports flexible configuration, adding headers for authentication, mapping of errors from the server, logging success/errors with duration for performance analysis, support for synchronous and asynchronous invocations, etc. This is exactly what this devon4j service-client solution brings to you.\n\n\n\nUsage\n\nSpring\n\n\nFor Spring, follow the Spring rest-client guide.\n\n\nQuarkus\n\n\nFor Quarkus, we recommend to follow the official Quarkus rest-client guide\n\n\n\n\n\n\n"}