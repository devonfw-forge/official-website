{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides_2.html","anchor":"devonfw-guide_devon4j.wiki_quarkus_quarkus-template.asciidoc","title":"Quarkus template","breadcrumbs":["Java","Quarkus","Guides"],"text":"Quarkus template\n\nQuarkus Code Generator is provides many alternative technologies and libraries that can be integrated into a project. Detailed guides on multiple topics can be found here.\n\n\nDue to the large selection, getting started can be difficult for developers.\nIn this guide we aim to provide a general suggestion on basic frameworks, libraries, and technologies to make it easy for developers to begin with.\n\n\nWith that said, please take this as a recommendation and not as a compulsion. Depending on your project requirements, you might have to use another stack compared to what is listed below.\n\n\nIf you are new to Quarkus, consider checking out their getting started guide to get an overview of how to create, run, test, as well as package a Quarkus application. Another recommended source to get started is the Katacoda tutorials.\n\n\nBasic templates\n\n\n\nsimple REST API (go to code.quarkus.io)\n\n\nsimple REST API with monitoring (go to code.quarkus.io)\n\n\n\n\nTable 51. Topic-based suggested implementation\n\n\n\n\n\n\n\n\nTopic\nDetail\nSuggested implementation\nNote\n\n\n\n\nruntime\nservlet-container\nUndertow\n\n\n\ncomponent management\ndependency injection\nArC\nArC is based on JSR 365. It also provides interceptors that can be used to implement the same functionality as AOP provides\n\n\nconfiguration\n\nSmallRye Config\nSmallRye Config is an implementation of Eclipse MicroProfile Config. It also supports YAML configuration files\n\n\npersistence\nOR-mapper\nHibernate ORM, Spring Data JPA\nHibernate ORM is the de facto standard JPA implementation and works perfectly in Quarkus. Quarkus also provides a compatibility layer for Spring Data JPA repositories in the form of the spring-data-jpa extension.\n\n\nbatch\n\n\nQuarkus JBeret Extension is a non-official extension, which is hosted in the Quarkiverse Hub. It is an implementation of JSR 352.\n\n\nservice\nREST services\nRESTEasy\nRESTEasy is an portable implementation of the new JCP specification JAX-RS JSR-311. It can be documented via Swagger OpenAPI.\n\n\nasync messaging\nSmallRye Reactive Messaging, Vert.x EventBus\nSmallRye Reactive Messaging is an implementation of the Eclipse MicroProfile Reactive Messaging specification 1.0. You can also utilize SmallRye Reactive Messaging in your Quarkus application to interact with Apache Kafka.\n\n\nmarshalling\nRESTEasy Jackson, RESTEasy JSON-B, RESTEasy JAXB, RESTEasy Multipart\n\n\n\ncloud\nkubernetes\nKubernetes\n\n\n\ndeployment\nMinikube, k3d\nMinikube is quite popular when a Kubernetes cluster is needed for development purposes. Quarkus supports this with the quarkus-minikube extension.\n\n\nlogging\nframework\nJBoss Log Manager and the JBoss Logging facade\nInternally, Quarkus uses JBoss Log Manager and the JBoss Logging facade. Logs from other supported Logging API (JBoss Logging, SLF4J, Apache Commons Logging) will be merged.\n\n\nvalidation\nframework\nHibernate Validator/Bean Validation (JSR 380)\n\n\n\nsecurity\nauthentication &amp; authorization\nJWT authentication\nQuarkus supports various security mechanisms. Depending on your protocol, identity provider you can choose the necessary extensions such as quarkus-oidc quarkus-smallrye-jwt quarkus-elytron-security-oauth2.\n\n\nmonitoring\nframework\nMicrometer Metrics, SmallRye Metrics\nSmallRye Metrics is an implementation of the MicroProfile Metrics specification. Quarkus also offers various extensions to customize the metrics.\n\n\nhealth\nSmallRye Health\nSmallRye Health is an implementation of the MicroProfile Health specification.\n\n\nfault tolerance\nSmallRye Fault Tolerance\nSmallRye Fault Tolerance is an implementation of the MicroProfile Fault Tolerance specification.\n\n\n\n\n\n\n\n"}