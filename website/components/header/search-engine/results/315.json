{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.nexus","title":"Devon4Net.Infrastructure.Nexus","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.Nexus\n\nThis section of the wiki explains how to use the Nexus module, which internally uses the CircuitBreaker module to make requests to Nexus.\n\n\nKey Classes\n\nThe INexusHandler interface contains the methods needed to use the component, we can divide them into the following sections:\n\n\nComponent Management\n\n\n\n\n\n\n\nMethod\nDescription\n\n\nTask&lt;IList&lt;Component&gt;&gt; GetComponents(string repositoryName)\nReturns the list of existing components based on the repository name.\n\n\nTask&lt;IList&lt;Component&gt;&gt; GetComponents(string repositoryName, string componentGroup)\nReturns the list of existing components based on the repository name and component group name.\n\n\nTask&lt;Component&gt; GetComponent(string repositoryName, string componentName)\nReturns a component based on the repository name and the component name.\n\n\nTask&lt;Component&gt; GetComponent(string componentId)\nReturns a component based on the component’s unique identifier.\n\n\nTask UploadComponent&lt;T&gt;(T uploadComponent)\n\nUploads a new component. The types of components supported to be uploaded are:\n\n\n\n\nApt, Docker, Helm, Maven, Npm, Nuget, Pypi, Raw, R, Rubygems, Yum.\n\n\n\n\nThus, in order to upload a new component, a new class must first be created, whose name must follow the following structure\n\n\n{ComponentType}UploadComponent\n\n\nAs an example the name of the class that will be needed to upload a new Nuget Component will be:\n\n\nNugetUploadComponent\n\n\nRemark: It is important that the type of repository to which you want to upload the component is of the same type and format.\n\n\n\n\n\n\n\n\nTask DeleteComponent(string componentId)\nA component will be deleted based on its unique identifier.\n\n\n\n\n\nAsset Management\n\n\n\n\n\n\n\nMethod\nDescription\n\n\nTask&lt;IList&lt;Asset&gt;&gt; GetAssets(string repositoryName)\nReturns the list of existing assets based on the repository name.\n\n\nTask&lt;IList&lt;Asset&gt;&gt; GetAssets(string repositoryName, string assetGroup)\nReturns the list of existing assets based on the repository name and asset group name.\n\n\nTask&lt;Asset&gt; GetAsset(string repositoryName, string assetName)\nReturns an asset based on the repository name and the asset name.\n\n\nTask&lt;Asset&gt; GetAsset(string assetId)\nReturns an asset based on the asset’s unique identifier.\n\n\nTask&lt;string&gt; DownloadAsset(string repositoryName, string assetName)\nThe content of the asset will be obtained in string format. Content will be obtained based on the repository name and asset name provided.\n\n\nTask DeleteAsset(string assetId)\nAn asset will be deleted based on its unique identifier.\n\n\n\n\n\nRepository Management\n\n\n\n\n\n\n\nMethod\nDescription\n\n\nTask CreateRepository&lt;T&gt;(T repositoryDto)\n\nA repository of defined type will be created. In order to create a repository, it will first be necessary to create this repository format class. Nexus allows to work with three different types of repositories which are \"Proxy\", \"Group\" and \"Hosted\". For each of these types, the following repositories formats can be created:\n\n\n\n\nProxy:\n\n\n\nApt, Bower, Cocoapods, Conan, Conda, Docker, Go, Helm, Maven, Npm, Nuget, Pypi, Raw, R, Rubygems, Yum.\n\n\n\n\n\nGroup:\n\n\n\nBower, Docker, Go, Maven, Npm, Nuget, Pypi, Raw, R, Rubygems, Yum.\n\n\n\n\n\nHosted:\n\n\n\nApt, Bower, Docker, Gitlfs, Helm, Maven, Npm, Nuget, Pypi, Raw, R, Rubygems, Yum.\n\n\n\n\n\n\n\nThe name of the class to be created shall follow the following structure:\n\n\n{RepositoryFormat}{RepositoryType}Repository\n\n\nAs an example the name of the class that will need to be created to create a Hosted repository for the Apt format will be:\n\n\nAptHostedRepository\n\n\n\n\n\n\n\n\nTask DeleteRepository(string repositoryName)\nA repository will be deleted based on repository name provided.\n\n\n\n\n\n\nConfiguration\n\nIn order to configure the Nexus module, the following steps are necessary:\n\n\n\n\nAdd to the application options (appsettings.{environment}.json) the object that will host the nexus access credentials. This object is:\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\nDescription\n\n\n\n\nUsername\nnexus user username\n\n\nPassword\nnexus user password\n\n\n\n\n\nFinally it will be necessary to configure the Circuitbreaker module options with the host where the Nexus service is hosted. The following example shows an example configuration:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtra information about CircuitBreaker component configuration can be found here.\n\n\n\n\n\n\nSetting up in Devon\n\nTo set this component up in devon4net template will be necessary to call the SetUpNexus method from program class in region \"devon services\". An example of this step is shown below:\n\n\n\n\n\n\n\nAdd it using Dependency Injection on this case we instanciate Nexus Handler in a Service Sample Class\n\n\n\n\n\n\n\nAdd the necessary references.\n\n\n\n\n\n\n\n\nSetting up in other projects\n\nInstall the package on your solution using the Package Manager Console:\n\n\n\n\n\n\n\nFirst it is needed to configure Nexus component in Program.cs adding the following lines:\n\n\n\n\n\n\n\nIn order to start using it in a service class, it will be needed to add via Dependency Injection the nexus instance.\n\n\n\n\n\n\n\n\n\n"}