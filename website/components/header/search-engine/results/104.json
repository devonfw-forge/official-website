{"type":"doc","filename":"devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html","anchor":"devonfw-guide_devon4j.wiki_guide-client-layer.asciidoc","title":"Client Layer","breadcrumbs":["Java","Spring","Layers"],"text":"Client Layer\n\nThere are various technical approaches to building GUI clients. The devonfw proposes rich clients that connect to the server via data-oriented services (e.g. using REST with JSON).\nIn general, we have to distinguish among the following types of clients:\n\n\n\n\nweb clients\n\n\nnative desktop clients\n\n\n(native) mobile clients\n\n\n\n\nOur main focus is on web-clients. In our sample application my-thai-star we offer a responsive web-client based on Angular following devon4ng that integrates seamlessly with the back ends of my-thai-star available for Java using devon4j as well as .NET/C# using devon4net. For building angular clients read the separate devon4ng guide.\n\n\nJavaScript for Java Developers\n\nIn order to get started with client development as a Java developer we give you some hints to get started. Also if you are an experienced JavaScript developer and want to learn Java this can be helpful. First, you need to understand that the JavaScript ecosystem is as large as the Java ecosystem and developing a modern web client requires a lot of knowledge. The following table helps you as experienced developer to get an overview of the tools, configuration-files, and other related aspects from the new world to learn. Also it helps you to map concepts between the ecosystems. Please note that we list the tools recommended by devonfw here (and we know that there are alternatives not listed here such as gradle, grunt, bower, etc.).\n\n\nTable 43. Aspects in JavaScript and Java ecosystem\n\n\n\n\n\n\n\n\nTopic\nAspect\nJavaScript\nJava\n\n\n\n\nProgramming\nLanguage\nTypeScript (extends JavaScript)\nJava\n\n\nRuntime\nVM\nnodejs (or web-browser)\njvm\n\n\nBuild- &amp; Dependency-Management\nTool\nnpm or yarn\nmaven\n\n\nConfig\npackage.json\npom.xml\n\n\nRepository\nnpm repo\nmaven central (repo search)\n\n\nBuild cmd\nng build or npm run build (goals are not standardized in npm)\nmvn install (see lifecycle)\n\n\nTest cmd\nng test\nmvn test\n\n\nTesting\nTest-Tool\njasmine\njunit\n\n\nTest-Runner\nkarma\njunit / surefire\n\n\nE2E Testing\nProtractor\nSelenium\n\n\nCode Analysis\nCode Coverage\nng test --no-watch --code-coverage\nJaCoCo\n\n\nDevelopment\nIDE\nMS VS Code or IntelliJ\nEclipse or IntelliJ\n\n\nFramework\nAngular (etc.)\nSpring or Quarkus\n\n\n\n\n\n\n\n\n"}