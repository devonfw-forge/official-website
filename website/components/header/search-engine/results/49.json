{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_document-description.html","anchor":"devonfw-guide_cobigen.wiki_h894b02d36170f9e1c7734d06b412c465.asciidoc","title":"CobiGen - Code-based incremental Generator","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","Document Description"],"text":"CobiGen - Code-based incremental Generator\n\nOverview\n\nCobiGen is a generic incremental generator for end-to-end code generation tasks, mostly used in Java projects.\nDue to a template-based approach, CobiGen generates any set of text-based documents and document fragments.\n\n\nInput (currently):\n\n\n\n\nJava classes\n\n\nXML-based files\n\n\nOpenAPI documents\n\n\nPossibly more inputs like WSDL, which is currently not implemented.\n\n\n\n\nOutput:\n\n\n\n\nany text-based document or document fragments specified by templates\n\n\n\n\n\nArchitecture\n\nCobiGen is build as an extensible framework for incremental code generation. It provides extension points for new input readers which allow reading new input types and converting them to an internally processed model. The model is used to process templates of different kinds to generate patches. The template processing will be done by different template engines. There is an extension point for template engines to support multiple ones as well. Finally, the patch will be structurally merged into potentially already existing code. To allow structural merge on different programming languages, the extension point for structural mergers has been introduced. Here you will see an overview of the currently available extension points and plug-ins:\n\n\n\nFeatures and Characteristics\n\n\n\nGenerate fresh files across all the layers of an application - ready to run.\n\n\nAdd on to existing files merging code into it. E.g. generate new methods into existing Java classes or adding nodes to an XML file. Merging of contents into existing files will be done using structural merge mechanisms.\n\n\nStructural merge mechanisms are currently implemented for Java, XML, Java Property Syntax, JSON, Basic HTML, Text Append, TypeScript.\n\n\nConflicts can be resolved individually but automatically by former configuration for each template.\n\n\nCobiGen provides an Eclipse integration as well as a Maven integration.\n\n\nCobiGen comes with an extensive documentation for users and developers.\n\n\nTemplates can be fully tailored to project needs - this is considered as a simple task.\n\n\n\n\n\nSelection of current and past CobiGen applications\n\nGeneral applications:\n\n\n\n\nGeneration of a Java CRUD application based on devonfw architecture including all software-layers on the server plus code for JS-clients (Angular). You can find details here.\n\n\nGeneration of a Java CRUD application according to the Register Factory architecture. Persistence entities are the input for generation.\n\n\nGeneration of builder classes for generating test data for JUnit-Tests. Input are the persistence entities.\n\n\nGeneration of an Angular 13 client with full CRUD operations connected to a devon4j server based on devon4ng application template.\n\n\nGeneration of an Ionic client with full CRUD operations connected to a devon4j server based on devon4ng Ionic template.\n\n\n\n\nProject-specific applications in the past:\n\n\n\n\nGeneration of an additional Java type hierarchy on top of existing Java classes in combination with additional methods to be integrated in the modified classes. Hibernate entities were considered as input as well as output of the generation. The rational in this case, was to generate an additional business object hierarchy on top of an existing data model for efficient business processing.\n\n\nGeneration of hash- and equals-methods as well as copy constructors depending on the field types of the input Java class. Furthermore, CobiGen is able to re-generate these methods/constructors triggered by the user, i.e, when fields have been changed.\n\n\nExtraction of JavaDoc of test classes and their methods for generating a csv test documentation. This test documentation has been further processed manually in Excel to provide a good overview about the currently available tests in the software system, which enables further human analysis.\n\n\n\n\n\n\n\n"}