{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-logging.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-logging.asciidoc_classic-log-files","title":"Classic log-files","breadcrumbs":["Java","General","Logging"],"text":"Classic log-files\n\n\n\n\nNote\n\n\nIn devon4j, we strongly recommend using JSON logging instead of classic log files. The following section refers only to devon4j Spring applications that use Logback.\n\n\n\n\n\nEven though we do not recommend anymore to write classical log-files to the local disc, here you can still find our approach for it.\n\n\nMaven-Integration\n\nIn the pom.xml of your application add this dependency:\n\n\n\n\n\n\n\nThe above dependency already adds transitive dependencies to SLF4J and logback.\nAlso it comes with configration snipplets that can be included from your logback.xml file (see configuration).\n\n\nThe logback.xml to write regular log-files can look as following:\n\n\n\n\n\n\n\nThe provided logback.xml is configured to use variables defined on the config/application.properties file.\nOn our example, the log files path point to ../logs/ in order to log to tomcat log directory when starting tomcat on the bin folder.\nChange it according to your custom needs.\n\n\nListing 13. config/application.properties\n\n\n\n\n\n\nLog Files\n\nThe classical approach uses the following log files:\n\n\n\n\nError Log: Includes log entries to detect errors.\n\n\nInfo Log: Used to analyze system status and to detect bottlenecks.\n\n\nDebug Log: Detailed information for error detection.\n\n\n\n\nThe log file name pattern is as follows:\n\n\n\n\n\n\n\nTable 36. Segments of Logfilename\n\n\n\n\n\n\n\nElement\nValue\nDescription\n\n\n\n\n«LOGTYPE»\ninfo, error, debug\nType of log file\n\n\n«HOST»\ne.g. mywebserver01\nName of server, where logs are generated\n\n\n«APPLICATION»\ne.g. myapp\nName of application, which causes logs\n\n\n«TIMESTAMP»\nYYYY-MM-DD_HH00\ndate of log file\n\n\n\n\nExample:\nerror_log_mywebserver01_myapp_2013-09-16_0900.log\n\n\nError log from mywebserver01 at application myapp at 16th September 2013 9pm.\n\n\n\nOutput format\n\nWe use the following output format for all log entries to ensure that searching and filtering of log entries work consistent for all logfiles:\n\n\n\n\n\n\n\n\n\nD: Date (Timestamp in ISO8601 format e.g. 2013-09-05 16:40:36,464)\n\n\nP: Priority (the log level)\n\n\nC: Correlation ID (ID to identify users across multiple systems, needed when application is distributed)\n\n\nT: Thread (Name of thread)\n\n\nL: Logger name (use class name)\n\n\nM: Message (log message)\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhen using devon4j-logging, this format is used by default. To achieve this format in Quarkus, set quarkus.log.console.format=[D: %d] [P: %p] [C: %X] [T: %t] [L: %c] [M: %m]%n in your properties.\n\n\n\n\n\n\nCorrelation ID\n\nIn order to correlate separate HTTP requests to services belonging to the same user / session, we provide a servlet filter called DiagnosticContextFilter.\nThis filter takes a provided correlation ID from the HTTP header X-Correlation-Id.\nIf none was found, it will generate a new correlation id as UUID.\nThis correlation ID is added as MDC to the logger.\nTherefore, it will then be included to any log message of the current request (thread).\nFurther concepts such as service invocations will pass this correlation ID to subsequent calls in the application landscape. Hence you can find all log messages related to an initial request simply via the correlation ID even in highly distributed systems.\n\n\n\nSecurity\n\nIn order to prevent log forging attacks you can simply use the suggested JSON logging format.\nOtherwise you can use com.devonfw.module.logging.common.impl.SingleLinePatternLayout as demonstrated  here in order to prevent such attacks.\n\n\n\n\n\n\n\n"}