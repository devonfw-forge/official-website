{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-security.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-security.asciidoc_tools","title":"Tools","breadcrumbs":["Java","General","Security"],"text":"Tools\n\nDependency Check\n\nTo address the thread Using Components with Known Vulnerabilities we recomment to use OWASP dependency check that ships with a maven plugin and can analyze your dependencies for known CVEs.\nIn order to run this check, you can simply call this command on any maven project:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe version is just for completeness. You should check yourself for using a recent version of the plugin.\n\n\n\n\n\nIf you build an devon4j spring application from our app-template you can activate the dependency check even easier with the security profile:\n\n\n\n\n\n\n\nThis does not run by default as it causes some overhead for the build performance. However, consider to build this in your CI at least nightly.\nAfter the dependency check is performed, you will find the results in target/dependency-check-report.html of each module. The report will also be generated when the site is build (mvn site) even without the profile.\n\n\n\nPenetration Testing\n\nFor penetration testing (testing for vulnerabilities) of your web application, we recommend the following tools:\n\n\n\n\nZAP (OWASP Zed Attack Proxy Project)\n\n\nsqlmap (or HQLmap)\n\n\nnmap\n\n\nSee the marvelous presentation Toolbox of a security professional from Christian Schneider.\n\n\n\n\n\n\n\n\n\n"}