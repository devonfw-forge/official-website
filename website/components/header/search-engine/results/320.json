{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.rabbitmq","title":"Devon4Net.Infrastructure.RabbitMQ","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.RabbitMQ\n\nRabbitMQ is an open-source message-broker software (also known as message-oriented middleware) that was developed to support the Advanced Message Queuing Protocol (AMQP) and has since been expanded with a plug-in architecture to support the Streaming Text Oriented Messaging Protocol (STOMP), MQ Telemetry Transport (MQTT), and other protocols.\n\n\nIn RabbitMQ, queues are defined to store messages sent by producers until they are received and processed by consumer applications.\n\n\nPatterns\n\n\n\nPublisher-Subscriber pattern\n\nPublish-Subscribe is a design pattern that allows loose coupling between the application components.\n\n\nMessage senders, known as publishers, do not configure the messages to be sent directly to specific receivers, known as subscribers.\nMessages are released with no information of what they are or if any subscribers to that information exist.\nDelegate is the core of this C# design pattern.\n\n\n\n\n\nFigure 87. RabbitMQ Queue system\n\n\nTo summarize :\n\n\n\n\nA producer is a user application that sends messages.\n\n\nA queue is a buffer that stores messages.\n\n\nA consumer is a user application that receives messages.\n\n\n\n\n\n\n\n\nKey Classes\n\nIn the case of this component the messages are created in the Message abstract class:\n\n\n\n\n\n\n\nThen the Command serializable class inherits from Message class:\n\n\n\n\n\n\n\nThe message will have from base a Timestamp, a Guid as message identifier and the message type.\n\n\n\nConfiguration\n\nComponent configuration is made on file appsettings.{environment}.json as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease refer to the official EasyNetQ documentation for further details about connection parameters.\n\n\n\n\n\n\nSetting up in Devon\n\nFor setting it up using the Devon4NetApi template configure it in the appsettings.{environment}.json file.\n\n\nA template is available in the RabbitMqManagement folder of the Devon4Net.Application.WebAPI.Implementation Business folder:\n\n\n\n\n\nFigure 88. RabbitMQ Management folder structure\n\n\n\n\nTodoCommand.cs:\n\n\n\n\n\n\nThe TodoCommand inherits from Command, in this case, the Description will be added to the Message.\n\n\n\nTodoRabbitMqHandler.cs:\n\n\n\n\n\n\nThis class must to inherit from RabbitMqHandler&lt;T&gt; class.\nHandleCommand(T command) method should be overridden in order to send command to the queue, this method returns true if the message has been published.\n\n\n\n\n\n\nSetting up in other projects\n\nInstall the package in your solution using the Package Manager Console:\n\n\n\n\n\n\n\nCreate a Configuration static class in order to add the RabbitMqHandler services, for example:\n\n\n\n\n\n\n\nAdd the following lines in the Program.cs class:\n\n\n\n\n\n\n\nAfter adding the default settings provided in the configuration section, you may use the RabbitMQ component in your code.\n\n\n\n\n\n\n\n\nPlease see the  RabbitMQ official documentation for instructions on installing the RabbitMQ Server. You can also visit the RabbitMQ How-to section\n\n\n\n\n\n\n\n"}