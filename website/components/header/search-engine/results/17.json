{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-feature-toggle.asciidoc","title":"Feature-Toggles","breadcrumbs":["Java","Spring","Guides"],"text":"Feature-Toggles\n\nThe most software developing teams use Feature-Branching to be able to work in parallel and maintain a stable main branch in the VCS. However Feature-Branching might not be the ideal tool in every case because of big merges and isolation between development groups. In many cases, Feature-Toggles can avoid some of these problems, so these should definitely be considered to be used in the collaborative software development.\n\n\nImplementation with the devonfw\n\nTo use Feature-Toggles with the devonfw, use the Framework Togglz because it has all the features generally needed and provides a great documentation.\n\n\nFor a pretty minimal working example, also see this fork.\n\n\nPreparation\n\nThe following example takes place in the oasp-sample-core project, so the necessary dependencies have to be added to the according pom.xml file. Required are the main Togglz project including Spring support, the Togglz console to graphically change the feature state and the Spring security package to handle authentication for the Togglz console.\n\n\n\n\n\n\n\nIn addition to that, the following lines have to be included in the spring configuration file application.properties\n\n\n\n\n\n\n\n\nSmall features\n\nFor small features, a simple query of the toggle state is often enough to achieve the desired functionality. To illustrate this, a simple example follows, which implements a toggle to limit the page size returned by the staffmanagement. See here for further details.\n\n\nThis is the current implementation to toggle the feature:\n\n\n\n\n\n\n\nTo realise this more elegantly with Togglz, first an enum is required to configure the feature-toggle.\n\n\n\n\n\n\n\nTo familiarize the Spring framework with the enum, add the following entry to the application.properties file.\n\n\n\n\n\n\n\nAfter that, the toggle can be used easily by calling the isActive() method of the enum.\n\n\n\n\n\n\n\nThis way, you can easily switch the feature on or off by using the administration console at http://localhost:8081/devon4j-sample-server/togglz-console. If you are getting redirected to the login page, just sign in with any valid user (eg. admin).\n\n\n\nExtensive features\n\nWhen implementing extensive features, you might want to consider using the strategy design pattern to maintain the overview of your software. The following example is an implementation of a feature which adds a 25% discount to all products managed by the offermanagement.\n\n\nTherefore there are two strategies needed:\n\n\nReturn the offers with the normal price\n\n\nReturn the offers with a 25% discount\n\n\n\n\nThe implementation is pretty straight forward so use this as a reference. Compare this for further details.\n\n\n\n\n\n\n\n\n\nGuidelines for a successful use of feature-toggles\n\nThe use of feature-toggles requires a specified set of guidelines to maintain the overview on the software. The following is a collection of considerations and examples for conventions that are reasonable to use.\n\n\nMinimize the number of toggles\n\nWhen using too many toggles at the same time, it is hard to maintain a good overview of the system and things like finding bugs are getting much harder. Additionally, the management of toggles in the configuration interface gets more difficult due to the amount of toggles.\n\n\nTo prevent toggles from piling up during development, a toggle and the associated obsolete source code should be removed after the completion of the corresponding feature. In addition to that, the existing toggles should be revisited periodically to verify that these are still needed and therefore remove legacy toggles.\n\n\n\nConsistent naming scheme\n\nA consistent naming scheme is the key to a structured and easily maintainable set of features. This should include the naming of toggles in the source code and the appropriate naming of commit messages in the VCS. The following section contains an example for a useful naming scheme including a small example.\n\n\nEvery Feature-Toggle in the system has to get its own unique name without repeating any names of features, which were removed from the system. The chosen names should be descriptive names to simplify the association between toggles and their purpose. If the feature should be split into multiple sub-features, you might want to name the feature like the parent feature with a describing addition. If for example you want to split the DISCOUNT feature into the logic and the UI part, you might want to name the sub-features DISCOUNT_LOGIC and DISCOUNT_UI.\n\n\nThe entry in the togglz configuration enum should be named identically to the aforementioned feature name. The explicitness of feature names prevents a confusion between toggles due to using multiple enums.\n\n\nCommit messages are very important for the use of feature-toggles and also should follow a predefined naming scheme. You might want to state the feature name at the beginning of the message, followed by the actual message, describing what the commit changes to the feature. An example commit message could look like the following:\n\n\n\n\n\n\n\nMentioning the feature name in the commit message has the advantage, that you can search your git log for the feature name and get every commit belonging to the feature. An example for this using the tool grep could look like this.\n\n\n\n\n\n\n\nTo keep track of all the features in your software system, a platform like GitHub offers issues. When creating an issue for every feature, you can retrace, who created the feature and who is assigned to completing its development. When referencing the issue from commits, you also have links to all the relevant commits from the issue view.\n\n\n\nPlacement of toggle points\n\nTo maintain a clean codebase, you definitely want to avoid using the same toggle in different places in the software. There should be one single query of the toggle which should be able to toggle the whole functionality of the feature. If one single toggle point is not enough to switch the whole feature on or off, you might want to think about splitting the feature into multiple ones.\n\n\n\nUse of fine-grained features\n\nBigger features in general should be split into multiple sub-features to maintain the overview on the codebase. These sub-features get their own feature-toggle and get implemented independently.\n\n\n\n\n\n\n\n"}