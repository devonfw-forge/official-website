{"type":"doc","filename":"devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_devon4net.infrastructure.aws.parameterstore","title":"Devon4Net.Infrastructure.AWS.ParameterStore","breadcrumbs":[".net","Packages","Packages"],"text":"Devon4Net.Infrastructure.AWS.ParameterStore\n\nAWS Systems Manager’s Parameter Store offers safe, hierarchical storage for the administration of configuration data and secrets.\n\n\nYou can store any type of data in the form of text by using a key-value form where you choose a name for the parameter (key) and store a value for it. It can be any type of configuration value such as connections, api keys, encrypted credentials…​\n\n\nYou can use tags to organize and restrict access to your parameter creating policies.\n\n\nParameter Store is also integrated with Secrets Manager. You can retrieve Secrets Manager secrets when using other AWS services that already support references to Parameter Store parameters.\n\n\nThe main difference with Secrets Manager is that it was designed specifically for storing confidential information (like database credentials, API keys) that needs to be encrypted. It also gives additional functionality like rotation of keys.\n\n\nConfiguration\n\nThe following configuration is for AWS in general and can be done in appsettings.{environment}.json file as follows:\n\n\n\n\n\n\n\n\n\nUseSecrets: Boolean that indicates if AWS Secrets Manager is being used.\n\n\nUseParameterStore: Boolean to indicate if AWS Parameter Store is being used.\n\n\nCredentials: Credentials for connecting with AWS.\n\n\n\nProfile: A collection of settings is called a profile. This would be the name for the current settings.\n\n\nRegion: AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you.\n\n\nAccessKeyId: Access key ID portion of the keypair configured to access your AWS account.\n\n\nSecretAccessKey: Secret access key portion of the keypair configured to access your AWS account.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. If you don’t have access keys, you can create them from the AWS Management Console.\n\n\n\n\n\n\nKey Classes\n\nThere are two ways of using the parameters from your Parameter Store. One is by using the available AwsParameterStoreHandler and the other one, is by including the parameters in your ConfigurationBuilder.\n\n\nHandler\n\nYou have available the handler AwsParameterStoreHandler and its interface IAwsParameterStoreHandler with the following methods:\n\n\n\n\n\n\n\n\n\nReturns\nMethod\nDescription\n\n\nTask&lt;List&lt;ParameterMetadata&gt;&gt;\nGetAllParameters(CancellationToken cancellationToken = default)\nRetreives a list with all the parameters metadata.\n\n\nTask&lt;string&gt;\nGetParameterValue(string parameterName, CancellationToken cancellationToken = default)\nGets the parameter value given its name.\n\n\n\n\nYou can create an instance of the Handler by using its constructor. You can also inject it in your Services Collection as follows:\n\n\n\n\n\n\n\n\nConfiguration Builder\n\nThanks to the AwsParameterStoreConfigurationBuilder you can include all the parameters very easily by adding them to the configuration builder as follows:\n\n\n\n\n\n\n\n\n\nSet up in devon\n\nSome templates have already all he packages referenced so you won’t need to install anything. If that is not the case, you can install it as explained in Set up in other projects.\n\n\n\n\n\n\n\n\nRead the template documentation to learn more about it.\n\n\n\n\n\n\nSet up in other projects\n\nInstall the package in your solution using the Package Manager or by running the following command in the Console:\n\n\n\n\n\n\n\n\nReferences\n\n\n\nAWS Systems Manager Parameter Store - AWS Docs\n\n\n\n\n\n\n"}