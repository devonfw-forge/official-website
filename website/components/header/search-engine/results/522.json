{"type":"doc","filename":"devonfw-guide_general_release-notes-version-2.3.asciidoc_changes-and-new-features.html","anchor":"devonfw-guide_general_release-notes-version-2.3.asciidoc_harvested-components-and-modules","title":"Harvested components and modules","breadcrumbs":["Release Notes","devonfw Release notes 2.3 \"Dash\"","Changes and new features"],"text":"Harvested components and modules\n\nThe devonfw Harvesting process continues to add valuable components and modules to the devonfw platform. The last months the following elements were contributed:\n\n\nService Client support (for Micro service Projects).\n\nThis client is for consuming microservices from other application.This solution is already very flexible and customizable.As of now,this is suitable for small and simple project where two or three microservices are invoked. Donated by JÃ¶rg Hohwiller. See: https://github.com/devonfw-forge/devonfw-microservices\n\n\n\nJHipster devonfw code generation\n\nThis component was donated by the ADcenter in Valencia. It was made in order to comply with strong requirements (especially from the French BU) to use jHipster for code generation.\n\n\nJHipster is a code generator based on Yeoman generators. Its default generator generator-jhipster generates a specific JHipster structure. The purpose of generator-jhipster-DevonModule is to generate the structure and files of a typical devon4j project. It is therefore equivalent to the standard devon4j application template based CobiGen code generation.\n\n\n\nSimple Jenkins task status dashboard\n\nThis component has been donated by, has been harvested from system in use by, Capgemini  Valencia. This dashboard, apart from an optional gamification element, allows the display of multiple Jenkins instances.\n\n\n\n\n"}