{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-jpa.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-transactions.asciidoc","title":"Transaction Handling","breadcrumbs":["Java","General","Java Persistence API"],"text":"Transaction Handling\n\nFor transaction handling we AOP to add transaction control via annotations as aspect.\nThis is done by annotating your code with the @Transactional annotation.\nYou can either annotate your container bean at class level to make all methods transactional or your can annotate individual methods to make them transactional:\n\n\n\n\n\n\n\nJTA Imports\n\nHere are the import statements for transaction support:\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\nUse the above import statement to follow JEE and avoid using org.springframework.transaction.annotation.Transactional.\n\n\n\n\n\n\nJTA Dependencies\n\nPlease note that with Jakarta EE the dependencies have changed.\nWhen you want to start with Jakarta EE you should use these dependencies to get the annoations for dependency injection:\n\n\n\n\n\n\n\nPlease note that with quarkus you will get them as transitive dependencies out of the box.\nThe above Jakarate EE dependencies replace these JEE depdencies:\n\n\n\n\n\n\n\n\nHandling constraint violations\n\nUsing @Transactional magically wraps transaction handling around your code.\nAs constraints are checked by the database at the end when the transaction gets committed, a constraint violation will be thrown by this aspect outside your code.\nIn case you have to handle constraint violations manually, you have to do that in code outside the logic that is annotated with @Transactional.\nThis may be done in a service operation by catching a ConstraintViolationException (org.hibernate.exception.ConstraintViolationException for hibernate).\nAs a generic approach you can solve this via REST execption handling.\n\n\n\nBatches\n\nTransaction control for batches is a lot more complicated and is described in the batch layer.\n\n\n\n\n\n\n\n"}