{"type":"doc","filename":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_test-framework-modules.html","anchor":"devonfw-guide_mrchecker.wiki_master-mrchecker.asciidoc_mobile-test-module","title":"Mobile Test Module","breadcrumbs":["Tools","MrChecker - devonfw testing tool","Test Framework Modules"],"text":"Mobile Test Module\n\n\nMobile Test Module\n\nWhat is MrChecker E2E Mobile Test Module\n\nMrChecker E2E Mobile test Module is a suitable solution for testing Remote Web Design, Mobile Browsers and application.\nA user can write tests suitable for all mobile browsers with a full range of resolution. The way of working is similar to Selenium and uses the same rules and patterns as the Web Driver. For more information please look in the Selenium test module.\n\n\n\nWhat is Page Object Architecture\n\nCreating Selenium test cases can result in an unmaintainable project. One of the reasons is that too many duplicated code is used. Duplicated code could be caused by the duplicated functionality and this will result in duplicated usage of locators. The disadvantage of duplicated code is that the project is less maintainable. If some locator will change, you have to walk through the whole test code to adjust locators where necessary. By using the page object model we can make non-brittle test code and reduce or eliminate duplicate test code. Beside of that it improves the readability and allows us to create interactive documentation. Last but not least, we can create tests with less keystroke. An implementation of the page object model can be achieved by separating the abstraction of the test object and the test scripts.\n\n\n\nPage Object Pattern\n\n\n\n\n\n\n\nMobile Structure\n\nIt is build on the top of the Appium library.\nAppium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms. Native apps are those written using iOS, Android, or Windows SDKs. Mobile web apps are web apps accessed using a mobile browser (Appium supports Safari on iOS and Chrome or the built-in 'Browser' app on Android). Hybrid apps have a wrapper around a \"webview\" - a native control that enables interaction with web content.\n\n\n\nRun on different mobile devices\n\nTo execute each test with chosen connected mobile devices, it is required to use specific arguments in Run configuration.\n\n\n\n\n\n\n\n\n\n\n\n\nDefault supported arguments in MrChecker:\n\n\n\n\ndeviceUrl - http url to Appium Server, default value \"http://127.0.0.1:4723\"\n\n\nautomationName - which automation engine to use , default value \"Appium\"\n\n\nplatformName - which mobile OS platform to use , default value \"Appium\"\n\n\nplatformVersion - mobile OS version , default value \"\"\n\n\ndeviceName - the kind of mobile device or emulator to use , default value \"Android Emulator\"\n\n\napp - the absolute local path or remote http URL to a .ipa file (IOS), .app folder (IOS Simulator), .apk file (Android) or .apks file (Android App Bundle), or a .zip file, default value \".\"\n\n\nbrowserName - name of mobile web browser to automate. Should be an empty string if automating an app instead, default value \"\"\n\n\nnewCommandTimeout - how long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session, default value \"4000\"\n\n\ndeviceOptions - any other capabilites not covered in essential ones, default value none\n\n\n\n\nExample usage:\n\n\n\n\n\n\n\n\n\n\n\n\nCheck also:\n\n\n+\nMy First Selenium Test\n\n\n+\nHow to use Mobile test Module\n\n\n+\nExample TestCase\n\n\n+\nFull list of Generic Capabilities\n\n\n+\nList of additional capabilities for Android\n\n\n+\nList of additional capabilities for iOS\n\n\n\n\n\nHow to use mobile test Module\n\n\n\nInstall IDE with MrChecker\n\n\nSwitch branch to 'feature/Create-mobile-module-#213' - by default it is 'develop'\n\n\n\n\n\n\n\n\n\n\n\nInstall and setup git checkout feature/Create-mobile-module-#213[Appium Server]\n\n\nConnect to local Device by Appium Server\n\n\n\n\n\n\n\nRun Mobile tests with runtime parameters.\nList of supported parameters could be found here\n\n\n\nFrom command line (as in Jenkins):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom IDE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}