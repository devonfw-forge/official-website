{"type":"doc","filename":"devonfw-guide_general_db_guide-oracle.asciidoc_java.html","anchor":"devonfw-guide_general_db_guide-oracle.asciidoc_pooling","title":"Pooling","breadcrumbs":["Choosing your Database","Oracle RDBMS","Java"],"text":"Pooling\n\nIn order to boost performance JDBC connections should be pooled and reused. If you are using Oracle RDBMS and do not plan to change that you can use the Oracle specific connection pool \"Universal Connection Pool (UCP)\" that is perfectly integrated with the Oracle driver. According to the documentation, UCP can even be used to manage third party data sources.\nLike the JDBC driver also the UCP is available in maven central. The dependency should look like this:\n\n\n\n\n\n\n\nwith property oracle.ucp.version analogue to oracle.driver.version.\n\n\nConfiguration is done via application.properties like this (example):\n\n\n\n\n\n\n\nResources: FAQ, developerâ€™s guide, Java API Reference. For an in-depth discussion on how to use JDBC and UCP, see the Oracle documentation Connection Management Strategies for Java Applications using JDBC and UCP.\n\n\nNote: there is a bug in UCP 12.1.0.2 that results in the creation of thousands of java.lang.Timer threads over hours or days of system uptime (see article on stackoverflow). Also, Oracle has a strange bug fixing / patching policy: instead of producing a fixed version 12.1.0.3 or 12.1.0.2.x, Oracle publishes collections of *.class files that must be manually patched into the ucp.jar! Therefore, use the newest versions only.\n\n\n\n"}