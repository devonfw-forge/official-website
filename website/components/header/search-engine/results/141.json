{"type":"doc","filename":"devonfw-guide_devon4j.wiki_guide-dependency-injection.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-dependency-injection.asciidoc_example-bean","title":"Example Bean","breadcrumbs":["Java","General","Dependency Injection"],"text":"Example Bean\n\nHere you can see the implementation of an example bean using dependency injection:\n\n\n\n\n\n\n\nHere MyComponentImpl depends on MyOtherComponent that is injected into the field myOtherComponent because of the @Inject annotation.\nTo make this work there must be exactly one bean in the container (e.g. spring or quarkus) that is an instance of MyOtherComponent.\nIn order to put a bean into the container, we can use @ApplicationScoped in case of CDI (required for quarkus) for a stateless bean.\nIn spring we can ommit a CDI annotation and the @Named annotation is already sufficient as a bean is stateless by default in spring.\nIf we always use @ApplicationScoped we can make this more explicit and more portable accross different frameworks.\nSo in our example we put MyComponentImpl into the container.\nThat bean will be called MyComponent as we specified in the @Named annotation but we can also omit the name to use the classname as fallback.\nNow our bean can be injected into other beans using @Inject annotation either via MyComponent interface (recommended when interface is present) or even directly via MyComponentImpl.\nIn case you omit the interface, you should also omit the Impl suffix or instead use Bean as suffix.\n\n\n\n"}