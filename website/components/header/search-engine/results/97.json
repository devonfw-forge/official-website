{"type":"doc","filename":"devonfw-guide_devon4j.wiki_coding-conventions.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_coding-conventions.asciidoc_packages","title":"Packages","breadcrumbs":["Java","General","Coding Conventions"],"text":"Packages\n\nJava Packages are the most important element to structure your code. We use a strict packaging convention to map technical layers and business components (slices) to the code (See technical architecture for further details). By using the same names in documentation and code we create a strong link that gives orientation and makes it easy to find from business requirements, specifications or story tickets into the code and back.\n\n\nFor an devon4j based application we use the following Java-Package schema:\n\n\n\n\n\n\n\nE.g. in our example application we find the Spring Data repositories for the ordermanagement component in the package com.devonfw.application.mtsj.ordermanagement.dataaccess.api.repo\n\n\nTable 32. Segments of package schema\n\n\n\n\n\n\n\nSegment\nDescription\nExample\n\n\n\n\n«root»\nIs the basic Java Package name-space of your app. Typically we suggest to use «group».«artifact» where «group» is your maven/gradle groupId corresponding to your organization or IT project owning the code following common Java Package conventions. The segment «artifact» is your maven/gradle artifactId and is typically the technical name of your app.\ncom.devonfw.application.mtsj\n\n\n«component»\nThe (business) component the code belongs to. It is defined by the business architecture and uses terms from the business domain. Use the implicit component general for code not belonging to a specific component (foundation code).\nsalesmanagement\n\n\n«layer»\nThe name of the technical layer (See technical architecture). Details are described for the modern project structure and for the classic project structure.\nlogic\n\n\n«detail»\nHere you are free to further divide your code into sub-components and other concerns according to the size of your component part. If you want to strictly separate API from implementation you should start «detail» with «scope» that is explained below.\ndao\n\n\n«scope»\nThe scope which is one of api (official API to be used by other layers or components), base (basic code to be reused by other implementations) and impl (implementation that should never be imported from outside). This segment was initially mandatory but due to trends such as microservices, lean, and agile we decided to make it optional and do not force anybody to use it.\napi\n\n\n\n\nPlease note that devon4j library modules for spring use com.devonfw.module as «root» and the name of the module as «component». E.g. the API of our beanmapping module can be found in the package com.devonfw.module.beanmapping.common.api.\n\n\n\n"}