{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-auditing.asciidoc","title":"Auditing","breadcrumbs":["Java","Spring","Guides"],"text":"Auditing\n\nFor database auditing we use hibernate envers. If you want to use auditing ensure you have the following dependency in your pom.xml:\n\n\nListing 20. spring\n\n\n\n\n\nListing 21. quarkus\n\n\n\n\n\n\n\n\nNote\n\n\nThe following part applies only to spring applications. At this point, the Quarkus extension does not provide any additional configurations. For Quarkus applications, simply use the @Audited annotation to enable auditing for an entity class, as described a few lines below or seen here.\n\n\n\n\n\nMake sure that entity manager also scans the package from the devon4j-jpa[-envers] module in order to work properly. And make sure that correct Repository Factory Bean Class is chosen.\n\n\n\n\n\n\n\nNow let your [Entity]Repository extend from DefaultRevisionedRepository instead of DefaultRepository.\n\n\nThe repository now has a method getRevisionHistoryMetadata(id) and getRevisionHistoryMetadata(id, boolean lazy) available to get a list of revisions for a given entity and a method find(id, revision) to load a specific revision of an entity with the given ID or getLastRevisionHistoryMetadata(id) to load last revision.\nTo enable auditing for a entity simply place the @Audited annotation to your entity and all entity classes it extends from.\n\n\n\n\n\n\n\nWhen auditing is enabled for an entity an additional database table is used to store all changes to the entity table and a corresponding revision number. This table is called &lt;ENTITY_NAME&gt;_AUD per default. Another table called REVINFO is used to store all revisions. Make sure that these tables are available. They can be generated by hibernate with the following property (only for development environments).\n\n\n\n\n\n\n\nAnother possibility is to put them in your database migration scripts like so.\n\n\n\n\n\n\n\n\n\n\n"}