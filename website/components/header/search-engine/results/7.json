{"type":"doc","filename":"asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html","anchor":"devonfw-guide_devon4j.wiki_guide-exceptions.asciidoc","title":"Exception Handling","breadcrumbs":["Java","Spring","Guides"],"text":"Exception Handling\n\nException Principles\n\nFor exceptions we follow these principles:\n\n\n\n\nWe only use exceptions for exceptional situations and not for programming control flows, etc. Creating an exception in Java is expensive and hence should not be done for simply testing whether something is present, valid or permitted. In the latter case design your API to return this as a regular result.\n\n\nWe use unchecked exceptions (RuntimeException) [1]\n\n\nWe distinguish internal exceptions and user exceptions:\n\n\n\nInternal exceptions have technical reasons. For unexpected and exotic situations, it is sufficient to throw existing exceptions such as IllegalStateException. For common scenarios a own exception class is reasonable.\n\n\nUser exceptions contain a message explaining the problem for end users. Therefore, we always define our own exception classes with a clear, brief, but detailed message.\n\n\n\n\n\nOur own exceptions derive from an exception base class supporting\n\n\n\nunique ID per instance\n\n\nError code per class\n\n\nmessage templating (see I18N)\n\n\ndistinguish between user exceptions and internal exceptions\n\n\n\n\n\n\n\nAll this is offered by mmm-util-core, which we propose as a solution.\nIf you use the devon4j-rest module, this is already included. For Quarkus applications, you need to add the dependency manually.\n\n\nIf you want to avoid additional dependencies, you can implement your own solution for this by creating an abstract exception class ApplicationBusinessException extending from RuntimeException. For an example of this, see our Quarkus reference application.\n\n\n\nException Example\n\nHere is an exception class from our sample application:\n\n\n\n\n\n\n\nThe message templates are defined in the interface NlsBundleRestaurantRoot as following:\n\n\n\n\n\n\n\n\nHandling Exceptions\n\nFor catching and handling exceptions we follow these rules:\n\n\n\n\nWe do not catch exceptions just to wrap or to re-throw them.\n\n\nIf we catch an exception and throw a new one, we always have to provide the original exception as cause to the constructor of the new exception.\n\n\nAt the entry points of the application (e.g. a service operation) we have to catch and handle all throwables. This is done via the exception-facade-pattern via an explicit facade or aspect. The devon4j-rest module already provides ready-to-use implementations for this such as RestServiceExceptionFacade that you can use in your Spring application. For Quarkus, follow the Quarkus guide on exception handling.\nThe exception facade has to …​\n\n\n\nlog all errors (user errors on info and technical errors on error level)\n\n\nensure that the entire exception is passed to the logger (not only the message) so that the logger can capture the entire stacktrace and the root cause is not lost.\n\n\nconvert the error to a result appropriable for the client and secure for Sensitive Data Exposure. Especially for security exceptions only a generic security error code or message may be revealed but the details shall only be logged but not be exposed to the client. All internal exceptions are converted to a generic error with a message like:\n\n\n\nAn unexpected technical error has occurred. We apologize any inconvenience. Please try again later.\n\n\n\n\n\n\n\n\n\n\n\nCommon Errors\n\nThe following errors may occur in any devon application:\n\n\nTable 51. Common Exceptions\n\n\n\n\n\n\n\nCode\nMessage\nLink\n\n\n\n\nTechnicalError\nAn unexpected error has occurred! We apologize any inconvenience. Please try again later.\nTechnicalErrorUserException.java\n\n\nServiceInvoke\n«original message of the cause»\nServiceInvocationFailedException.java\n\n\n\n\n\n\n\n\n"}