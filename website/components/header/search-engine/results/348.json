{"type":"doc","filename":"devonfw-guide_devon4net.wiki_userguide.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_userguide.asciidoc_cookbook","title":"Cookbook","breadcrumbs":[".net","User guide","devon4net Guide"],"text":"Cookbook\n\nData management\n\nTo use Entity Framework Core, install the package for the database provider(s) you want to target. This walk-through uses SQL Server.\n\n\nFor a list of available providers see Database Providers\n\n\n\n\nGo to Tools &gt; NuGet Package Manager &gt; Package Manager Console\n\n\nRun Install-Package Microsoft.EntityFrameworkCore.SqlServer\n\n\n\n\nWe will be using some Entity Framework Tools to create a model from the database. So we will install the tools package as well:\n\n\n\n\nRun Install-Package Microsoft.EntityFrameworkCore.Tools\n\n\n\n\nWe will be using some ASP.NET Core Scaffolding tools to create controllers and views later on. So we will install this design package as well:\n\n\n\n\nRun Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design\n\n\n\n\nEntity Framework Code first\n\nIn order to design your database model from scratch, we encourage to follow the Microsoft guidelines described  here.\n\n\n\nEntity Framework Database first\n\n\n\nGo to Tools &gt; NuGet Package Manager &gt; Package Manager Console\n\n\nRun the following command to create a model from the existing database:\n\n\n\n\n\n\n\n\n\nThe command will create the database context and the mapped entities as well inside of Models folder.\n\n\n\nRegister your context with dependency injection\n\nServices are registered with dependency injection during application startup.\n\n\nIn order to register your database context (or multiple database context as well) you can add the following line at ConfigureDbService method at startup.cs:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nParam\nDescription\n\n\n\n\nTodoContext\nIs the database context definition\n\n\nDefault\nIs the connection string defined at ConnectionString node at the appsettings configuration file\n\n\nWebAPI.Configuration.Enums.DatabaseType.InMemory\nIs the database driver selection. In this case InMemory data base is chosen\n\n\n\n\nThe supported databases are:\n\n\n\n\nSqlServer\n\n\nSqlite\n\n\nInMemory\n\n\nCosmos\n\n\nPostgreSQL\n\n\nMySql\n\n\nMariaDb\n\n\nFireBird\n\n\nOracle\n\n\nMSAccess\n\n\n\n\n\n\nRepositories and Services\n\nServices and Repositories are an important part of devon4net proposal. To make them work properly, first of all must be declared and injected at Startup.cs at DI Region.\n\n\nServices are declared in devon4net.Business.Common and injected in Controller classes when needed. Use services to build your application logic.\n\n\n\n\n\nFigure 14. Screenshot of devon4net.Business.Common project in depth\n\n\nFor example, My Thai Star Booking controller constructor looks like this:\n\n\n\n\n\n\n\nCurrently devon4net has a Unit of Work class in order to perform CRUD operations to database making use of your designed model context.\n\n\nRepositories are declared at devon4net.Domain.UnitOfWork project and make use of Unit of Work class.\n\n\nThe common methods to perform CRUD operations (where &lt;T&gt; is an entity from your model) are:\n\n\n\n\nSync methods:\n\n\n\n\n\n\n\n\n\n\n\nAsync methods:\n\n\n\n\n\n\n\n\n\nIf you perform a Commit operation and an error happens, changes will be rolled back.\n\n\n\nSwagger integration\n\nThe given templates allow you to specify the API contract through Swagger integration and the controller classes are the responsible of exposing methods making use of comments in the source code.\n\n\nThe next example shows how to comment the method with summaries in order to define the contract. Add (Triple Slash) XML Documentation To Swagger:\n\n\n\n\n\n\n\nIn order to be effective and make use of the comments to build the API contract, the project which contains the controller classes must generate the XML document file. To achieve this, the XML documentation file must be checked in project settings tab:\n\n\n\n\n\nFigure 15. Project settings tab\n\n\nWe propose to generate the file under the XmlDocumentation folder. For example in devon4net.Domain.Entities project in My Thai Star .NET implementation the output folder is:\n\n\n\n\n\n\n\nThe file devon4net.Business.Common.xml won’t appear until you build the project. Once the file is generated, please modify its properties as a resource and set it to be Copy always .\n\n\n\n\n\nFigure 16. Swagger XML document file properties\n\n\nOnce you have this, the swagger user interface will show the method properties defined in your controller comments.\n\n\nMaking use of this technique controller are not encapsulated to the application project. Also, you can develop your controller classes in different projects obtain code reusability.\n\n\nSwagger comment:\n\n\n\n\n\n\n\n\nComment\nFunctionality\n\n\n\n\n&lt;summary&gt;\nWill map to the operation’s summary\n\n\n&lt;remarks&gt;\nWill map to the operation’s description (shown as \"Implementation Notes\" in the UI)\n\n\n&lt;response code=\"###\"&gt;\nSpecifies the different response of the target method\n\n\n&lt;param&gt;\nWill define the parameter(s) of the target method\n\n\n\n\nPlease check Microsoft’s site regarding to summary notations.\n\n\n\nLogging module\n\nAn important part of life software is the need of using log and traces. devon4net has a log module pre-configured to achieve this important point.\n\n\nBy default Microsoft provides a logging module on .NET Core applications. This module is open and can it can be extended. devon4net uses the Serilog implementation. This implementation provides a huge quantity information about events and traces.\n\n\nLog file\n\ndevon4net can write the log information to a simple text file. You can configure the file name and folder at appsettings.json file (LogFile attribute) at devon4net.Application.WebApi project.\n\n\n\nDatabase log\n\ndevon4net can write the log information to a SQLite database. You can configure the file name and folder at appsettings.json file (LogDatabase attribute) at devon4net.Application.WebApi project.\n\n\nWith this method you can launch queries in order to search the information you are looking for.\n\n\n\nSeq log\n\ndevon4net can write the log information to a Serilog server. You can configure the Serilog URL at appsettings.json file (SeqLogServerUrl attribute) at devon4net.Application.WebApi project.\n\n\nWith this method you can make queries via HTTP.\n\n\n\n\n\n\n\nBy default you can find the log information at Logs folder.\n\n\n\n\nJWT module\n\nJSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties allowing you to decode, verify and generate JWT.\n\n\nYou should use JWT for:\n\n\n\n\nAuthentication : allowing the user to access routes, services, and resources that are permitted with that token.\n\n\nInformation Exchange: JSON Web Tokens are a good way of securely transmitting information between parties.  Additionally, as the signature is calculated using the header and the payload, you can also verify that the content.\n\n\n\n\nThe JWT module is configured at Startup.cs inside devon4net.Application.WebApi project from .NET Core template. In this class you can configure the different authentication policy and JWT properties.\n\n\nOnce the user has been authenticated, the client perform the call to the backend with the attribute Bearer plus the token generated at server side.\n\n\n\n\n\n\n\nOn My Thai Star sample there are two predefined users: user0 and Waiter. Once they log in the application, the client (Angular/Xamarin) will manage the server call with the json web token. With this method we can manage the server authentication and authorization.\n\n\nYou can find more information about JWT at  jwt.io\n\n\n\nAOP module\n\nAOP (Aspect Oriented Programming) tracks all information when a method is call.AOP also tracks the input and output data when a method is call.\n\n\nBy default devon4net has AOP module pre-configured and activated for controllers at Startup.cs file at devon4net.Application.WebApi:\n\n\n\n\n\n\n\nThis configuration allows all Controller classes to be tracked. If you don’t need to track the info comment the lines written before.\n\n\n\nDocker support\n\ndevon4net Core projects are ready to be integrated with docker.\n\n\nMy Thai Star application sample is ready to be use with linux docker containers. The Readme file explains how to launch and setup the sample application.\n\n\n\n\nangular : Angular client to support backend. Just binaries.\n\n\ndatabase : Database scripts and .bak file\n\n\nmailservice: Microservice implementation to send notifications.\n\n\nnetcore: Server side using .net core 2.0.x.\n\n\nxamarin: Xamarin client based on Excalibur framework from The Netherlands using XForms.\n\n\n\n\nDocker configuration and docker-compose files are provided.\n\n\n\n\n"}